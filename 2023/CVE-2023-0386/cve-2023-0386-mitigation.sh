#!/bin/bash

# cve-2023-0386-mitigation.sh

# CVE-2023-0386 Mitigation and Hardening Script

# OverlayFS Local Privilege Escalation Vulnerability Mitigation

# 

# This script applies patches and security hardening measures

# to protect against CVE-2023-0386

# 

# Author: Baptiste CHEVASSUT

# Date: $(date)

# CVE: CVE-2023-0386

set -e

RED=’\033[0;31m’
GREEN=’\033[0;32m’
YELLOW=’\033[1;33m’
BLUE=’\033[0;34m’
NC=’\033[0m’ # No Color

LOGFILE=”/var/log/cve-2023-0386-mitigation.log”

banner() {
echo -e “${BLUE}”
echo “================================================================”
echo “       CVE-2023-0386 Mitigation and Hardening Script”
echo “================================================================”
echo -e “${NC}”
}

log_info() {
echo -e “${BLUE}[INFO]${NC} $1”
echo “$(date): [INFO] $1” >> “$LOGFILE”
}

log_success() {
echo -e “${GREEN}[SUCCESS]${NC} $1”
echo “$(date): [SUCCESS] $1” >> “$LOGFILE”
}

log_warning() {
echo -e “${YELLOW}[WARNING]${NC} $1”
echo “$(date): [WARNING] $1” >> “$LOGFILE”
}

log_error() {
echo -e “${RED}[ERROR]${NC} $1”
echo “$(date): [ERROR] $1” >> “$LOGFILE”
}

check_root() {
if [[ $EUID -ne 0 ]]; then
log_error “This script must be run as root for system modifications”
exit 1
fi
}

backup_config() {
local file=”$1”
local backup_dir=”/root/cve-2023-0386-backups”

```
mkdir -p "$backup_dir"
if [[ -f "$file" ]]; then
    cp "$file" "$backup_dir/$(basename "$file").backup.$(date +%Y%m%d-%H%M%S)"
    log_info "Backed up $file"
fi
```

}

check_vulnerability_status() {
log_info “Checking current vulnerability status…”

```
KERNEL_VERSION=$(uname -r)
log_info "Current kernel version: $KERNEL_VERSION"

# Check if kernel version is likely vulnerable
MAJOR_VERSION=$(echo "$KERNEL_VERSION" | cut -d. -f1)
MINOR_VERSION=$(echo "$KERNEL_VERSION" | cut -d. -f2)

if [[ $MAJOR_VERSION -lt 6 ]] || [[ $MAJOR_VERSION -eq 6 && $MINOR_VERSION -lt 2 ]]; then
    log_warning "Kernel version may be vulnerable to CVE-2023-0386"
    return 1
else
    log_success "Kernel version appears to include CVE-2023-0386 fix"
    return 0
fi
```

}

update_system() {
log_info “Updating system packages…”

```
# Update package lists
apt-get update

# Check for kernel updates
log_info "Checking for kernel updates..."
UPDATES=$(apt list --upgradable 2>/dev/null | grep linux-image || true)

if [[ -n "$UPDATES" ]]; then
    log_info "Kernel updates available:"
    echo "$UPDATES"
    log_info "Installing kernel updates..."
    apt-get upgrade -y linux-image-* linux-headers-*
    REBOOT_REQUIRED=1
else
    log_info "No kernel updates available"
    # Still upgrade other packages
    apt-get upgrade -y
fi

log_success "System update completed"
```

}

setup_auditd_monitoring() {
log_info “Setting up auditd monitoring for CVE-2023-0386…”

```
# Install auditd if not present
if ! command -v auditctl &> /dev/null; then
    log_info "Installing auditd..."
    apt-get install -y auditd audispd-plugins
    systemctl enable auditd
    systemctl start auditd
fi

# Create audit rules
AUDIT_RULES_FILE="/etc/audit/rules.d/cve-2023-0386.rules"
backup_config "$AUDIT_RULES_FILE"

cat > "$AUDIT_RULES_FILE" << 'EOF'
```

# CVE-2023-0386 OverlayFS Vulnerability Detection Rules

# Monitor for potential exploitation attempts

# Monitor SUID file creation in world-writable directories

-a always,exit -F dir=/tmp/ -F perm=wa -F key=cve_2023_0386_suid_creation
-a always,exit -F dir=/var/tmp/ -F perm=wa -F key=cve_2023_0386_suid_creation

# Monitor execution of SUID binaries by non-root users with successful privilege escalation

-a always,exit -F arch=b64 -S execve -C uid!=euid -F euid=0 -F key=cve_2023_0386_privilege_escalation
-a always,exit -F arch=b32 -S execve -C uid!=euid -F euid=0 -F key=cve_2023_0386_privilege_escalation

# Monitor OverlayFS mounts

-a always,exit -S mount -F a1=“overlay” -F key=cve_2023_0386_overlay_mount

# Monitor FUSE mounts

-a always,exit -S mount -F a1~”fuse” -F key=cve_2023_0386_fuse_mount

# Monitor file attribute changes in temporary directories

-w /tmp/ -p wa -k cve_2023_0386_tmp_changes
-w /var/tmp/ -p wa -k cve_2023_0386_tmp_changes

# Monitor setuid/setgid system calls

-a always,exit -F arch=b64 -S setuid -F key=cve_2023_0386_setuid
-a always,exit -F arch=b32 -S setuid -F key=cve_2023_0386_setuid
-a always,exit -F arch=b64 -S setgid -F key=cve_2023_0386_setgid
-a always,exit -F arch=b32 -S setgid -F key=cve_2023_0386_setgid
EOF

```
# Restart auditd to load new rules
systemctl restart auditd

# Verify rules are loaded
if auditctl -l | grep -q "cve_2023_0386"; then
    log_success "Audit rules loaded successfully"
else
    log_warning "Audit rules may not have loaded properly"
fi
```

}

configure_filesystem_hardening() {
log_info “Applying filesystem hardening measures…”

```
# Backup fstab
backup_config "/etc/fstab"

# Check if /tmp is already mounted with restrictions
if mount | grep -q "/tmp.*noexec"; then
    log_info "/tmp already mounted with noexec"
else
    log_info "Configuring /tmp with security restrictions..."
    
    # Add noexec, nosuid, nodev to /tmp if not already present
    if ! grep -q "^tmpfs /tmp" /etc/fstab; then
        echo "tmpfs /tmp tmpfs defaults,noexec,nosuid,nodev,size=2G 0 0" >> /etc/fstab
        log_info "Added secure /tmp mount to /etc/fstab"
    fi
fi

# Configure /var/tmp similarly
if ! mount | grep -q "/var/tmp.*noexec"; then
    if ! grep -q "^tmpfs /var/tmp" /etc/fstab; then
        echo "tmpfs /var/tmp tmpfs defaults,noexec,nosuid,nodev,size=1G 0 0" >> /etc/fstab
        log_info "Added secure /var/tmp mount to /etc/fstab"
    fi
fi

log_success "Filesystem hardening configured"
```

}

configure_user_namespace_restrictions() {
log_info “Configuring user namespace restrictions…”

```
# Backup sysctl configuration
backup_config "/etc/sysctl.d/99-security.conf"

# Create or update security sysctl settings
SYSCTL_FILE="/etc/sysctl.d/99-cve-2023-0386-security.conf"

cat > "$SYSCTL_FILE" << 'EOF'
```

# CVE-2023-0386 Security Hardening

# Restrict user namespace creation to reduce attack surface

# Disable user namespaces for unprivileged users (if acceptable for your environment)

# WARNING: This may break some containerized applications

# user.max_user_namespaces = 0

# Limit the number of user namespaces

user.max_user_namespaces = 100

# Restrict mount namespace creation

# This helps limit OverlayFS abuse

kernel.unprivileged_userns_clone = 0

# Additional hardening measures

fs.protected_symlinks = 1
fs.protected_hardlinks = 1
fs.protected_fifos = 2
fs.protected_regular = 2
EOF

```
# Apply sysctl settings
sysctl -p "$SYSCTL_FILE"

log_success "User namespace restrictions applied"
```

}

setup_detection_script() {
log_info “Installing detection script…”

```
DETECTION_SCRIPT="/usr/local/bin/cve-2023-0386-detect"

cat > "$DETECTION_SCRIPT" << 'EOF'
```

#!/bin/bash

# CVE-2023-0386 Detection Script

# Run this periodically to check for signs of exploitation

echo “=== CVE-2023-0386 Post-Exploitation Detection ===”
echo “Scan started: $(date)”
echo “”

# Check for suspicious SUID files

echo “[+] Checking for suspicious SUID files…”
echo “SUID files in non-standard locations:”
find / -type f -perm -u=s -not -path ‘/usr/*’ -not -path ’/snap/*’ -not -path ‘/bin/*’ -not -path ’/sbin/*’ 2>/dev/null | head -20

echo “”
echo “Recently modified SUID files (last 24 hours):”
find / -type f -perm -u=s -mtime -1 2>/dev/null | head -10

echo “”
echo “SUID files in temporary directories:”
find /tmp /var/tmp -type f -perm -u=s 2>/dev/null

# Check audit logs

if command -v ausearch &> /dev/null; then
echo “”
echo “[+] Checking audit logs…”

```
echo "Recent privilege escalation events:"
ausearch -k cve_2023_0386_privilege_escalation -ts recent 2>/dev/null | tail -5 || echo "None found"

echo ""
echo "Recent overlay mounts:"
ausearch -k cve_2023_0386_overlay_mount -ts recent 2>/dev/null | tail -5 || echo "None found"

echo ""
echo "Recent FUSE mounts:"
ausearch -k cve_2023_0386_fuse_mount -ts recent 2>/dev/null | tail -5 || echo "None found"
```

fi

# Check system logs

echo “”
echo “[+] Checking system logs…”
echo “Recent OverlayFS activity:”
grep -i “overlay” /var/log/syslog 2>/dev/null | tail -3 || echo “None found”

echo “”
echo “Recent FUSE activity:”
grep -i “fuse” /var/log/syslog 2>/dev/null | tail -3 || echo “None found”

# Check for suspicious processes

echo “”
echo “[+] Checking for privilege escalation artifacts…”
echo “Processes with mismatched UID/EUID:”
ps axo pid,ppid,uid,euid,cmd | awk ‘$3 != $4 && $4 == 0 {print}’ | head -5

# Check current mounts

echo “”
echo “[+] Current suspicious mounts…”
echo “Active OverlayFS mounts:”
mount | grep overlay || echo “None”

echo “”
echo “Active FUSE mounts:”
mount | grep fuse || echo “None”

echo “”
echo “=== Detection scan completed: $(date) ===”
EOF

```
chmod +x "$DETECTION_SCRIPT"

# Create a cron job for regular scanning
CRON_FILE="/etc/cron.d/cve-2023-0386-detection"
cat > "$CRON_FILE" << EOF
```

# CVE-2023-0386 Detection Cron Job

# Run detection scan every 6 hours

0 */6 * * * root $DETECTION_SCRIPT >> /var/log/cve-2023-0386-detection.log 2>&1
EOF

```
log_success "Detection script installed and scheduled"
```

}

create_incident_response_guide() {
log_info “Creating incident response guide…”

```
GUIDE_FILE="/root/cve-2023-0386-incident-response.md"

cat > "$GUIDE_FILE" << 'EOF'
```

# CVE-2023-0386 Incident Response Guide

## If Exploitation is Detected

### Immediate Actions

1. **Isolate the affected system** from the network if possible
1. **Do not reboot** until forensic analysis is complete
1. **Document current system state**:
   
   ```bash
   ps aux > /tmp/processes.txt
   mount > /tmp/mounts.txt
   ls -la /tmp/ > /tmp/tmp-contents.txt
   find / -type f -perm -u=s 2>/dev/null > /tmp/suid-files.txt
   ```

### Forensic Collection

1. **Preserve audit logs**:
   
   ```bash
   cp -r /var/log/audit/ /secure-location/
   ausearch -k cve_2023_0386 > /secure-location/cve-audit.log
   ```
1. **Collect system information**:
   
   ```bash
   uname -a > /secure-location/system-info.txt
   dpkg -l | grep linux-image > /secure-location/kernel-packages.txt
   ```
1. **Check for persistence mechanisms**:
   
   ```bash
   crontab -l > /secure-location/crontab.txt
   ls -la /etc/cron.* > /secure-location/cron-files.txt
   ```

### Recovery Steps

1. **Update the kernel immediately**
1. **Remove any suspicious SUID files**
1. **Reset passwords for potentially compromised accounts**
1. **Review and strengthen access controls**
1. **Implement additional monitoring**

### Prevention

- Keep systems updated
- Monitor audit logs regularly
- Implement filesystem restrictions
- Use application sandboxing where possible
  EOF
  
  log_success “Incident response guide created: $GUIDE_FILE”
  }

main() {
banner

```
log_info "Starting CVE-2023-0386 mitigation process..."
log_info "Logging to: $LOGFILE"

check_root

# Check current status
if check_vulnerability_status; then
    log_info "System appears to have CVE-2023-0386 fix, but applying additional hardening..."
else
    log_warning "System may be vulnerable - applying patches and hardening..."
fi

# Apply mitigations
update_system
setup_auditd_monitoring
configure_filesystem_hardening
configure_user_namespace_restrictions
setup_detection_script
create_incident_response_guide

echo ""
log_success "=========================================="
log_success "CVE-2023-0386 mitigation completed!"
log_success "=========================================="

if [[ "${REBOOT_REQUIRED:-0}" -eq 1 ]]; then
    log_warning "REBOOT REQUIRED to apply kernel updates!"
    log_warning "Please reboot the system when convenient."
fi

echo ""
log_info "Summary of applied mitigations:"
log_info "✓ System packages updated"
log_info "✓ Audit monitoring configured"
log_info "✓ Filesystem hardening applied"
log_info "✓ User namespace restrictions configured"
log_info "✓ Detection script installed"
log_info "✓ Incident response guide created"

echo ""
log_info "Next steps:"
log_info "1. Reboot the system if kernel was updated"
log_info "2. Test applications to ensure compatibility"
log_info "3. Monitor logs regularly using: /usr/local/bin/cve-2023-0386-detect"
log_info "4. Review incident response guide: /root/cve-2023-0386-incident-response.md"

log_success "Mitigation script completed successfully!"
```

}

main “$@”