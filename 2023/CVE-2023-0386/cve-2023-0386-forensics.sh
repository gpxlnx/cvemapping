#!/bin/bash

# cve-2023-0386-forensics.sh

# CVE-2023-0386 Post-Incident Forensics and Analysis Script

# OverlayFS Local Privilege Escalation Vulnerability

# 

# This script performs comprehensive forensic analysis to detect

# signs of CVE-2023-0386 exploitation and system compromise

# 

# Author: Baptiste CHEVASSUT

# Date: $(date)

# CVE: CVE-2023-0386

set -e

RED=’\033[0;31m’
GREEN=’\033[0;32m’
YELLOW=’\033[1;33m’
BLUE=’\033[0;34m’
PURPLE=’\033[0;35m’
NC=’\033[0m’ # No Color

FORENSICS_DIR=”/var/log/cve-2023-0386-forensics”
REPORT_FILE=”$FORENSICS_DIR/forensics-report-$(date +%Y%m%d-%H%M%S).txt”

banner() {
echo -e “${BLUE}”
echo “================================================================”
echo “      CVE-2023-0386 Post-Incident Forensics Analysis”
echo “================================================================”
echo -e “${NC}”
}

log_info() {
echo -e “${BLUE}[INFO]${NC} $1”
echo “[INFO] $1” >> “$REPORT_FILE”
}

log_success() {
echo -e “${GREEN}[OK]${NC} $1”
echo “[OK] $1” >> “$REPORT_FILE”
}

log_warning() {
echo -e “${YELLOW}[WARNING]${NC} $1”
echo “[WARNING] $1” >> “$REPORT_FILE”
}

log_critical() {
echo -e “${RED}[CRITICAL]${NC} $1”
echo “[CRITICAL] $1” >> “$REPORT_FILE”
}

log_finding() {
echo -e “${PURPLE}[FINDING]${NC} $1”
echo “[FINDING] $1” >> “$REPORT_FILE”
}

setup_forensics_environment() {
log_info “Setting up forensics environment…”

```
# Create forensics directory
mkdir -p "$FORENSICS_DIR"
chmod 700 "$FORENSICS_DIR"

# Initialize report
cat > "$REPORT_FILE" << EOF
```

# CVE-2023-0386 Forensics Report

Generated: $(date)
Hostname: $(hostname)
Kernel: $(uname -r)
System: $(lsb_release -d 2>/dev/null | cut -f2 || echo “Unknown”)

EOF

```
log_success "Forensics environment initialized"
log_info "Report file: $REPORT_FILE"
```

}

check_system_info() {
log_info “Collecting system information…”

```
{
    echo "=== SYSTEM INFORMATION ==="
    echo "Hostname: $(hostname)"
    echo "Kernel Version: $(uname -r)"
    echo "OS Release: $(lsb_release -a 2>/dev/null || cat /etc/os-release)"
    echo "Uptime: $(uptime)"
    echo "Current User: $(whoami)"
    echo "Current UID: $(id -u)"
    echo "Current GID: $(id -g)"
    echo "Date: $(date)"
    echo ""
} >> "$REPORT_FILE"

log_success "System information collected"
```

}

analyze_suid_files() {
log_info “Analyzing SUID files for anomalies…”

```
{
    echo "=== SUID FILE ANALYSIS ==="
    echo ""
} >> "$REPORT_FILE"

# Find all SUID files
log_info "Scanning for SUID files..."
SUID_FILES="/tmp/suid_files.txt"
find / -type f -perm -u=s 2>/dev/null > "$SUID_FILES"

# Check for SUID files in suspicious locations
log_info "Checking for SUID files in suspicious locations..."
SUSPICIOUS_SUID=$(find /tmp /var/tmp /dev/shm /home -type f -perm -u=s 2>/dev/null || true)

if [[ -n "$SUSPICIOUS_SUID" ]]; then
    log_critical "Suspicious SUID files found in writable directories!"
    {
        echo "SUSPICIOUS SUID FILES:"
        echo "$SUSPICIOUS_SUID"
        echo ""
        echo "Detailed information:"
        while IFS= read -r file; do
            if [[ -f "$file" ]]; then
                echo "File: $file"
                ls -la "$file"
                file "$file"
                echo "MD5: $(md5sum "$file" 2>/dev/null || echo "Unable to calculate")"
                echo "---"
            fi
        done <<< "$SUSPICIOUS_SUID"
        echo ""
    } >> "$REPORT_FILE"
else
    log_success "No SUID files found in suspicious locations"
    echo "No SUID files found in suspicious locations" >> "$REPORT_FILE"
fi

# Check for recently modified SUID files
log_info "Checking for recently modified SUID files..."
RECENT_SUID=$(find / -type f -perm -u=s -mtime -7 2>/dev/null || true)

if [[ -n "$RECENT_SUID" ]]; then
    log_warning "Recently modified SUID files found (last 7 days):"
    {
        echo "RECENTLY MODIFIED SUID FILES (last 7 days):"
        while IFS= read -r file; do
            if [[ -f "$file" ]]; then
                ls -la "$file"
            fi
        done <<< "$RECENT_SUID"
        echo ""
    } >> "$REPORT_FILE"
else
    log_success "No recently modified SUID files"
    echo "No recently modified SUID files in the last 7 days" >> "$REPORT_FILE"
fi

# Check for non-standard SUID files
log_info "Analyzing non-standard SUID files..."
STANDARD_SUID_PATHS="/usr/bin /usr/sbin /bin /sbin /snap"
NON_STANDARD_SUID=""

while IFS= read -r suid_file; do
    is_standard=false
    for std_path in $STANDARD_SUID_PATHS; do
        if [[ "$suid_file" == "$std_path"* ]]; then
            is_standard=true
            break
        fi
    done
    
    if [[ "$is_standard" == false ]]; then
        NON_STANDARD_SUID="$NON_STANDARD_SUID$suid_file\n"
    fi
done < "$SUID_FILES"

if [[ -n "$NON_STANDARD_SUID" ]]; then
    log_warning "Non-standard SUID files detected:"
    {
        echo "NON-STANDARD SUID FILES:"
        echo -e "$NON_STANDARD_SUID"
        echo ""
    } >> "$REPORT_FILE"
else
    log_success "All SUID files are in standard locations"
fi

rm -f "$SUID_FILES"
```

}

analyze_audit_logs() {
log_info “Analyzing audit logs for CVE-2023-0386 indicators…”

```
{
    echo "=== AUDIT LOG ANALYSIS ==="
    echo ""
} >> "$REPORT_FILE"

if ! command -v ausearch &> /dev/null; then
    log_warning "Auditd not available - skipping audit analysis"
    echo "Auditd not available for analysis" >> "$REPORT_FILE"
    return
fi

# Check for CVE-2023-0386 specific events
log_info "Searching for privilege escalation events..."
PRIVESC_EVENTS=$(ausearch -k cve_2023_0386_privilege_escalation -ts this-week 2>/dev/null || true)

if [[ -n "$PRIVESC_EVENTS" ]]; then
    log_critical "Privilege escalation events found!"
    {
        echo "PRIVILEGE ESCALATION EVENTS:"
        echo "$PRIVESC_EVENTS"
        echo ""
    } >> "$REPORT_FILE"
else
    log_success "No privilege escalation events found"
    echo "No privilege escalation events found" >> "$REPORT_FILE"
fi

# Check for OverlayFS mount events
log_info "Searching for OverlayFS mount events..."
OVERLAY_EVENTS=$(ausearch -k cve_2023_0386_overlay_mount -ts this-week 2>/dev/null || true)

if [[ -n "$OVERLAY_EVENTS" ]]; then
    log_warning "OverlayFS mount events detected"
    {
        echo "OVERLAYFS MOUNT EVENTS:"
        echo "$OVERLAY_EVENTS"
        echo ""
    } >> "$REPORT_FILE"
else
    log_success "No suspicious OverlayFS mount events"
fi

# Check for FUSE mount events
log_info "Searching for FUSE mount events..."
FUSE_EVENTS=$(ausearch -k cve_2023_0386_fuse_mount -ts this-week 2>/dev/null || true)

if [[ -n "$FUSE_EVENTS" ]]; then
    log_warning "FUSE mount events detected"
    {
        echo "FUSE MOUNT EVENTS:"
        echo "$FUSE_EVENTS"
        echo ""
    } >> "$REPORT_FILE"
else
    log_success "No suspicious FUSE mount events"
fi

# Check for setuid/setgid calls
log_info "Analyzing setuid/setgid system calls..."
SETUID_EVENTS=$(ausearch -k cve_2023_0386_setuid -ts this-week 2>/dev/null | grep -v "su\|sudo\|login" || true)

if [[ -n "$SETUID_EVENTS" ]]; then
    log_warning "Suspicious setuid events found"
    {
        echo "SUSPICIOUS SETUID EVENTS:"
        echo "$SETUID_EVENTS"
        echo ""
    } >> "$REPORT_FILE"
else
    log_success "No suspicious setuid events"
fi
```

}

analyze_system_logs() {
log_info “Analyzing system logs for exploitation indicators…”

```
{
    echo "=== SYSTEM LOG ANALYSIS ==="
    echo ""
} >> "$REPORT_FILE"

# Check for OverlayFS activity in system logs
log_info "Checking system logs for OverlayFS activity..."
OVERLAY_LOGS=$(grep -i "overlay" /var/log/syslog /var/log/kern.log 2>/dev/null | tail -20 || true)

if [[ -n "$OVERLAY_LOGS" ]]; then
    log_info "OverlayFS activity found in system logs"
    {
        echo "OVERLAYFS SYSTEM LOG ENTRIES:"
        echo "$OVERLAY_LOGS"
        echo ""
    } >> "$REPORT_FILE"
else
    log_success "No OverlayFS activity in system logs"
fi

# Check for FUSE activity
log_info "Checking system logs for FUSE activity..."
FUSE_LOGS=$(grep -i "fuse" /var/log/syslog /var/log/kern.log 2>/dev/null | tail -20 || true)

if [[ -n "$FUSE_LOGS" ]]; then
    log_info "FUSE activity found in system logs"
    {
        echo "FUSE SYSTEM LOG ENTRIES:"
        echo "$FUSE_LOGS"
        echo ""
    } >> "$REPORT_FILE"
else
    log_success "No FUSE activity in system logs"
fi

# Check for authentication anomalies
log_info "Checking for authentication anomalies..."
AUTH_ANOMALIES=$(grep -E "(su:|sudo:)" /var/log/auth.log 2>/dev/null | grep -E "(FAILED|invalid|unknown)" | tail -10 || true)

if [[ -n "$AUTH_ANOMALIES" ]]; then
    log_warning "Authentication anomalies detected"
    {
        echo "AUTHENTICATION ANOMALIES:"
        echo "$AUTH_ANOMALIES"
        echo ""
    } >> "$REPORT_FILE"
else
    log_success "No authentication anomalies"
fi
```

}

analyze_process_information() {
log_info “Analyzing running processes for anomalies…”

```
{
    echo "=== PROCESS ANALYSIS ==="
    echo ""
} >> "$REPORT_FILE"

# Check for processes with mismatched UID/EUID
log_info "Checking for privilege escalation artifacts in running processes..."
PRIV_PROCESSES=$(ps axo pid,ppid,uid,euid,cmd | awk '$3 != $4 && $4 == 0 {print}' || true)

if [[ -n "$PRIV_PROCESSES" ]]; then
    log_critical "Processes with privilege escalation detected!"
    {
        echo "PROCESSES WITH MISMATCHED UID/EUID (potential privilege escalation):"
        echo "PID PPID UID EUID COMMAND"
        echo "$PRIV_PROCESSES"
        echo ""
    } >> "$REPORT_FILE"
else
    log_success "No privilege escalation artifacts in running processes"
fi

# Check for suspicious process names
log_info "Checking for suspicious process names..."
SUSPICIOUS_PROCESSES=$(ps aux | grep -iE "(exploit|overlay|fuse|cve)" | grep -v grep || true)

if [[ -n "$SUSPICIOUS_PROCESSES" ]]; then
    log_warning "Suspicious process names detected"
    {
        echo "SUSPICIOUS PROCESSES:"
        echo "$SUSPICIOUS_PROCESSES"
        echo ""
    } >> "$REPORT_FILE"
else
    log_success "No suspicious process names detected"
fi

# Check current mounts
log_info "Analyzing current filesystem mounts..."
{
    echo "CURRENT FILESYSTEM MOUNTS:"
    mount
    echo ""
    
    echo "OVERLAY MOUNTS:"
    mount | grep overlay || echo "None"
    echo ""
    
    echo "FUSE MOUNTS:"
    mount | grep fuse || echo "None"
    echo ""
} >> "$REPORT_FILE"
```

}

analyze_file_integrity() {
log_info “Performing file integrity analysis…”

```
{
    echo "=== FILE INTEGRITY ANALYSIS ==="
    echo ""
} >> "$REPORT_FILE"

# Check for files in temporary directories
log_info "Analyzing temporary directories..."

# Check /tmp
TMP_SUSPICIOUS=$(find /tmp -type f -executable -o -type f -perm -u=s 2>/dev/null || true)
if [[ -n "$TMP_SUSPICIOUS" ]]; then
    log_warning "Suspicious files found in /tmp"
    {
        echo "SUSPICIOUS FILES IN /tmp:"
        while IFS= read -r file; do
            if [[ -f "$file" ]]; then
                ls -la "$file"
                file "$file"
                echo "---"
            fi
        done <<< "$TMP_SUSPICIOUS"
        echo ""
    } >> "$REPORT_FILE"
else
    log_success "No suspicious files in /tmp"
fi

# Check for CVE-2023-0386 specific artifacts
log_info "Searching for CVE-2023-0386 specific artifacts..."
CVE_ARTIFACTS=$(find / -name "*cve*2023*0386*" -o -name "*overlay*exploit*" -o -name "*fuse*exploit*" 2>/dev/null | head -20 || true)

if [[ -n "$CVE_ARTIFACTS" ]]; then
    log_critical "CVE-2023-0386 exploitation artifacts found!"
    {
        echo "CVE-2023-0386 ARTIFACTS:"
        while IFS= read -r artifact; do
            if [[ -e "$artifact" ]]; then
                ls -la "$artifact"
                if [[ -f "$artifact" ]]; then
                    file "$artifact"
                fi
                echo "---"
            fi
        done <<< "$CVE_ARTIFACTS"
        echo ""
    } >> "$REPORT_FILE"
else
    log_success "No CVE-2023-0386 specific artifacts found"
fi
```

}

analyze_network_connections() {
log_info “Analyzing network connections…”

```
{
    echo "=== NETWORK ANALYSIS ==="
    echo ""
    echo "CURRENT NETWORK CONNECTIONS:"
    netstat -tulpn 2>/dev/null || ss -tulpn
    echo ""
    
    echo "RECENT NETWORK ACTIVITY (if available):"
    if [[ -f /var/log/auth.log ]]; then
        grep -E "(ssh|ftp|telnet)" /var/log/auth.log | tail -10 || echo "No recent network authentication activity"
    fi
    echo ""
} >> "$REPORT_FILE"

log_success "Network analysis completed"
```

}

check_kernel_status() {
log_info “Checking kernel version and patch status…”

```
{
    echo "=== KERNEL STATUS ==="
    echo ""
    echo "Current Kernel: $(uname -r)"
    echo "Kernel Build Date: $(uname -v)"
    echo ""
} >> "$REPORT_FILE"

# Check if kernel is vulnerable
KERNEL_VERSION=$(uname -r)
MAJOR_VERSION=$(echo "$KERNEL_VERSION" | cut -d. -f1)
MINOR_VERSION=$(echo "$KERNEL_VERSION" | cut -d. -f2)

if [[ $MAJOR_VERSION -lt 6 ]] || [[ $MAJOR_VERSION -eq 6 && $MINOR_VERSION -lt 2 ]]; then
    log_critical "Kernel version is vulnerable to CVE-2023-0386!"
    echo "VULNERABILITY STATUS: VULNERABLE - Kernel version is susceptible to CVE-2023-0386" >> "$REPORT_FILE"
else
    log_success "Kernel version includes CVE-2023-0386 fix"
    echo "VULNERABILITY STATUS: PATCHED - Kernel version includes CVE-2023-0386 fix" >> "$REPORT_FILE"
fi

# Check available kernel updates
log_info "Checking for available kernel updates..."
if command -v apt &> /dev/null; then
    KERNEL_UPDATES=$(apt list --upgradable 2>/dev/null | grep linux-image || true)
    if [[ -n "$KERNEL_UPDATES" ]]; then
        {
            echo ""
            echo "AVAILABLE KERNEL UPDATES:"
            echo "$KERNEL_UPDATES"
        } >> "$REPORT_FILE"
    fi
fi
```

}

generate_recommendations() {
log_info “Generating security recommendations…”

```
{
    echo ""
    echo "=== SECURITY RECOMMENDATIONS ==="
    echo ""
    echo "Based on the forensic analysis, the following actions are recommended:"
    echo ""
    echo "IMMEDIATE ACTIONS:"
    echo "- Update the kernel to the latest version with CVE-2023-0386 patch"
    echo "- Remove any suspicious SUID files identified"
    echo "- Review audit logs for any suspicious activity"
    echo "- Change passwords for potentially compromised accounts"
    echo ""
    echo "ONGOING SECURITY MEASURES:"
    echo "- Implement regular vulnerability scanning"
    echo "- Enable and monitor auditd for security events"
    echo "- Restrict user namespace creation if not required"
    echo "- Mount temporary directories with noexec,nosuid,nodev options"
    echo "- Implement file integrity monitoring"
    echo "- Regular security patching schedule"
    echo ""
    echo "MONITORING:"
    echo "- Monitor for new SUID files in writable directories"
    echo "- Watch for unusual OverlayFS and FUSE mount activity"
    echo "- Track privilege escalation attempts"
    echo "- Regular review of system logs"
    echo ""
} >> "$REPORT_FILE"
```

}

finalize_report() {
log_info “Finalizing forensics report…”

```
{
    echo ""
    echo "=== ANALYSIS SUMMARY ==="
    echo ""
    echo "Forensic analysis completed: $(date)"
    echo "Report generated by: $(whoami)"
    echo "Analysis duration: Comprehensive system scan"
    echo ""
    echo "For detailed findings, review the sections above."
    echo "This report should be preserved for incident response records."
    echo ""
    echo "=== END OF REPORT ==="
} >> "$REPORT_FILE"

# Set appropriate permissions
chmod 600 "$REPORT_FILE"

log_success "Forensics report completed: $REPORT_FILE"
```

}

main() {
banner

```
log_info "Starting CVE-2023-0386 forensic analysis..."
log_info "This may take several minutes to complete..."

setup_forensics_environment
check_system_info
check_kernel_status
analyze_suid_files
analyze_audit_logs
analyze_system_logs
analyze_process_information
analyze_file_integrity
analyze_network_connections
generate_recommendations
finalize_report

echo ""
log_success "=========================================="
log_success "Forensic analysis completed!"
log_success "=========================================="

echo ""
log_info "Report location: $REPORT_FILE"
log_info "Report size: $(du -h "$REPORT_FILE" | cut -f1)"

# Quick summary
echo ""
log_info "Quick Summary:"

if grep -q "CRITICAL" "$REPORT_FILE"; then
    log_critical "CRITICAL findings detected - immediate action required!"
elif grep -q "WARNING" "$REPORT_FILE"; then
    log_warning "Warning findings detected - review recommended"
else
    log_success "No critical security issues detected"
fi

echo ""
log_info "For detailed analysis, review the complete report:"
log_info "cat $REPORT_FILE"
```

}

# Check if running as root for better access to system files

if [[ $EUID -ne 0 ]]; then
log_warning “Running as non-root user - some analysis may be limited”
log_info “For complete analysis, consider running as root”
fi

main “$@”