#!/usr/bin/env python3
import requests
import sys
import socket
import time
import ipaddress
import pymssql
import urllib3
from ftplib import FTP
from typing import List, Tuple, Optional
from colorama import init, Fore, Style

# Initialize colorama for cross-platform colored output
init()

class MultiExploit:
    def __init__(self, target: str, verbose: bool = True):
        self.validate_ip(target)
        self.target = target
        self.verbose = verbose
        self.ports = {
            'ftp': [21, 2121],
            'smb': 445,
            'mssql': 1433,
            'rpc': 135,
            'winrm': 5985,
            'http': 8080
        }
        self.delay = 1
        self.mssql_creds = None
        self.exploitable_services = []

    def validate_ip(self, target: str):
        """
        Comprehensive IP/hostname validation with DNS resolution
        """
        try:
            # Try IP address validation first
            ipaddress.ip_address(target)
            return target
        except ValueError:
            # If not a valid IP, attempt DNS resolution
            try:
                resolved_ip = socket.gethostbyname(target)
                print(f"{Fore.GREEN}[+] Resolved {target} to {resolved_ip}{Style.RESET_ALL}")
                return resolved_ip
            except socket.gaierror:
                print(f"{Fore.RED}[!] Cannot resolve target: {target}{Style.RESET_ALL}")
                sys.exit(1)

    def log(self, message: str, level: str = 'info'):
        """
        Comprehensive logging with color and context
        """
        levels = {
            'info': (Fore.BLUE, '[*]'),
            'success': (Fore.GREEN, '[+]'),
            'warning': (Fore.YELLOW, '[-]'),
            'error': (Fore.RED, '[!]')
        }
        color, prefix = levels.get(level, (Fore.WHITE, '[*]'))
        
        if self.verbose:
            print(f"{color}{prefix} {message}{Style.RESET_ALL}")

    def test_ftp(self):
        """
        Comprehensive FTP service testing with detailed information
        """
        self.log("Testing FTP services...", 'info')
        for port in self.ports['ftp']:
            try:
                ftp = FTP()
                ftp.connect(self.target, port, timeout=5)
                banner = ftp.getwelcome()
                
                self.log(f"FTP Service on port {port}", 'success')
                self.log(f"FTP Banner: {banner}", 'info')
                
                # Attempt anonymous login with full details
                try:
                    ftp.login()
                    self.log(f"Anonymous login successful on port {port}", 'warning')
                    # Optionally list files if anonymous login works
                    files = ftp.nlst()
                    self.log(f"Available files: {files}", 'info')
                    self.exploitable_services.append(f'FTP-Anonymous-{port}')
                except Exception as e:
                    self.log(f"Anonymous login failed: {e}", 'info')
                
                ftp.quit()
            except Exception as e:
                self.log(f"FTP test failed on port {port}: {e}", 'warning')
            time.sleep(self.delay)

    def test_mssql(self):
        """
        Advanced MSSQL testing with multiple credential attempts and information extraction
        """
        self.log("Testing MSSQL...", 'info')
        
        # More comprehensive credential list
        auth_attempts = [
            ('sa', 'sa'),      # Classic default
            ('sa', ''),         # Empty password
            ('sa', 'password'),
            ('sa', 'Password1'),
            ('admin', 'admin'),
            ('administrator', '')
        ]

        for username, password in auth_attempts:
            try:
                self.log(f"Attempting SQL Auth: {username}/{password}", 'info')
                conn = pymssql.connect(
                    server=self.target,
                    port=self.ports['mssql'],
                    user=username,
                    password=password,
                    login_timeout=5
                )
                
                # Detailed SQL server information
                cursor = conn.cursor()
                cursor.execute("SELECT @@version")
                version = cursor.fetchone()[0]
                
                self.log(f"Authentication Successful: {username}", 'success')
                self.log(f"SQL Server Version: {version}", 'info')
                
                self.mssql_creds = (username, password)
                self.exploitable_services.append('MSSQL')
                
                conn.close()
                break
            except Exception as e:
                self.log(f"Authentication failed: {e}", 'warning')
            time.sleep(self.delay)

    def run(self):
        """
        Comprehensive multi-service vulnerability scanning
        """
        self.log(f"Starting multi-service scan on {self.target}", 'info')
        
        # Ordered service checks for systematic exploration
        checks = [
            self.test_mssql,
            self.test_ftp
        ]
        
        for check in checks:
            try:
                check()
            except Exception as e:
                self.log(f"Check failed: {e}", 'error')
        
        # Final report of potentially exploitable services
        if self.exploitable_services:
            self.log("Potentially Exploitable Services:", 'warning')
            for service in self.exploitable_services:
                self.log(f" - {service}", 'warning')
        else:
            self.log("No immediately exploitable services detected", 'info')

def main():
    # Robust argument handling
    if len(sys.argv) < 2:
        print(f"{Fore.RED}Usage: {sys.argv[0]} <target_ip_or_hostname> [--quiet]{Style.RESET_ALL}")
        print("Example: {} 192.168.1.100".format(sys.argv[0]))
        sys.exit(1)

    # Optional quiet mode
    verbose = '--quiet' not in sys.argv

    try:
        # Remove any command-line flags for IP parsing
        target = [arg for arg in sys.argv[1:] if not arg.startswith('--')][0]
        
        exploit = MultiExploit(target, verbose)
        exploit.run()
    except KeyboardInterrupt:
        print(f"\n{Fore.YELLOW}[!] Scan interrupted by user{Style.RESET_ALL}")
        sys.exit(0)
    except Exception as e:
        print(f"{Fore.RED}[!] Unexpected error: {e}{Style.RESET_ALL}")
        sys.exit(1)

if __name__ == "__main__":
    main()
