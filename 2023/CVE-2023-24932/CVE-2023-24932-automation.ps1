<#
.SYNOPSIS
    Komplettes Orchestrator-Skript für Secure-Boot-Mitigations
    (CVE-2023-24932), mit folgender Schrittfolge:
      * Step0 & Step1:  DB-Update (0x40)  -> 2 Reboots
      * Step2 & Step3:  Boot-Manager (0x100) -> 2 Reboots
      * Step4:          Manuelle Prüfung (kein Reboot)
      * Step5 & Step6:  DBX-Update (0x80) -> 2 Reboots
      * Step7 & Step8:  SVN (0x200)       -> 2 Reboots
      * Step999:        Final

.DESCRIPTION
    Nach jedem Schritt werden RunOnce & OrchestratorStep gesetzt, sodass das Skript
    beim folgenden Boot (ob automatisch oder manuell) im richtigen Schritt weitermacht.
    Falls der Nutzer "Nein" wählt bei Prompt-Reboot, kann er selbst rebooten;
    das Skript startet dann nach dem Login wieder und setzt die Ausführung fort.
#>

# -------------------[ 0) Variablen & Funktionen ]------------------------
$regPath  = "HKLM:\Software\SecureBootUpdate"
$regName  = "OrchestratorStep"
$scriptMe = $PSCommandPath
$tempFile = "C:\bootmgfw_2023.efi"

function Get-OrchestratorStep {
    try {
        return (Get-ItemPropertyValue -Path $regPath -Name $regName -ErrorAction Stop)
    }
    catch {
        return 0
    }
}

function Set-OrchestratorStep([int]$value) {
    New-Item -Path $regPath -ErrorAction SilentlyContinue | Out-Null
    Set-ItemProperty -Path $regPath -Name $regName -Value $value -Force
}

function Register-SelfInRunOnce([string]$ScriptPath) {
    $cmd = "powershell.exe -ExecutionPolicy Bypass -File `"$ScriptPath`""
    New-ItemProperty -Path "HKLM:\Software\Microsoft\Windows\CurrentVersion\RunOnce" `
        -Name "SecureBootUpdateOrchestrator" -Value $cmd -PropertyType String -Force | Out-Null
    Write-Host "[Info] Script in Runonce: $cmd"
}

function Prompt-Reboot($msg="Neustart jetzt durchführen (Ja/Nein)?") {
    Write-Host "" -ForegroundColor Red
    Write-Host $msg -ForegroundColor Red
    $r = Read-Host
    if ($r -in @("Ja","ja","J","j","Yes","yes","Y","y")) {
        Restart-Computer -Force
        return
    }
    else {
        Write-Host "Ok, reboot manually." -ForegroundColor Yellow
        return
    }
}

function Wait-ForEnter($msg="Press Enter to continue...") {
    Write-Host $msg
    Read-Host
}
# Revert Functions need a check not OK
function Goto-RevertStep2 {
    Write-Host "`nJump to STEP2, get Boot-Manager-Update (0x100) again." -ForegroundColor Yellow
    Set-OrchestratorStep 2
    Register-SelfInRunOnce -ScriptPath $scriptMe
    Wait-ForEnter "Press Enter to Exit Script and run again at Step 2."
    return
}
function Goto-RevertStep5 {
    Write-Host "`nJump back to Step2, Boot-Manager-Update (0x100) again." -ForegroundColor Yellow
    Set-OrchestratorStep 5
    Register-SelfInRunOnce -ScriptPath $scriptMe
    Wait-ForEnter "Press Enter to Exit Script and run again at Step 2."
    return
}

# -------------------[ Admin-Check ]-----------------------
if (-Not (New-Object Security.Principal.WindowsPrincipal(
            [Security.Principal.WindowsIdentity]::GetCurrent()
         )).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)) {
    Write-Host "Error: Run Script with Admin!" -ForegroundColor Red
    Wait-ForEnter "Enter and Exit..."
    return
}

# ==== [Critical Hardware Checks - Active] ====

$osVersion = (Get-CimInstance -ClassName Win32_OperatingSystem).Caption
if ($osVersion -match "2012" -and (Get-Tpm).SpecVersion -match "2.0") {
    Write-Host "ERROR: TPM 2.0 and Server 2012/R2 not supported!" -ForegroundColor Red
    Wait-ForEnter
    Exit 1
}
#############################################################################################
#############################################################################################
# -------------------[ Orchestrator-Start ]----------------
$step = Get-OrchestratorStep
Write-Host "`n[Orchestrator] Current Step = $step"

switch ($step) {

# ===================================================================
# =============  STEP 0 & STEP 1  =>  DB-Update (0x40)  =============
# ===================================================================
    0 {
        Write-Host "`n[STEP0] DB-Update (0x40): BitLocker-Check + Win-Update-Check" -ForegroundColor Cyan

        # 1) BitLocker-Check
        $systemDrive = $env:SystemDrive
        if (Get-Command manage-bde.exe -ErrorAction SilentlyContinue) {
            try {
                $bitlockerStatus = (manage-bde.exe -status $systemDrive 2>$null | Out-String)
                if ($bitlockerStatus -match "Protection Status:\s+Protection On") {
                    Write-Host "Warning: BitLocker active! Backup Recovery Keys." -ForegroundColor Yellow
                    $resp = Read-Host "Continue (Yes/No)?"
                    if ($resp -notin @("J","j","Ja","ja","Yes","yes","Y","y")) {
                        Write-Host "Interrupt."
                        return
                    }
                }
            }
            catch {
                Write-Host "Error manage-bde.exe, ignore BitLocker-Check." -ForegroundColor Red
            }
        }
###################################################################################################################################################################
        # 2) Windows-Update >= 9. Juli 2024
        Write-Host "`nCheck if Windows-Update >= July 2024 is installed..."
        try {
            $updates = Get-HotFix -ErrorAction SilentlyContinue
            if ($updates) {
                $dateCheck = [datetime]"07/09/2024"
                $latest = $updates | Where-Object { $_.InstalledOn -ge $dateCheck } |
                          Sort-Object InstalledOn -Descending | Select-Object -First 1
                if ($latest) {
                    Write-Host "OK:  Update >=  July 2024 found: $($latest.HotFixID) at $($latest.InstalledOn.ToShortDateString())." -ForegroundColor Green
                }
                else {
                    Write-Host "No Update >= 9July 2024 found!" -ForegroundColor Yellow
                    $resp = Read-Host "Are you sure you want to install the update manually? (y/n)"
                    if ($resp -notin @("J","j","Ja","ja","Yes","yes","Y","y")) {
                        Write-Host "Abbruch."
                        return
                    }
                }
            }
            else {
                Write-Host "No Updates found or Error reading Information." -ForegroundColor Yellow
                $resp = Read-Host "Continue (y/n)?"
                if ($resp -notin @("J","j","Ja","ja","Yes","yes","Y","y")) {
                    return
                }
            }
        }
        catch {
            Write-Host "Error reading HotFix: $($_.Exception.Message)" -ForegroundColor Red
            Write-Host "Continue , but you should know that an Update >= 9.7.2024 is needed."
        }
###################################################################################################################################################################
        # 3) DB-Update (0x40)
        Write-Host "`n Registry Entry DB-Update (0x40)..."
        try {
            New-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\SecureBoot" `
                             -Name "AvailableUpdates" -PropertyType "DWORD" -Value 0x40 -Force | Out-Null
            Write-Host "DB-Update (0x40) done." -ForegroundColor Green
        }
        catch {
            Write-Host "Error setting 0x40: $($_.Exception.Message)" -ForegroundColor Red
            return
        }

        # Marker Step1Done=1
        try {
            New-Item -Path $regPath -ErrorAction SilentlyContinue | Out-Null
            Set-ItemProperty -Path $regPath -Name "Step1Done" -Value 1 -Force
            Write-Host "Marker 'Step1Done' = 1." -ForegroundColor Green
        }
        catch {
            Write-Host "Warning: Cant set Step1Done: $($_.Exception.Message)" -ForegroundColor Yellow
        }

        Write-Host "`nREBOOT TWO TIMES!"
        Set-OrchestratorStep 1
        Register-SelfInRunOnce -ScriptPath $scriptMe
        Prompt-Reboot "FIRST Reboot for DB-Update (y/n)?"
        return
    }
###################################################################################################################################################################
    1 {
        Write-Host "`n[STEP1] DB-Update: Second Reboot..." -ForegroundColor Cyan
        Set-OrchestratorStep 2
        Register-SelfInRunOnce -ScriptPath $scriptMe
        Prompt-Reboot "SECOND REBOOT DB-Update (y/n)?"
        return
    }

# ===================================================================
# =============  STEP 2 & STEP 3  =>  Boot-Manager (0x100)  =========
# ===================================================================
    2 {
        Write-Host "`n[STEP2] Boot-Manager-Update (0x100)..." -ForegroundColor Cyan

        # Prüfen, ob Step1Done=1
        try {
            $s1 = Get-ItemPropertyValue -Path $regPath -Name "Step1Done" -ErrorAction Stop
            if ($s1 -ne 1) {
                Write-Host "Error: Step1Done != 1."
                return
            }
        }
        catch {
            Write-Host "Error:  Step1Done not readable in Regkey."
            return
        }

        # Prüfen, ob 'Windows UEFI CA 2023' in DB
        try {
            $dbBytes  = (Get-SecureBootUEFI -Name db -ErrorAction Stop).Bytes
            $dbString = [System.Text.Encoding]::ASCII.GetString($dbBytes)
            if ($dbString -match 'Windows UEFI CA 2023') {
                Write-Host "OK: 'Windows UEFI CA 2023' found in DB." -ForegroundColor Green
            }
            else {
                Write-Host "ERROR: 'Windows UEFI CA 2023' not in DB." -ForegroundColor Red
                Write-Host "Install latest Windows Updates and run Script again. Reset to 0." -ForegroundColor Yellow
                Set-OrchestratorStep 0
                return
            }
        }
        catch {
            Write-Host "Fehler beim Auslesen DB: $($_.Exception.Message)" -ForegroundColor Red
            return
        }
###################################################################################################################################################################
        # Boot-Manager (0x100)
        Write-Host "`nSetting Registry-Eintrag for Boot-Manager (0x100)..."
        try {
            New-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\SecureBoot" `
                             -Name "AvailableUpdates" -PropertyType "DWORD" -Value 0x100 -Force | Out-Null
            Write-Host "Boot-Manager (0x100) done." -ForegroundColor Green
        }
        catch {
            Write-Host "Error setting 0x100: $($_.Exception.Message)" -ForegroundColor Red
            return
        }

        try {
            Set-ItemProperty -Path $regPath -Name "Step2Done" -Value 1 -Force
            Write-Host "Marker 'Step2Done' = 1." -ForegroundColor Green
        }
        catch {
            Write-Host "Warning: Cannot set Marker Step2Done : $($_.Exception.Message)" -ForegroundColor Yellow
        }

            Write-Host "`nTWO REBOOTS pending"
            Set-OrchestratorStep 3
            Register-SelfInRunOnce -ScriptPath $scriptMe
            Prompt-Reboot "Start **FIRST** REBOOT for Boot-Manager-Update (y/n)?"
            return
        }
    
###################################################################################################################################################################
    3 {
        Write-Host "`n[STEP3] Boot-Manager-Update: SECOND Reboot..." -ForegroundColor Cyan
        # ==== Event-Log Check mit Retries ====
        $maxRetries = 10
        $retryInterval = 30 # Sekunden
        $eventFound = $false
###################################################################################################################################################################
        # # Event Viewer öffnen zur manuellen Überwachung
        # Write-Host "`nÖffne Event Viewer zur manuellen Überprüfung (Windows-Protokolle > System)..." -ForegroundColor Cyan
        Start-Process "eventvwr.msc"

        Write-Host "`nWaiting for Event ID 1799 (Boot-Manager-Update)..." -ForegroundColor Yellow
        Write-Host "This can take about $($maxRetries*$retryInterval/60) Minutes.`n"

        for ($i=1; $i -le $maxRetries; $i++) {
            Write-Host "Try $i/$maxRetries - Check Eventlog..." -ForegroundColor Gray
            
            $event1799 = Get-WinEvent -FilterHashtable @{LogName='System'; ID=1799} -MaxEvents 1 -ErrorAction SilentlyContinue
            
            if ($event1799) {
                Write-Host " Event found" -ForegroundColor Green
                $event1799
                $eventFound = $true
                Set-OrchestratorStep 4
                Register-SelfInRunOnce -ScriptPath $scriptMe
                Prompt-Reboot "Start **SECOND** Reboot for Boot-Manager-Update (y/n)?"
                return
            }
            
            if ($i -lt $maxRetries) {
                Write-Host " not found. Waiting $retryInterval Seconds..." -ForegroundColor DarkYellow
                Start-Sleep -Seconds $retryInterval
            }
        }

        if (-not $eventFound) {
            Write-Host "`nError: Event after $maxRetries tries not found!" -ForegroundColor Red
            Write-Host "Possible Issues:" -ForegroundColor Yellow
            Write-Host "- UEFI-Firmware not supported Update"
            Write-Host "- System needs anohter Reboot"
            Write-Host "- Timeout Eventlog - Please troubleshoot or conact me at Github Helleflo1312"
            
            Goto-RevertStep2
            return 2 # Exit-Code für Batch-Verarbeitung
        }
    
    }
###################################################################################################################################################################
# ===================================================================
# =============  STEP 4 => Manuelle Prüfung (kein Reboot)  =========
# ===================================================================
###################################################################################################################################################################

4 {
    Write-Host "`n[STEP4] Copy Boot-Manager (manual Check is optional) and check DB for 'Windows UEFI CA 2023'..." -ForegroundColor Cyan

    # EFI-Partition mounten
    try {
        mountvol S: /S | Out-Null
        Write-Host "EFI-Partition mounted S: (hidden)." -ForegroundColor Green
    }
    catch {
        Write-Host "ERR mounting S:: $($_.Exception.Message)" -ForegroundColor Red
        return
    }
###################################################################################################################################################################
    # Kopieren
    $tempFile = "C:\bootmgfw_2023.efi"
    try {
        Copy-Item "S:\EFI\Microsoft\Boot\bootmgfw.efi" $tempFile -Force
        if (-Not (Test-Path $tempFile)) {
            Write-Host "ERROR: $tempFile not found." -ForegroundColor Red
            return
        }
        Write-Host "Boot Manager copied to $tempFile." -ForegroundColor Green
    }
    catch {
        Write-Host "Error Copy: $($_.Exception.Message)" -ForegroundColor Red
        return
    }
###################################################################################################################################################################
    # Optionaler GUI-Hinweis
    Write-Host "`n(Optional) Check the Cert Chain manually in Explorer. Properties -> Digital Signatures -> 'Windows UEFI CA 2023'" -ForegroundColor Yellow
    Start-Process explorer.exe -ArgumentList "/select,$tempFile"
    # Wait-ForEnter "Drücke Enter, sobald du das Fenster schließen willst..."

    # Einfacher Check, ob 'Windows UEFI CA 2023' in DB hinterlegt ist
    Write-Host "`nAutomatic Check: check if DB has value 'Windows UEFI CA 2023' ..."
    try {
        $dbBytes  = (Get-SecureBootUEFI -Name db -ErrorAction Stop).Bytes
        $dbString = [System.Text.Encoding]::ASCII.GetString($dbBytes)

        if ($dbString -match 'Windows UEFI CA 2023') {
            Write-Host "OK: DB has 'Windows UEFI CA 2023'." -ForegroundColor Green
        }
        else {
            Write-Host "ERROR: 'Windows UEFI CA 2023' not found in DB!" -ForegroundColor Red
            Goto-RevertStep2
            return
        }
    }
    catch {
        Write-Host "Error checking DB: $($_.Exception.Message)" -ForegroundColor Red
        Goto-RevertStep2
        return
    }
        <#
        try {
            Copy-Item $tempFile $networkRecoveryPath -Force
            Write-Host "Boot-Manager auf Netzwerkpfad gespeichert: $networkRecoveryPath" -ForegroundColor Green
        }
        catch {
            Write-Host "Fehler beim Kopieren auf Netzwerk: $($_.Exception.Message)" -ForegroundColor Yellow
        }
        #>
    # Marker Step3Done (optional)
    try {
        Set-ItemProperty -Path $regPath -Name "Step3Done" -Value 1 -Force
        Write-Host "Marker 'Step3Done' = 1." -ForegroundColor Green
    }
    catch {
        Write-Host "Warning: Cannot Marker 'Step3Done' : $($_.Exception.Message)" -ForegroundColor Yellow
    }

    Write-Host "`nDB-Entry ok. Setting OrchestratorStep=5 and jump to DBX-Update (Step5)."
    Set-OrchestratorStep 5
    Write-Host "`nRerun Script in another Process...Press Enter" -ForegroundColor Cyan
    Wait-ForEnter
    Start-Process PowerShell.exe -ArgumentList "-NoProfile -ExecutionPolicy Bypass -File `"$scriptMe`""
    exit  # Beendet das aktuelle Skript, das neue übernimmt
}
###################################################################################################################################################################

# ===================================================================
# =============  STEP 5 & STEP 6 => DBX (0x80)  ======================
# ===================================================================
  5   {
        Write-Host "`n[STEP5] DBX-Update (0x80): Windows Production PCA 2011" -ForegroundColor Cyan

        # Prüfe Step2Done=1
        try {
            $val = Get-ItemPropertyValue -Path $regPath -Name "Step2Done" -ErrorAction Stop
            if ($val -ne 1) {
                Write-Host "ERROR: Step2Done=1 missing! Boot-Manager war nicht aktualisiert?"
                return
            }
        }
        catch {
            Write-Host "ERROR: Cannot find Step2Done ."
            return
        }

        # Benutzerabfrage: DBX?
        $dbx = Read-Host "DBX-Update (0x80) start? (Irreversibel without Secure Boot Reset) (y/n)"
        if ($dbx -in @("Ja","ja","J","j","Yes","yes","Y","y")) {
            try {
                New-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\SecureBoot" `
                                 -Name "AvailableUpdates" -PropertyType "DWORD" -Value 0x80 -Force | Out-Null
                Write-Host "DBX (0x80). Old Boot-Manager singing with 'Windows Production PCA 2011' will be blocked." -ForegroundColor Green
            }
            catch {
                Write-Host "Error setting Regkey 0x80: $($_.Exception.Message)" -ForegroundColor Red
            }
        }
        else {
            Write-Host "DBX-Update not done." -ForegroundColor Yellow
        }


        Write-Host "`nTwo Reboots to confirm DBX-Update!"
        Set-OrchestratorStep 6
        Register-SelfInRunOnce -ScriptPath $scriptMe
        Prompt-Reboot "FIRST REBOOT for DBX (y/n)?"
        return
    }

    6 {
        Write-Host "`n[STEP6] DBX-Update: SECOND Reboot..." -ForegroundColor Cyan
        Set-OrchestratorStep 7
        Register-SelfInRunOnce -ScriptPath $scriptMe
        Prompt-Reboot "Confirm Second reboot for DBX (y/n)?"
        return
    }

# ===================================================================
# =============  STEP 7 & STEP 8 => SVN (0x200)  =====================
# ===================================================================
     7 {
        # ==== Event-Log Check mit Retries ====
    $maxRetries = 10
    $retryInterval = 30 # Sekunden
    $eventFound = $false

    # Event Viewer öffnen zur manuellen Überwachung
    Write-Host "`nOpening Eventviewer if you want to check TPM Entires manually (System)..." -ForegroundColor Cyan
    Start-Process "eventvwr.msc"
        Write-Host "`n[STEP7] SVN-Update (0x200)..." -ForegroundColor Cyan
        Write-Host ""
        # nOpening Eventviewer if you want to check TPM Entires manually (System)..." -ForegroundColor Cyan
    Start-Process "eventvwr.msc"

    Write-Host "`nWaiting for Event ID 1037 (Boot-Manager-Update)..." -ForegroundColor Yellow
    Write-Host "This could take about $($maxRetries*$retryInterval/60) Minutes.`n"

    for ($i=1; $i -le $maxRetries; $i++) {
        Write-Host "Try $i/$maxRetries - Check for new Event..." -ForegroundColor Gray
        
        $event1037 = Get-WinEvent -FilterHashtable @{LogName='System'; ID=1037} -MaxEvents 1 -ErrorAction SilentlyContinue
        
        if ($event1037) {
            Write-Host " Event found" -ForegroundColor Green
            $event1037
            $eventFound = $true
        }
        
        if ($i -lt $maxRetries) {
            Write-Host " Not found. Waiting $retryInterval Seconds..." -ForegroundColor DarkYellow
            Start-Sleep -Seconds $retryInterval
        }
    }

    if (-not $eventFound) {
        Write-Host "`n ERROR: Event after $maxRetries tries not found!" -ForegroundColor Red
        Write-Host "Mögliche Ursachen:" -ForegroundColor Yellow
        Write-Host "- UEFI-Firmware unterstützt Update nicht"
        Write-Host "- System benötigt zusätzliche Neustarts"
        Write-Host "- Zeitüberschreitung bei der Verarbeitung"
        
        Goto-RevertStep5
        return 5 # Exit-Code für Batch-Verarbeitung
    }

        $svn = Read-Host
        if ($svn -in @("Ja","ja","J","j","Yes","yes","Y","y")) {
            try {
                New-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\SecureBoot" `
                                 -Name "AvailableUpdates" -PropertyType "DWORD" -Value 0x200 -Force | Out-Null
                Write-Host "SVN (0x200) Regkey done. Please Reboot TWO times!" -ForegroundColor Green
            }
            catch {
                Write-Host "ERROR setting Regkey 0x200: $($_.Exception.Message)" -ForegroundColor Red
            }
        }
        else {
            Write-Host "Could not update SVN." -ForegroundColor Yellow
        }

        Write-Host "`nStarting TWO Reboots again to activate SVN!"
        Set-OrchestratorStep 8
        Register-SelfInRunOnce -ScriptPath $scriptMe
        Prompt-Reboot "Start **FIRST** REBOOT SVN (y/n)?"
        return
    }

    8 {
        Write-Host "`n[STEP8] SVN: SECOND Reboot..." -ForegroundColor Cyan
        Set-OrchestratorStep 999
        Register-SelfInRunOnce -ScriptPath $scriptMe
        Prompt-Reboot "Starting **SECOND** Reboot for SVN (y/n)?"
        return
    }

# ===================================================================
# =============  STEP 999 => Finale  ================================
# ===================================================================
999 {
    # ASCII-Header
    Write-Host "`n####################################################" -ForegroundColor Cyan
    Write-Host "             SECURE BOOT MITIGATION REPORT            " -ForegroundColor Cyan
    Write-Host "####################################################`n" -ForegroundColor Cyan


        # 1. Automatische Prüfung des DB und DBX-Eintrags
        try {
            $dbxCheck = [System.Text.Encoding]::ASCII.GetString((Get-SecureBootUEFI dbx).bytes) -match 'Microsoft Windows Production PCA 2011'
            Write-Host "[DBX Check] UEFI 2011 Cert blocked: " -NoNewline
            Write-Host $dbxCheck -ForegroundColor $(if ($dbxCheck) { "Green" } else { "Red" })
        }
        catch {
            Write-Host "[DBX Check] Fehler bei der Überprüfung: $_" -ForegroundColor Red
        }
        try {
            $dbCheck = [System.Text.Encoding]::ASCII.GetString((Get-SecureBootUEFI db).bytes) -match 'Windows UEFI CA 2023'
            Write-Host "[DB Check] UEFI 2023 Cert installed: " -NoNewline
            Write-Host $dbCheck -ForegroundColor $(if ($dbCheck) { "Green" } else { "Red" })
        }
        catch {
            Write-Host "[DB Check] Fehler bei der Überprüfung: $_" -ForegroundColor Red
        }
    # 2. Event-Log Ausgabe
    Write-Host "`n## Event Log Entries ##" -ForegroundColor DarkCyan
    $events = Get-WinEvent -FilterHashtable @{LogName='System'; ID=1036,1037,1799} -MaxEvents 3 -ErrorAction SilentlyContinue
    if ($events) {
        $events | Format-Table -Property @(
            @{Label="Time"; Expression={$_.TimeCreated.ToString("HH:mm:ss")}},
            @{Label="Event ID"; Expression={$_.Id}},
            @{Label="Message"; Expression={$_.Message -replace "`n"," " -replace "`r"," "}}
        ) -AutoSize | Out-String
    }
    else {
        Write-Host "No relevant Events found!" -ForegroundColor Yellow
    }


    # 3. Manuelle Prüfhinweise
    Write-Host "`n## Manual Check ######################" -ForegroundColor DarkCyan
    Write-Host @"
    Thats how you can check it by yourself:
    -) Event Viewer and look for this IDs:
       - 1036 (DB Update) (optional you can also check it with: [System.Text.Encoding]::ASCII.GetString((Get-SecureBootUEFI db).bytes) -match 'Windows UEFI CA 2023')
       - 1037 (DBX Update) [System.Text.Encoding]::ASCII.GetString((Get-SecureBootUEFI dbx).bytes) -match 'Microsoft Windows Production PCA 2011' 
       - 1799 (Boot Manager Update)
       
"@ -ForegroundColor Gray
Write-Host "ENTER to EXIT"
 Wait-ForEnter
    exit
}
}