import subprocess
import re
import argparse
import json
import os
import random
import threading
from colorama import init, Fore, Style
from termcolor import colored

init(autoreset=True)

AUTHOR = "Trix Cyrus"
COPYRIGHT = "Copyright Â© 2024 Trixsec Org"

def print_banner():
    print(colored(f"Made by {AUTHOR}", 'yellow'))
    print(colored(COPYRIGHT, 'yellow'))

def install_requirements():
    """Install required Python libraries."""
    subprocess.run(['pip', 'install', 'colorama', 'termcolor'], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

def get_remote_ssh_version(ip, port=22):
    """Retrieve the SSH version from the remote server."""
    try:
        result = subprocess.run(
            ['ssh', '-o', 'BatchMode=yes', '-o', 'ConnectTimeout=5', f'-p{port}', ip],
            stderr=subprocess.PIPE,
            stdout=subprocess.PIPE,
            text=True
        )

        version_pattern = r"OpenSSH_(\d+\.\d+)"
        ssh_version = re.search(version_pattern, result.stderr)

        if ssh_version:
            ssh_version = float(ssh_version.group(1))
            if ssh_version < 9.6:
                print(colored(f"{Style.BRIGHT}[Vulnerable] {ip} - ssh: {ssh_version}", "red"))
                return {"ip": ip, "ssh_version": ssh_version, "status": "Vulnerable"}
            else:
                print(colored(f"{Style.BRIGHT}[Safe] {ip} - ssh: {ssh_version}", "green"))
                return {"ip": ip, "ssh_version": ssh_version, "status": "Safe"}
        else:
            print(colored(f"{Style.BRIGHT}[Error] {ip} - Unable to retrieve SSH version.", "yellow"))
            return {"ip": ip, "error": "Failed to detect OpenSSH version."}
    except Exception as e:
        print(colored(f"{Style.BRIGHT}[Error] {ip} - {e}", "red"))
        return {"ip": ip, "error": str(e)}

def save_results(results):
    os.makedirs("output", exist_ok=True)
    file_name = f"output/{random.randint(100000, 999999)}.json"
    with open(file_name, "w") as f:
        json.dump(results, f, indent=4)
    print(colored(f"{Style.BRIGHT}Results saved in {file_name}", "blue"))

def process_ips(ips, threads, port):
    results = []
    lock = threading.Lock()

    def worker(ip):
        nonlocal results
        result = get_remote_ssh_version(ip, port)
        with lock:
            results.append(result)

    threads_list = []
    for ip in ips:
        while len(threads_list) >= threads:
            for t in threads_list:
                if not t.is_alive():
                    threads_list.remove(t)
        t = threading.Thread(target=worker, args=(ip,))
        t.start()
        threads_list.append(t)

    for t in threads_list:
        t.join()

    return results

def main():
    parser = argparse.ArgumentParser(description="Remote OpenSSH Vulnerability Scanner")
    parser.add_argument("--ip", type=str, required=True, help="Single IP or path to file containing IPs (one per line)")
    parser.add_argument("--port", type=int, default=22, help="SSH port (default: 22)")
    parser.add_argument("--threads", type=int, default=5, help="Number of threads for scanning (default: 5)")
    args = parser.parse_args()

    print_banner()
    install_requirements()

    if os.path.isfile(args.ip):
        with open(args.ip, "r") as f:
            ips = [line.strip() for line in f if line.strip()]
    else:
        ips = [args.ip]

    results = process_ips(ips, args.threads, args.port)
    save_results(results)

if __name__ == "__main__":
    main()
