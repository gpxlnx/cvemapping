import React, { useState, useEffect, useRef } from 'react';
import { Terminal, Network, FileText, Activity, Search, Download, Upload, Play, Pause, RotateCcw, Eye, EyeOff, Copy, Check } from 'lucide-react';

const ForensicPlatform = () => {
  const [activeModule, setActiveModule] = useState('threat-intel');
  const [terminalLines, setTerminalLines] = useState([]);
  const [currentCommand, setCurrentCommand] = useState('');
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [hexViewData, setHexViewData] = useState('');
  const [packetCapture, setPacketCapture] = useState([]);
  const [selectedPacket, setSelectedPacket] = useState(null);
  const [timelineEvents, setTimelineEvents] = useState([]);
  const [copySuccess, setCopySuccess] = useState(false);
  const terminalRef = useRef(null);

  // Simulated packet capture data
  const samplePackets = [
    {
      id: 1,
      timestamp: '2023-05-11 14:32:18.472',
      src: '192.168.1.100',
      dst: '203.0.113.50',
      protocol: 'ISAKMP',
      length: 156,
      info: 'Informational: Notify (NO_PROPOSAL_CHOSEN)',
      raw: '0000000000000000000000000000000001100500000000000000009c00000140000000010000012800000001000000203b7365642027732f5e2f4000000000003b20756e616d65202d61203e202f746d702f70776e65643b2023272f746d702f7364'
    },
    {
      id: 2,
      timestamp: '2023-05-11 14:32:19.001',
      src: '203.0.113.50',
      dst: '192.168.1.100',
      protocol: 'ISAKMP',
      length: 68,
      info: 'Informational: Response',
      raw: '0000000000000000000000000000000001100520000000000000004400000044'
    },
    {
      id: 3,
      timestamp: '2023-05-11 14:32:19.234',
      src: '192.168.1.100',
      dst: '203.0.113.50',
      protocol: 'HTTP',
      length: 89,
      info: 'GET /tmp/pwned HTTP/1.1',
      raw: '474554202f746d702f70776e656420485454502f312e310d0a486f73743a203230332e302e3131332e35300d0a0d0a'
    }
  ];

  // Forensic timeline events
  const forensicTimeline = [
    { time: '14:32:15.120', event: 'Initial port scan detected on UDP 500', severity: 'medium', source: 'Network IDS' },
    { time: '14:32:18.472', event: 'Malformed IKEv2 Notify packet received', severity: 'high', source: 'Packet Analysis' },
    { time: '14:32:18.478', event: 'DES-CBC decryption initiated on NotificationData', severity: 'info', source: 'Zyxel Firewall' },
    { time: '14:32:18.481', event: 'Format string vulnerability triggered in ssh_vsnprintf', severity: 'critical', source: 'Binary Analysis' },
    { time: '14:32:18.485', event: 'system() call executed with injected command', severity: 'critical', source: 'Process Monitor' },
    { time: '14:32:18.492', event: 'File /tmp/pwned created with root privileges', severity: 'critical', source: 'File System Monitor' },
    { time: '14:32:19.001', event: 'Response packet sent to attacker', severity: 'medium', source: 'Network Monitor' },
    { time: '14:32:19.234', event: 'HTTP request for created file detected', severity: 'high', source: 'Web Server Logs' }
  ];

  // Terminal command handlers
  const handleTerminalCommand = (cmd) => {
    const newLines = [...terminalLines, `jpark@forensics-lab:~# ${cmd}`];
    
    switch(cmd.toLowerCase()) {
      case 'analyze-packet':
        newLines.push('Analyzing IKEv2 packet structure...');
        newLines.push('Header: 48 bytes DES-CBC encrypted data');
        newLines.push('Payload: Unencrypted command injection detected');
        newLines.push('Command: ; uname -a > /tmp/pwned;');
        newLines.push('CRITICAL: Pre-authentication RCE confirmed');
        break;
      case 'extract-iocs':
        newLines.push('Extracting Indicators of Compromise...');
        newLines.push('Source IP: 192.168.1.100 (Attacker)');
        newLines.push('Target Port: 500/UDP (IKEv2)');
        newLines.push('Payload Pattern: NotificationData > 48 bytes');
        newLines.push('File Created: /tmp/pwned');
        newLines.push('Binary: /sbin/sshipsecpm (Vulnerable)');
        break;
      case 'show-exploit':
        newLines.push('CVE-2023-28771 Exploit Analysis:');
        newLines.push('1. Craft IKEv2 Notify packet (type 41)');
        newLines.push('2. Insert 48 bytes valid DES-CBC data');
        newLines.push('3. Append shell metacharacters for injection');
        newLines.push('4. Send to UDP 500 on target');
        newLines.push('5. Format string vulnerability triggered');
        newLines.push('6. Commands executed via system() as root');
        break;
      case 'mitre-mapping':
        newLines.push('MITRE ATT&CK Framework Mapping:');
        newLines.push('T1190: Exploit Public-Facing Application');
        newLines.push('T1059: Command and Scripting Interpreter');
        newLines.push('T1068: Exploitation for Privilege Escalation');
        newLines.push('T1055: Process Injection');
        break;
      case 'clear':
        setTerminalLines([]);
        return;
      case 'help':
        newLines.push('Available commands:');
        newLines.push('  analyze-packet  - Analyze captured IKEv2 packet');
        newLines.push('  extract-iocs    - Extract indicators of compromise');
        newLines.push('  show-exploit    - Display exploit methodology');
        newLines.push('  mitre-mapping   - Show MITRE ATT&CK mapping');
        newLines.push('  clear          - Clear terminal');
        break;
      default:
        newLines.push(`Command not found: ${cmd}`);
    }
    
    setTerminalLines(newLines);
  };

  // Hex viewer component
  const HexViewer = ({ data }) => {
    if (!data) return <div className="text-gray-400">No data selected</div>;
    
    const hexData = data.match(/.{1,2}/g) || [];
    const rows = [];
    
    for (let i = 0; i < hexData.length; i += 16) {
      const rowHex = hexData.slice(i, i + 16);
      const offset = i.toString(16).padStart(8, '0').toUpperCase();
      const ascii = rowHex.map(hex => {
        const char = String.fromCharCode(parseInt(hex, 16));
        return /[\x20-\x7E]/.test(char) ? char : '.';
      }).join('');
      
      rows.push({ offset, hex: rowHex, ascii });
    }
    
    return (
      <div className="font-mono text-xs bg-gray-900 p-4 rounded overflow-auto max-h-96">
        {rows.map((row, idx) => (
          <div key={idx} className="flex space-x-4 hover:bg-gray-800">
            <span className="text-blue-400 w-20">{row.offset}</span>
            <span className="text-green-400 flex-1">
              {row.hex.map((hex, hexIdx) => (
                <span key={hexIdx} className={`mr-1 ${hexIdx === 8 ? 'mr-3' : ''}`}>
                  {hex}
                </span>
              ))}
            </span>
            <span className="text-gray-300 w-16">{row.ascii}</span>
          </div>
        ))}
      </div>
    );
  };

  const copyToClipboard = (text) => {
    navigator.clipboard.writeText(text);
    setCopySuccess(true);
    setTimeout(() => setCopySuccess(false), 2000);
  };

  useEffect(() => {
    if (terminalRef.current) {
      terminalRef.current.scrollTop = terminalRef.current.scrollHeight;
    }
  }, [terminalLines]);

  const modules = [
    { id: 'threat-intel', name: 'Threat Intelligence', icon: Activity },
    { id: 'packet-analysis', name: 'Packet Analysis', icon: Network },
    { id: 'binary-forensics', name: 'Binary Forensics', icon: Search },
    { id: 'timeline', name: 'Timeline Analysis', icon: FileText },
    { id: 'terminal', name: 'Forensic Console', icon: Terminal }
  ];

  return (
    <div className="min-h-screen bg-gray-900 text-white">
      {/* Header */}
      <div className="bg-gray-800 border-b border-gray-700 px-6 py-4">
        <div className="flex items-center justify-between">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-4">
              <div className="bg-red-600 p-2 rounded">
                <Search size={20} />
              </div>
              <div>
                <h1 className="text-xl font-bold">FORENSIC ANALYSIS PLATFORM</h1>
                <p className="text-sm text-gray-400">CVE-2023-28771 Investigation Suite</p>
              </div>
            </div>
            <div className="text-right text-xs text-gray-500">
              <div className="font-mono">Developed by: Jin Park / Rasmus MÃ¸ller Pedersen</div>
              <div className="font-mono">Build: 2025.1.0-RELEASE</div>
            </div>
          </div>
          <div className="flex items-center space-x-4">
            <span className="text-xs bg-red-600 px-2 py-1 rounded">CRITICAL</span>
            <span className="text-xs bg-gray-600 px-2 py-1 rounded">CVSS 9.8</span>
            <span className="text-xs bg-orange-600 px-2 py-1 rounded">RCE</span>
          </div>
        </div>
      </div>

      <div className="flex h-screen">
        {/* Sidebar */}
        <div className="w-64 bg-gray-800 border-r border-gray-700">
          <div className="p-4">
            <h2 className="text-sm font-semibold text-gray-400 mb-4">ANALYSIS MODULES</h2>
            <nav className="space-y-1">
              {modules.map(module => {
                const Icon = module.icon;
                return (
                  <button
                    key={module.id}
                    onClick={() => setActiveModule(module.id)}
                    className={`w-full flex items-center space-x-3 px-3 py-2 rounded text-sm transition-colors ${
                      activeModule === module.id 
                        ? 'bg-blue-600 text-white' 
                        : 'text-gray-300 hover:bg-gray-700'
                    }`}
                  >
                    <Icon size={16} />
                    <span>{module.name}</span>
                  </button>
                );
              })}
            </nav>
          </div>
        </div>

        {/* Main Content */}
        <div className="flex-1 overflow-auto">
          {/* Threat Intelligence Module */}
          {activeModule === 'threat-intel' && (
            <div className="p-6 space-y-6">
              <div className="flex items-center justify-between">
                <h2 className="text-2xl font-bold">Threat Intelligence Assessment</h2>
                <div className="text-sm text-gray-400">Last Updated: 2023-05-11 15:42:33 UTC</div>
              </div>

              <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
                <div className="bg-gray-800 rounded-lg p-4">
                  <h3 className="font-semibold mb-3">Vulnerability Profile</h3>
                  <div className="space-y-2 text-sm">
                    <div className="flex justify-between">
                      <span>CVE ID:</span>
                      <span className="text-red-400">CVE-2023-28771</span>
                    </div>
                    <div className="flex justify-between">
                      <span>CVSS Score:</span>
                      <span className="text-red-400">9.8 (Critical)</span>
                    </div>
                    <div className="flex justify-between">
                      <span>Attack Vector:</span>
                      <span>Network (AV:N)</span>
                    </div>
                    <div className="flex justify-between">
                      <span>Authentication:</span>
                      <span className="text-red-400">None (AU:N)</span>
                    </div>
                    <div className="flex justify-between">
                      <span>Complexity:</span>
                      <span>Low (AC:L)</span>
                    </div>
                    <div className="flex justify-between">
                      <span>Impact:</span>
                      <span className="text-red-400">Complete (C:C/I:C/A:C)</span>
                    </div>
                  </div>
                </div>

                <div className="bg-gray-800 rounded-lg p-4">
                  <h3 className="font-semibold mb-3">Affected Systems</h3>
                  <div className="space-y-3 text-sm">
                    <div>
                      <div className="font-medium text-orange-400">ZyWALL/USG Series</div>
                      <div className="text-gray-400">Versions 4.60 - 4.73</div>
                    </div>
                    <div>
                      <div className="font-medium text-orange-400">VPN Series</div>
                      <div className="text-gray-400">Versions 4.60 - 5.35</div>
                    </div>
                    <div>
                      <div className="font-medium text-orange-400">USG FLEX Series</div>
                      <div className="text-gray-400">Versions 4.60 - 5.35</div>
                    </div>
                    <div>
                      <div className="font-medium text-orange-400">ATP Series</div>
                      <div className="text-gray-400">Versions 4.60 - 5.35</div>
                    </div>
                  </div>
                </div>

                <div className="bg-gray-800 rounded-lg p-4">
                  <h3 className="font-semibold mb-3">Threat Landscape</h3>
                  <div className="space-y-3 text-sm">
                    <div className="flex justify-between">
                      <span>Active Exploitation:</span>
                      <span className="text-red-400">Confirmed</span>
                    </div>
                    <div className="flex justify-between">
                      <span>Botnet Activity:</span>
                      <span className="text-red-400">Mirai Variant</span>
                    </div>
                    <div className="flex justify-between">
                      <span>Scanning IPs:</span>
                      <span className="text-orange-400">244 Detected</span>
                    </div>
                    <div className="flex justify-between">
                      <span>Attribution:</span>
                      <span className="text-yellow-400">Multiple Groups</span>
                    </div>
                    <div className="flex justify-between">
                      <span>First Seen:</span>
                      <span>2023-04-25</span>
                    </div>
                  </div>
                </div>
              </div>

              <div className="bg-gray-800 rounded-lg p-4">
                <h3 className="font-semibold mb-4">Technical Analysis Summary</h3>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div>
                    <h4 className="font-medium text-blue-400 mb-2">Attack Vector</h4>
                    <ul className="text-sm text-gray-300 space-y-1">
                      <li>â¢ Protocol: IKEv2 over UDP port 500</li>
                      <li>â¢ Payload Type: Notification (Type 41)</li>
                      <li>â¢ Encryption: DES-CBC (first 48 bytes only)</li>
                      <li>â¢ Vulnerability: Format string injection</li>
                      <li>â¢ Execution Path: ssh_vsnprintf â system()</li>
                    </ul>
                  </div>
                  <div>
                    <h4 className="font-medium text-red-400 mb-2">Impact Assessment</h4>
                    <ul className="text-sm text-gray-300 space-y-1">
                      <li>â¢ Pre-authentication remote code execution</li>
                      <li>â¢ Root privilege escalation</li>
                      <li>â¢ Complete system compromise</li>
                      <li>â¢ Network lateral movement capability</li>
                      <li>â¢ Critical infrastructure targeting potential</li>
                    </ul>
                  </div>
                </div>
              </div>

              <div className="bg-red-900/20 border border-red-500/30 rounded-lg p-4">
                <h3 className="font-semibold text-red-400 mb-2">Intelligence Alert: Danish Critical Infrastructure</h3>
                <p className="text-sm text-gray-300">
                  On May 11, 2023, coordinated attacks leveraging this vulnerability targeted 22 Danish energy companies 
                  simultaneously. Attribution analysis suggests involvement of Russian state-sponsored group Sandworm (APT28). 
                  Several companies were forced into island mode to prevent cascade failures across Denmark's power grid.
                </p>
              </div>
            </div>
          )}

          {/* Packet Analysis Module */}
          {activeModule === 'packet-analysis' && (
            <div className="p-6 space-y-6">
              <div className="flex items-center justify-between">
                <h2 className="text-2xl font-bold">Network Packet Analysis</h2>
                <div className="flex space-x-2">
                  <button className="px-3 py-1 bg-blue-600 rounded text-sm">Live Capture</button>
                  <button className="px-3 py-1 bg-gray-600 rounded text-sm">Import PCAP</button>
                </div>
              </div>

              <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <div className="bg-gray-800 rounded-lg p-4">
                  <h3 className="font-semibold mb-3">Captured Packets</h3>
                  <div className="space-y-2 max-h-64 overflow-y-auto">
                    {samplePackets.map(packet => (
                      <div
                        key={packet.id}
                        onClick={() => {
                          setSelectedPacket(packet);
                          setHexViewData(packet.raw);
                        }}
                        className={`p-2 rounded text-xs cursor-pointer transition-colors ${
                          selectedPacket?.id === packet.id ? 'bg-blue-600' : 'bg-gray-700 hover:bg-gray-600'
                        }`}
                      >
                        <div className="flex justify-between items-start">
                          <div>
                            <div className="font-mono">{packet.timestamp}</div>
                            <div className="text-gray-300">{packet.src} â {packet.dst}</div>
                          </div>
                          <div className="text-right">
                            <div className="text-orange-400">{packet.protocol}</div>
                            <div>{packet.length} bytes</div>
                          </div>
                        </div>
                        <div className="mt-1 text-gray-400">{packet.info}</div>
                      </div>
                    ))}
                  </div>
                </div>

                <div className="bg-gray-800 rounded-lg p-4">
                  <div className="flex items-center justify-between mb-3">
                    <h3 className="font-semibold">Packet Details</h3>
                    {selectedPacket && (
                      <button
                        onClick={() => copyToClipboard(selectedPacket.raw)}
                        className="flex items-center space-x-1 px-2 py-1 bg-gray-600 rounded text-xs"
                      >
                        {copySuccess ? <Check size={12} /> : <Copy size={12} />}
                        <span>{copySuccess ? 'Copied' : 'Copy Raw'}</span>
                      </button>
                    )}
                  </div>
                  {selectedPacket ? (
                    <div className="space-y-3 text-sm">
                      <div className="grid grid-cols-2 gap-4">
                        <div>
                          <div className="text-gray-400">Source:</div>
                          <div className="font-mono">{selectedPacket.src}</div>
                        </div>
                        <div>
                          <div className="text-gray-400">Destination:</div>
                          <div className="font-mono">{selectedPacket.dst}</div>
                        </div>
                        <div>
                          <div className="text-gray-400">Protocol:</div>
                          <div>{selectedPacket.protocol}</div>
                        </div>
                        <div>
                          <div className="text-gray-400">Length:</div>
                          <div>{selectedPacket.length} bytes</div>
                        </div>
                      </div>
                      <div>
                        <div className="text-gray-400">Info:</div>
                        <div>{selectedPacket.info}</div>
                      </div>
                      {selectedPacket.id === 1 && (
                        <div className="bg-red-900/30 border border-red-500/50 rounded p-2">
                          <div className="text-red-400 font-medium text-xs">MALICIOUS PAYLOAD DETECTED</div>
                          <div className="text-xs text-gray-300 mt-1">
                            NotificationData contains shell metacharacters indicating command injection attempt
                          </div>
                        </div>
                      )}
                    </div>
                  ) : (
                    <div className="text-gray-400 text-sm">Select a packet to view details</div>
                  )}
                </div>
              </div>

              <div className="bg-gray-800 rounded-lg p-4">
                <h3 className="font-semibold mb-3">Hex Dump Analysis</h3>
                <HexViewer data={hexViewData} />
                {hexViewData && selectedPacket?.id === 1 && (
                  <div className="mt-3 text-sm">
                    <div className="text-red-400 font-medium">Payload Analysis:</div>
                    <div className="bg-gray-900 p-2 rounded mt-2 font-mono text-xs">
                      <div className="text-blue-400">Offset 0x30-0x48: DES-CBC encrypted notification data (48 bytes)</div>
                      <div className="text-red-400">Offset 0x48+: Unencrypted command injection payload</div>
                      <div className="text-green-400">Decoded: "; uname -a > /tmp/pwned; #"</div>
                    </div>
                  </div>
                )}
              </div>
            </div>
          )}

          {/* Binary Forensics Module */}
          {activeModule === 'binary-forensics' && (
            <div className="p-6 space-y-6">
              <h2 className="text-2xl font-bold">Binary Analysis & Reverse Engineering</h2>

              <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <div className="bg-gray-800 rounded-lg p-4">
                  <h3 className="font-semibold mb-3">Target Binary Information</h3>
                  <div className="space-y-2 text-sm">
                    <div className="flex justify-between">
                      <span>Binary Path:</span>
                      <span className="font-mono text-orange-400">/sbin/sshipsecpm</span>
                    </div>
                    <div className="flex justify-between">
                      <span>Architecture:</span>
                      <span>MIPS32 (Big Endian)</span>
                    </div>
                    <div className="flex justify-between">
                      <span>Strip Status:</span>
                      <span className="text-red-400">Stripped</span>
                    </div>
                    <div className="flex justify-between">
                      <span>Protections:</span>
                      <span className="text-red-400">None (No ASLR, No Stack Canaries)</span>
                    </div>
                    <div className="flex justify-between">
                      <span>File Size:</span>
                      <span>847,392 bytes</span>
                    </div>
                  </div>
                </div>

                <div className="bg-gray-800 rounded-lg p-4">
                  <h3 className="font-semibold mb-3">Function Call Analysis</h3>
                  <div className="bg-gray-900 rounded p-3 font-mono text-xs">
                    <div className="text-green-400">Vulnerable Code Path:</div>
                    <div className="text-gray-300 mt-2">
                      ikev2_notify_handler()<br/>
                      âââ des_decrypt_notification_data()<br/>
                      âââ ssh_vsnprintf(unvalidated_payload)<br/>
                      âââ system(formatted_command)<br/>
                    </div>
                    <div className="text-red-400 mt-3">
                      Critical Issue: User data treated as format string
                    </div>
                  </div>
                </div>
              </div>

              <div className="bg-gray-800 rounded-lg p-4">
                <h3 className="font-semibold mb-3">Disassembly Analysis</h3>
                <div className="bg-gray-900 rounded p-4 font-mono text-xs overflow-x-auto">
                  <div className="text-blue-400">0x00428BC0: Vulnerable Function (ssh_vsnprintf wrapper)</div>
                  <div className="text-gray-300 mt-2">
                    <div>0x00428BC0    addiu   $sp, $sp, -0x20</div>
                    <div>0x00428BC4    sw      $ra, 0x1C($sp)</div>
                    <div>0x00428BC8    sw      $s0, 0x18($sp)</div>
                    <div className="text-red-400">0x00428BCC    move    $a1, $a0      # User data moved to format string param</div>
                    <div>0x00428BD0    la      $a0, log_buffer</div>
                    <div className="text-red-400">0x00428BD4    jal     ssh_vsnprintf  # Vulnerable call - no format validation</div>
                    <div>0x00428BD8    nop</div>
                    <div>0x00428BDC    la      $a0, log_buffer</div>
                    <div className="text-red-400">0x00428BE0    jal     system        # Executes formatted string as command</div>
                    <div>0x00428BE4    nop</div>
                  </div>
                </div>
              </div>

              <div className="bg-gray-800 rounded-lg p-4">
                <h3 className="font-semibold mb-3">Memory Layout Analysis</h3>
                <div className="grid grid-cols-2 gap-4 text-sm">
                  <div>
                    <h4 className="font-medium text-blue-400 mb-2">Stack Layout</h4>
                    <div className="bg-gray-900 rounded p-3 font-mono text-xs">
                      <div>High Addresses</div>
                      <div>âââ Return Address</div>
                      <div>âââ Saved Registers</div>
                      <div>âââ Local Variables</div>
                      <div className="text-red-400">âââ Log Buffer (512 bytes)</div>
                      <div className="text-red-400">âââ Format String Data</div>
                      <div>Low Addresses</div>
                    </div>
                  </div>
                  <div>
                    <h4 className="font-medium text-orange-400 mb-2">Exploit Constraints</h4>
                    <ul className="text-gray-300 space-y-1">
                      <li>â¢ No ASLR - Predictable addresses</li>
                      <li>â¢ No stack canaries - Direct overflow</li>
                      <li>â¢ Format string bug - Arbitrary write</li>
                      <li>â¢ system() call - Direct command exec</li>
                      <li>â¢ Root context - Full privilege</li>
                    </ul>
                  </div>
                </div>
              </div>

              <div className="bg-red-900/20 border border-red-500/30 rounded-lg p-4">
                <h3 className="font-semibold text-red-400 mb-2">Exploitation Analysis</h3>
                <p className="text-sm text-gray-300 mb-3">
                  The vulnerability exists in the IKEv2 notification handler where the first 48 bytes of NotificationData 
                  are decrypted using DES-CBC, but the entire unvalidated payload is passed to a logging function that 
                  treats it as a format string, leading to command injection via system() call.
                </p>
                <div className="bg-gray-900 rounded p-3 font-mono text-xs">
                  <div className="text-green-400">Payload Structure:</div>
                  <div className="text-gray-300 mt-1">
                    [48 bytes DES-CBC data][; malicious_command; # comment]<br/>
                    âââ Encrypted ââââââââââ Command Injection âââââââ
                  </div>
                </div>
              </div>
            </div>
          )}

          {/* Timeline Analysis Module */}
          {activeModule === 'timeline' && (
            <div className="p-6 space-y-6">
              <div className="flex items-center justify-between">
                <h2 className="text-2xl font-bold">Incident Timeline Reconstruction</h2>
                <div className="flex space-x-2">
                  <button className="px-3 py-1 bg-blue-600 rounded text-sm">Export Timeline</button>
                  <button className="px-3 py-1 bg-gray-600 rounded text-sm">Filter Events</button>
                </div>
              </div>

              <div className="bg-gray-800 rounded-lg p-4">
                <h3 className="font-semibold mb-4">Attack Sequence Analysis</h3>
                <div className="relative">
                  <div className="absolute left-8 top-0 bottom-0 w-px bg-blue-500"></div>
                  {forensicTimeline.map((event, idx) => (
                    <div key={idx} className="relative flex items-start space-x-4 pb-6">
                      <div className={`w-4 h-4 rounded-full border-2 ${
                        event.severity === 'critical' ? 'bg-red-600 border-red-600' :
                        event.severity === 'high' ? 'bg-orange-600 border-orange-600' :
                        event.severity === 'medium' ? 'bg-yellow-600 border-yellow-600' :
                        'bg-blue-600 border-blue-600'
                      } relative z-10`}></div>
                      <div className="flex-1 min-w-0">
                        <div className="flex items-center justify-between">
                          <div className="font-mono text-sm text-blue-400">{event.time}</div>
                          <div className="flex items-center space-x-2">
                            <span className={`px-2 py-1 rounded text-xs ${
                              event.severity === 'critical' ? 'bg-red-600' :
                              event.severity === 'high' ? 'bg-orange-600' :
                              event.severity === 'medium' ? 'bg-yellow-600' :
                              'bg-blue-600'
                            }`}>{event.severity.toUpperCase()}</span>
                            <span className="text-xs text-gray-400">{event.source}</span>
                          </div>
                        </div>
                        <div className="text-white mt-1">{event.event}</div>
                        {event.severity === 'critical' && (
                          <div className="text-sm text-red-400 mt-1">
                            â  Critical security event - immediate response required
                          </div>
                        )}
                      </div>
                    </div>
                  ))}
                </div>
              </div>

              <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <div className="bg-gray-800 rounded-lg p-4">
                  <h3 className="font-semibold mb-3">Attack Vector Timeline</h3>
                  <div className="space-y-3 text-sm">
                    <div className="bg-gray-900 rounded p-3">
                      <div className="font-medium text-orange-400">Phase 1: Reconnaissance</div>
                      <div className="text-gray-300 mt-1">Duration: 00:00:03.352</div>
                      <div className="text-gray-400 text-xs mt-1">
                        Attacker performed port scanning to identify IKEv2 services on UDP 500
                      </div>
                    </div>
                    <div className="bg-gray-900 rounded p-3">
                      <div className="font-medium text-red-400">Phase 2: Exploitation</div>
                      <div className="text-gray-300 mt-1">Duration: 00:00:00.020</div>
                      <div className="text-gray-400 text-xs mt-1">
                        Malformed IKEv2 packet sent, vulnerability triggered, command executed
                      </div>
                    </div>
                    <div className="bg-gray-900 rounded p-3">
                      <div className="font-medium text-yellow-400">Phase 3: Validation</div>
                      <div className="text-gray-300 mt-1">Duration: 00:00:00.752</div>
                      <div className="text-gray-400 text-xs mt-1">
                        HTTP request to verify successful command execution and file creation
                      </div>
                    </div>
                  </div>
                </div>

                <div className="bg-gray-800 rounded-lg p-4">
                  <h3 className="font-semibold mb-3">Indicators of Compromise (IOCs)</h3>
                  <div className="space-y-3 text-sm">
                    <div>
                      <div className="font-medium text-blue-400">Network IOCs</div>
                      <div className="bg-gray-900 rounded p-2 mt-1 font-mono text-xs">
                        <div>Source IP: 192.168.1.100</div>
                        <div>Destination Port: 500/UDP</div>
                        <div>Protocol: IKEv2 (Malformed)</div>
                        <div>Payload Size: >48 bytes</div>
                      </div>
                    </div>
                    <div>
                      <div className="font-medium text-red-400">File System IOCs</div>
                      <div className="bg-gray-900 rounded p-2 mt-1 font-mono text-xs">
                        <div>Created: /tmp/pwned</div>
                        <div>Modified: /tmp/sdwan_vpndebug.log</div>
                        <div>Process: /sbin/sshipsecpm</div>
                      </div>
                    </div>
                    <div>
                      <div className="font-medium text-orange-400">Behavioral IOCs</div>
                      <div className="bg-gray-900 rounded p-2 mt-1 font-mono text-xs">
                        <div>Unexpected system() calls</div>
                        <div>Root privilege escalation</div>
                        <div>Command injection patterns</div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>

              <div className="bg-blue-900/20 border border-blue-500/30 rounded-lg p-4">
                <h3 className="font-semibold text-blue-400 mb-2">Forensic Analysis Summary</h3>
                <div className="text-sm text-gray-300">
                  <p className="mb-2">
                    Timeline analysis confirms successful exploitation of CVE-2023-28771 at 14:32:18.472. 
                    The attack leveraged a format string vulnerability in the IKEv2 notification handler, 
                    resulting in pre-authentication remote code execution with root privileges.
                  </p>
                  <p>
                    Total attack duration: 4.114 seconds from initial scan to command validation. 
                    The rapid execution suggests automated exploitation, consistent with known botnet activity 
                    targeting this vulnerability since April 2023.
                  </p>
                </div>
              </div>
            </div>
          )}

          {/* Terminal Module */}
          {activeModule === 'terminal' && (
            <div className="p-6 h-full flex flex-col">
              <div className="flex items-center justify-between">
                <h2 className="text-2xl font-bold">Forensic Analysis Console</h2>
                <div className="text-sm text-gray-400">jin.park@forensics-lab | Session: 2025-01-22</div>
              </div>

              <div className="flex-1 bg-gray-900 rounded-lg p-4 flex flex-col">
                <div className="text-xs text-gray-400 mb-2">
                  Forensic Analysis Terminal v2.1.4 - Type 'help' for available commands
                </div>
                
                <div 
                  ref={terminalRef}
                  className="flex-1 font-mono text-sm text-green-400 overflow-y-auto mb-4 space-y-1"
                  style={{ minHeight: '400px' }}
                >
                  <div>CVE-2023-28771 Forensic Analysis Suite</div>
                  <div>================================================</div>
                  <div className="text-blue-400">Analyst: Jin Park (Rasmus MÃ¸ller Pedersen)</div>
                  <div className="text-blue-400">Workstation: DFIR-WS-2025 | Classification: TLP:WHITE</div>
                  <div className="text-yellow-400">SYSTEM READY - Elevated privileges detected</div>
                  <div></div>
                  {terminalLines.map((line, idx) => (
                    <div key={idx} className={line.startsWith('jpark@forensics-lab') ? 'text-blue-400' : 'text-gray-300'}>
                      {line}
                    </div>
                  ))}
                </div>

                <div className="flex items-center space-x-2">
                  <span className="text-blue-400">jpark@forensics-lab:~#</span>
                  <input
                    type="text"
                    value={currentCommand}
                    onChange={(e) => setCurrentCommand(e.target.value)}
                    onKeyPress={(e) => {
                      if (e.key === 'Enter') {
                        handleTerminalCommand(currentCommand);
                        setCurrentCommand('');
                      }
                    }}
                    className="flex-1 bg-transparent text-white outline-none font-mono"
                    placeholder="Enter forensic command..."
                    autoFocus
                  />
                </div>
              </div>

              <div className="mt-4 bg-gray-800 rounded-lg p-4">
                <h3 className="font-semibold mb-2">Quick Actions</h3>
                <div className="flex flex-wrap gap-2">
                  <button
                    onClick={() => handleTerminalCommand('analyze-packet')}
                    className="px-3 py-1 bg-blue-600 hover:bg-blue-700 rounded text-sm transition-colors"
                  >
                    Analyze Packet
                  </button>
                  <button
                    onClick={() => handleTerminalCommand('extract-iocs')}
                    className="px-3 py-1 bg-orange-600 hover:bg-orange-700 rounded text-sm transition-colors"
                  >
                    Extract IOCs
                  </button>
                  <button
                    onClick={() => handleTerminalCommand('show-exploit')}
                    className="px-3 py-1 bg-red-600 hover:bg-red-700 rounded text-sm transition-colors"
                  >
                    Show Exploit
                  </button>
                  <button
                    onClick={() => handleTerminalCommand('mitre-mapping')}
                    className="px-3 py-1 bg-purple-600 hover:bg-purple-700 rounded text-sm transition-colors"
                  >
                    MITRE Mapping
                  </button>
                  <button
                    onClick={() => handleTerminalCommand('clear')}
                    className="px-3 py-1 bg-gray-600 hover:bg-gray-700 rounded text-sm transition-colors"
                  >
                    Clear
                  </button>
                </div>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default ForensicPlatform;