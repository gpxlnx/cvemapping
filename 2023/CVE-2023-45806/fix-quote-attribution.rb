# CVE: https://github.com/discourse/discourse/security/advisories/GHSA-hcgf-hg2g-mw78
# Fix: https://github.com/discourse/discourse/commit/7d484864fe91ff79c478f57e7ddb1235d701921e
#
# Usage: fix_quote_attribution("Username|", <limit>, <dry_run>)
# Where "Username|" is the unique search string within the quote attribution

def log_init(filename)
  if (File.exist?(filename))
    File.truncate(filename, 0)
  else
    File.create(filename, "w")
  end
end

def log_append(filename, line)
  File.write(filename, "#{line}\n", mode: 'a+')
end

$logfile = "log/cve-2023-45806.log"
log_init(logfile)

def fix_quote_attribution(search, limit, dry_run=true)
  quote_format = /\[quote=\"(?<realname>[^\]]*),\s+post:(?<post>\d+),\s+topic:(?<topic>\d+)(.*)/

  puts "Finding posts..."
  posts = Post.limit(limit).where("raw like '%#{search}%'")
  posts_cnt = posts.count
  puts "Found #{posts_cnt.to_s} posts"
  
  posts.each.with_index(1) do |p, i|
    puts "\n\e[36m***********************************\e[0m"
    puts "\e[36mpost #{i.to_s.rjust(3)}/#{posts_cnt}, id: #{p.id.to_s.rjust(7)}, author: #{User.find(p.user_id)&.username}\e[0m"
    puts "\n"
    puts "\e[31m#{p.raw}\e[0m"

    post_url = "https://#{ENV['DISCOURSE_HOSTNAME']}/t/#{p.topic_id.to_s}/#{p.post_number.to_s}"
    new_raw = p.raw.dup 
    new_raw.to_enum(:scan, quote_format).map {Regexp.last_match}.each.with_index(1) do |match, i|
      puts "\n"
      puts "Quote ##{i}" if i > 1
      puts "Finding quoted post where(\"topic_id=#{match[:topic]} and post_number=#{match[:post]}\")"

      quoted_username = ""
      quoted_post = Post.where("topic_id=" + match[:topic] + " and post_number=" + match[:post]).first

      if (quoted_post.nil?)
        quoted_username = "<anonymous>" 
        puts "quote target not found - unable to deduct author. Using '<anonymous>' for username"
        log_append($logfile, "Quote #{i} target not found in post id #{p.id}; #{post_url}")
      else 
        quoted_username = User.find(quoted_post.user_id).username
        puts "-> post id: #{quoted_post.id}, author: \e[32m#{quoted_username}\e[0m"
      end

      if (quoted_username != match[:realname])
        puts "\n"
        puts "fixed raw:"
        new_raw.gsub!(match[:realname], quoted_username)
        puts "\e[32m#{new_raw}\e[0m" 
      else
        puts "username #{quoted_username} matches with attribution in quote to post #{quoted_post&.id}, skipping"
      end
    end

    puts "\n"
    if (dry_run)
      puts "dry run - doing nothing"
    else
      puts "cooking post #{p.id}..."
      new_cooked = p.cook(new_raw, topic_id: p.topic_id)
      puts "new cooked:"
      puts new_cooked
      puts "updating post #{p.id}..."
      p.raw = new_raw
      p.save
      p.rebake!
      log_append($logfile, "Rewrote post id #{p.id}; #{post_url}")
    end
    puts "\e[32mdone\e[0m, #{post_url}"
  end;
  puts "\n"
end;
