import vibe.d;
import std.stdio;
import std.string;  
import std.file;
import std.conv;

immutable string LEAK_FILE = "log.txt";

class Cache {
    private:
        string[] cacheEntries;

    void add(string entry) {
        cacheEntries ~= entry;  
        logToFile(entry);        
    }

    size_t size() {
        return cacheEntries.length;
    }

    private:
    void logToFile(string entry) {
        append(LEAK_FILE, entry ~ "\n");
    }
}

Cache globalCache;  

void handleRequest(HTTPServerRequest req, HTTPServerResponse res) {
    try {
        throw new Exception("MatchInfoError: Invalid pattern");
        res.writeBody("Request handled successfully.");
    } catch (Exception e) {
        string errorCacheEntry = format("Error: %s", e.msg); 
        globalCache.add(errorCacheEntry);

        res.statusCode = 500;
        res.writeBody("Internal Server Error: Memory leak simulated.");
    }
}

void main() {
    globalCache = new Cache();

    auto settings = new HTTPServerSettings;
    settings.port = 8080;

    listenHTTP(settings, &handleRequest);

    writeln("Server running on http://localhost:8080");
    runApplication();
}
