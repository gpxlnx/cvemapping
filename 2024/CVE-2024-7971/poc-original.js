// Copyright 2024 the V8 project authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Flags: --expose-gc --liftoff-only
//
//https://chromium.googlesource.com/v8/v8/+/4ddcbf22b7be0a30c88c1485f0b5e4863d9aefd7/test/mjsunit/regress/wasm/regress-360700873.js

d8.file.execute('wasm-module-builder.js');

var conv_ab = new ArrayBuffer(8);
var conv_u32 = new Uint32Array(conv_ab);
var conv_i32 = new Int32Array(conv_ab);
var conv_b64 = new BigInt64Array(conv_ab);
var conv_f64 = new Float64Array(conv_ab);

function i2d(val) {
    conv_u32[0] = val;
    conv_u32[1] = 0;
    return conv_f64[0];
}

function b2d(val) {
    conv_b64[0] = val;
    return conv_f64[0];
}

const builder = new WasmModuleBuilder();
let $sig2 =
    builder.addType(makeSig([], [kWasmF32, kWasmF32, kWasmF64, kWasmFuncRef]));
let $sig3 = builder.addType(
    makeSig([kWasmExternRef, kWasmF32, kWasmF32, kWasmF64, kWasmFuncRef], []));

let a0 = builder.addImport('m', 'a', kSig_v_v);
let $global0 = builder.addImportedGlobal('m', 'global0', kWasmF64, true);
builder.addDeclarativeElementSegment([a0]);
builder.addFunction('main', kSig_v_d).exportFunc().addBody([
    kExprRefNull, kExternRefCode,
    kExprTry, $sig2,
      ...wasmF32Const(0),
      ...wasmF32Const(0),
      ...wasmF64Const(0),
      kExprRefNull, kFuncRefCode,
    kExprEnd,
    kExprLoop, $sig3,
      kExprCallFunction, a0,
      kExprDrop,
      kExprDrop,
      kExprDrop,
      kExprDrop,
      kExprI64Const, 0,
      kExprRefNull, kExternRefCode,
      ...wasmF32Const(30),
      ...wasmF32Const(50),
      kExprGlobalGet, $global0,
      kExprRefFunc, a0,
      kExprBr, 0,
    kExprEnd,
  ]);
let remaining_iterations = 3;
function a() {
  if (--remaining_iterations == 0) throw new Error('finished');
  //gc();
  
  %GlobalPrint(remaining_iterations + " =================\n");
  %GlobalPrint("[1] = " + arguments[1] + "\n");
  
  for(let i = 0; i < arguments.length; i++) {
      %DebugPrint(arguments[i]);
  }
  
}
let global0 = new WebAssembly.Global({value: 'f64', mutable: true});
let instance = builder.instantiate({m: {a, global0}});
global0.value = b2d(3n);  // bit pattern "0x3", cleared weak pointer
try {
    instance.exports.main();
} catch(err) {}