FROM ubuntu:20.04

ENV DEBIAN_FRONTEND=noninteractive

# https://cyberpanel.net/KnowledgeBase/home/install-cyberpanel/
RUN apt update && apt upgrade -y

# Install required packages for CyberPanel
RUN apt-get update && apt-get install -y \
    wget \
    curl \
    git \
    python3 \
    python3-pip \
    python3-dev \
    python3-setuptools \
    build-essential \
    libssl-dev \
    libffi-dev \
    libxml2-dev \
    libxslt1-dev \
    zlib1g-dev \
    libjpeg-dev \
    libfreetype6-dev \
    liblcms2-dev \
    libwebp-dev \
    libmysqlclient-dev \
    default-libmysqlclient-dev \
    pkg-config \
    libgpgme-dev \
    libgpg-error-dev \
    mysql-server \
    redis-server \
    sqlite3 \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*

# Create CyberCP directory structure
RUN mkdir -p /usr/local/CyberCP/logs
RUN mkdir -p /usr/local/CyberCP/public

# Clone CyberPanel source code manually (avoiding the broken installer)
WORKDIR /usr/local
RUN git clone https://github.com/usmannasir/cyberpanel.git
WORKDIR /usr/local/cyberpanel
RUN git checkout v2.3.4
RUN echo "CyberPanel source cloned, checking contents:" && ls -la

# Install Python dependencies (fix the broken requirements file issue)
RUN pip3 install --upgrade pip
RUN pip3 install -r requirments.txt

# Remove old CyberCP contents and copy CyberPanel source
RUN rm -rf /usr/local/CyberCP/*
RUN cp -r /usr/local/cyberpanel/* /usr/local/CyberCP/
RUN ls -la /usr/local/CyberCP/ && echo "Files copied successfully"

# Create settings file
COPY <<'EOF' /usr/local/CyberCP/CyberCP/settings_docker.py
# Override original settings
from .settings import *
DATABASES = {"default": {"ENGINE": "django.db.backends.sqlite3", "NAME": "/usr/local/CyberCP/cyberpanel.db"}}
ALLOWED_HOSTS = ["*"]  
DEBUG = True
MIDDLEWARE = [m for m in MIDDLEWARE if "csrf" not in m.lower()]
EOF

# Create startup script
COPY <<'EOF' /start-cyberpanel.sh
#!/bin/bash

echo "Starting CyberPanel services..."

# Start required services
service mysql start || echo "MySQL failed to start"
service redis-server start || echo "Redis failed to start"

cd /usr/local/CyberCP

# Set Django settings
export DJANGO_SETTINGS_MODULE=CyberCP.settings_docker

# Check if manage.py exists
if [ ! -f manage.py ]; then
    echo "ERROR: manage.py not found. Installation failed."
    echo "Contents of /usr/local/CyberCP:"
    ls -la /usr/local/CyberCP/
    sleep infinity
    exit 1
fi

echo "Setting up Django database..."
python3 manage.py migrate --run-syncdb || echo "Migration failed"
python3 manage.py collectstatic --noinput || echo "Collectstatic failed"

# Create admin user
echo "Creating admin user..."
echo "from django.contrib.auth.models import User; User.objects.filter(username='admin').delete(); User.objects.create_superuser('admin', 'admin@cyberpanel.net', '1234567')" | python3 manage.py shell || echo "User creation failed"

echo "Starting CyberPanel on port 8090..."
echo "Access CyberPanel at: http://localhost:8090"
echo "Vulnerable endpoint (CVE-2024-51568): http://localhost:8090/filemanager/upload"
echo "Admin credentials: admin / 1234567"

# Start Django development server
python3 manage.py runserver 0.0.0.0:8090
EOF

RUN chmod +x /start-cyberpanel.sh

EXPOSE 8090

WORKDIR /usr/local/CyberCP

CMD ["/start-cyberpanel.sh"]
