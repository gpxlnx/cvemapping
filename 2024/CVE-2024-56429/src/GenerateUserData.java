import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

public class GenerateUserData {

    //File: iLabClient.jar; package de.itech_gmbh.ilabcommon.tools; class CommonHelpers.class
    private static final char[] HEXZEICHEN_GROSS = "0123456789ABCDEF".toCharArray();

    //File: iLabClient.jar; package de.itech_gmbh.ilabcommon.tools; class CommonHelpers.class
    private static final char[] HEXZEICHEN_KLEIN = "0123456789abcdef".toCharArray();

    //File: iLabClient.jar; package de.itech_gmbh.ilabclient.javafx.tools.helpers; class VerschluesselungHelper.class
    public enum HashAlgorithmus {
        MD5("MD5"),
        SHA_256("SHA-256");

        private final String algorithmus;

        HashAlgorithmus(String algorithmus) {
            this.algorithmus = algorithmus;
        }

        public String getAlgorithmus() {
            return this.algorithmus;
        }
    }

    public static void main(String[] args) {
        System.out.println("Generate Hash for User admin:");

        User user = new User();
        user.setUserID(5L);
        user.setName("Anwender");
        user.setBenutzer("anwender");
        user.setPassword("anwender");
        //user.setParams("111111111111111111");
        user.setParams("000000010000000000");

        speichereBenutzer(user);
    }

    //File: iLabClient.jar; package de.itech_gmbh.ilabclient.javafx; class Datastore.class
    public static void speichereBenutzer(User user) {
        HashAlgorithmus hashAlgorithmus = HashAlgorithmus.SHA_256;
        user.setHash(hashAlgorithmus.getAlgorithmus() + ":" + erstelleHash(user, hashAlgorithmus));
        System.out.println(user.getHash());
    }

    //modified speichereBenutzer(user) class
    public static void speichereBenutzer_md5(User user) {
        HashAlgorithmus hashAlgorithmus = HashAlgorithmus.MD5;
        user.setHash(hashAlgorithmus.getAlgorithmus() + ":" + erstelleHash(user, hashAlgorithmus));
        System.out.println(user.getHash());
    }

    //File: iLabClient.jar; package de.itech_gmbh.ilabclient.javafx; class Datastore.class
    private static String erstelleHash(User user, HashAlgorithmus hashAlgorithmus) {
        StringBuilder datenBuilder = new StringBuilder();
        datenBuilder.append('2')
                .append(user.getUserID())
                .append(user.getName())
                .append(user.getBenutzer())
                .append(user.getPassword())
                .append(user.getParams());
        return computeHashString(datenBuilder.toString(), hashAlgorithmus);
    }

    //File: iLabClient.jar; package de.itech_gmbh.ilabclient.javafx.tools.helpers; class VerschluesselungHelper.class
    public static String computeHashString(String data, HashAlgorithmus hashAlgorithmus) {
        try {
            byte[] bytesOfMessage = data.getBytes(StandardCharsets.UTF_8);
            MessageDigest md = MessageDigest.getInstance(hashAlgorithmus.getAlgorithmus());
            byte[] md5bytes = md.digest(bytesOfMessage);
            return konvertiereZuHex(md5bytes, true);
        } catch (NoSuchAlgorithmException e) {
            return "";
        }
    }

    //File: iLabClient.jar; package de.itech_gmbh.ilabcommon.tools; class CommonHelpers.class
    public static String konvertiereZuHex(byte[] bytes, boolean verwendeGrossbuchstaben) {
        char[] hexzeichen = verwendeGrossbuchstaben ? HEXZEICHEN_GROSS : HEXZEICHEN_KLEIN;
        StringBuilder sb = new StringBuilder(bytes.length * 2);
        for (byte b : bytes) {
            sb.append(hexzeichen[b >> 4 & 0xF]);
            sb.append(hexzeichen[b & 0xF]);
        }
        return sb.toString();
    }

}
