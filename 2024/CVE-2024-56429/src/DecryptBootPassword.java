public class DecryptBootPassword {

    private static final char[] encodeMap = initEncodeMap();

    //File: iLabClient.jar; package de.itech_gmbh.ilabclient.javafx; class Datastore.class
    private static final byte[] KEY = new byte[] {
            98, 120, 0, 97, -40, 0, 19, -7, 10, 101,
            -117, -74, 23, 108, 38, -21 };

    public static void main(String[] args) {
        System.out.println("Create connection string:");

        String jdbcUrl = "jdbc:derby:iLabClient";
        String result = fuegeBootPasswortZuJDBCUrlHinzu(jdbcUrl);

        System.out.println(result);
    }

    //File: iLabClient.jar; package de.itech_gmbh.ilabclient.javafx; class Datastore.class
    public static String fuegeBootPasswortZuJDBCUrlHinzu(String jdbcUrl) {
        StringBuilder sbJDBCUrl = new StringBuilder(jdbcUrl);
        sbJDBCUrl.append(";dataEncryption=true;bootPassword=")
                .append(printBase64Binary(KEY));
        return sbJDBCUrl.toString();
    }

    //File: iLabClient.jar; package javax.xml.bind; class DatetypeConverter.class
    public static String printBase64Binary(byte[] val) {
        return _printBase64Binary(val);
    }

    //File: iLabClient.jar; package javax.xml.bind; class DatetypeConverter.class
    public static String _printBase64Binary(byte[] input) {
        return _printBase64Binary(input, 0, input.length);
    }

    //File: iLabClient.jar; package javax.xml.bind; class DatetypeConverter.class
    public static String _printBase64Binary(byte[] input, int offset, int len) {
        char[] buf = new char[(len + 2) / 3 * 4];
        int ptr = _printBase64Binary(input, offset, len, buf, 0);
        assert ptr == buf.length;
        return new String(buf);
    }

    //File: iLabClient.jar; package javax.xml.bind; class DatetypeConverter.class
    public static int _printBase64Binary(byte[] input, int offset, int len, char[] buf, int ptr) {
        int remaining = len;
        int i;
        for (i = offset; remaining >= 3; remaining -= 3, i += 3) {
            buf[ptr++] = encode(input[i] >> 2);
            buf[ptr++] = encode((input[i] & 0x3) << 4 | input[i + 1] >> 4 & 0xF);
            buf[ptr++] = encode((input[i + 1] & 0xF) << 2 | input[i + 2] >> 6 & 0x3);
            buf[ptr++] = encode(input[i + 2] & 0x3F);
        }
        if (remaining == 1) {
            buf[ptr++] = encode(input[i] >> 2);
            buf[ptr++] = encode((input[i] & 0x3) << 4);
            buf[ptr++] = '=';
            buf[ptr++] = '=';
        }
        if (remaining == 2) {
            buf[ptr++] = encode(input[i] >> 2);
            buf[ptr++] = encode((input[i] & 0x3) << 4 | input[i + 1] >> 4 & 0xF);
            buf[ptr++] = encode((input[i + 1] & 0xF) << 2);
            buf[ptr++] = '=';
        }
        return ptr;
    }

    //File: iLabClient.jar; package javax.xml.bind; class DatetypeConverter.class
    public static char encode(int i) {
        return encodeMap[i & 0x3F];
    }

    //File: iLabClient.jar; package javax.xml.bind; class DatetypeConverter.class
    private static char[] initEncodeMap() {
        char[] map = new char[64];
        int i;
        for (i = 0; i < 26; i++)
            map[i] = (char)(65 + i);
        for (i = 26; i < 52; i++)
            map[i] = (char)(97 + i - 26);
        for (i = 52; i < 62; i++)
            map[i] = (char)(48 + i - 52);
        map[62] = '+';
        map[63] = '/';
        return map;
    }
}