import ssl
import socket
import argparse
from urllib.parse import urlparse

def detect_ssl_verification_bypass(target_host, target_port):
    """
    Check for CVE-2024-40898 (SSL verification bypass) vulnerability on the target Apache HTTP Server.
    """
    context = ssl.create_default_context()
    context.check_hostname = False
    context.verify_mode = ssl.CERT_NONE

    try:
        with socket.create_connection((target_host, target_port), timeout=5) as sock:
            with context.wrap_socket(sock, server_hostname=target_host) as ssock:
                request = f"HEAD / HTTP/1.1\r\nHost: {target_host}\r\nConnection: close\r\n\r\n"
                ssock.sendall(request.encode())
                response = ssock.recv(4096)

                if b"200 OK" in response:
                    print(f"[+] Target {target_host}:{target_port} may be vulnerable to CVE-2024-40898.")
                else:
                    print(f"[-] Target {target_host}:{target_port} does not appear vulnerable.")
    except Exception as e:
        print(f"[!] Error during detection: {e}")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Detect CVE-2024-40898 vulnerability on a target.')
    parser.add_argument('-u', '--url', required=True, help='Target URL or IP, e.g. https://192.168.1.1:443 or 10.10.10.10')
    args = parser.parse_args()

    parsed = urlparse(args.url if "://" in args.url else f"https://{args.url}")
    target_host = parsed.hostname
    target_port = parsed.port if parsed.port else 443

    if not target_host:
        print("[!] Invalid input. Please provide a valid URL or IP.")
    else:
        detect_ssl_verification_bypass(target_host, target_port)
