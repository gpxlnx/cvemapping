#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import re
import json
import requests
from pathlib import Path
from typing import List, Dict, Set, Tuple

class HomoglyphDetector:
    def __init__(self):
        self.confusables_data = self._load_confusables()
        self.suspicious_chars: Set[str] = set()
        
    def _load_confusables(self) -> Dict[str, List[str]]:
        """加载 Unicode Confusables 数据"""
        try:
            # 尝试从本地文件加载
            with open('confusables.json', 'r', encoding='utf-8') as f:
                return json.load(f)
        except FileNotFoundError:
            # 如果本地文件不存在，从 Unicode 官网下载
            url = "https://www.unicode.org/Public/security/latest/confusables.txt"
            response = requests.get(url)
            if response.status_code == 200:
                return self._parse_confusables(response.text)
            else:
                raise Exception("无法下载 Confusables 数据")

    def _parse_confusables(self, data: str) -> Dict[str, List[str]]:
        """解析 Confusables 数据文件"""
        confusables = {}
        for line in data.split('\n'):
            if line.startswith('#') or not line.strip():
                continue
            parts = line.split(';')
            if len(parts) >= 2:
                source = parts[0].strip()
                target = parts[1].strip()
                if source and target:
                    if source not in confusables:
                        confusables[source] = []
                    confusables[source].append(target)
        return confusables

    def check_identifier(self, identifier: str) -> List[Tuple[str, str]]:
        """检查标识符中的同形文字"""
        suspicious_pairs = []
        for char in identifier:
            if char in self.confusables_data:
                for confusable in self.confusables_data[char]:
                    if confusable in identifier:
                        suspicious_pairs.append((char, confusable))
        return suspicious_pairs

    def scan_file(self, file_path: str) -> Dict[str, List[Tuple[str, str]]]:
        """扫描文件中的标识符"""
        results = {}
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
                
            # 使用正则表达式匹配标识符
            # 这个正则表达式匹配变量名、函数名等标识符
            identifiers = re.findall(r'\b[a-zA-Z_][a-zA-Z0-9_]*\b', content)
            
            for identifier in identifiers:
                suspicious = self.check_identifier(identifier)
                if suspicious:
                    results[identifier] = suspicious
                    
        except Exception as e:
            print(f"扫描文件 {file_path} 时出错: {str(e)}")
            
        return results

    def scan_directory(self, directory: str) -> Dict[str, Dict[str, List[Tuple[str, str]]]]:
        """扫描目录中的所有 Python 文件"""
        results = {}
        for file_path in Path(directory).rglob('*.py'):
            file_results = self.scan_file(str(file_path))
            if file_results:
                results[str(file_path)] = file_results
        return results

def main():
    detector = HomoglyphDetector()
    
    # 示例用法
    directory = "."  # 当前目录
    results = detector.scan_directory(directory)
    
    if not results:
        print("未发现可疑的同形文字")
        return
        
    print("\n发现可疑的同形文字:")
    for file_path, file_results in results.items():
        print(f"\n文件: {file_path}")
        for identifier, suspicious_pairs in file_results.items():
            print(f"  标识符: {identifier}")
            for source, target in suspicious_pairs:
                print(f"    可疑字符对: {source} -> {target}")

if __name__ == "__main__":
    main() 