#!/usr/bin/env python3
import argparse
from colorama import Fore, Style, init
import requests
import urllib3

# Disable SSL warnings
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# Initialize colorama
init(autoreset=True)

BANNER = f"""{Fore.RED}
   _____ _   _ ______ _____   ____  _____  _____   ____   ___   ___   ___  
  / ____| \ | |  ____|  __ \ / __ \|  __ \|  __ \ / __ \ / _ \ / _ \ / _ \ 
 | |    |  \| | |__  | |__) | |  | | |__) | |__) | |  | | | | | | | | | | |
 | |    | . ` |  __| |  _  /| |  | |  _  /|  ___/| |  | | | | | | | | | | |
 | |____| |\  | |____| | \ \| |__| | | \ \| |    | |__| | |_| | |_| | |_| |
  \_____|_| \_|______|_|  \_\\____/|_|  \_\_|     \____/ \___/ \___/ \___/ 
                    CVE-2025-5309 Multi-Method Scanner by Issam jr
""" + Style.RESET_ALL

HEADERS = {
    "User-Agent": "Mozilla/5.0 (IssamScanner)",
    "Content-Type": "application/x-www-form-urlencoded"
}

# Different SSTI payloads to test
PAYLOADS = [
    {"message": "{{7*7}}"},
    {"message": "${7*7}"},
    {"message": "<%= 7*7 %>"},
    {"message": "{{7+7}}"},
    {"message": "{{1337*0}}"},
]

def check_vulnerable(url):
    print(f"{Fore.CYAN}[*] Testing {url}")
    try:
        for payload in PAYLOADS:
            res = requests.post(url, data=payload, headers=HEADERS, timeout=10, verify=False)
            if any(str(eval_payload(payload["message"])) in res.text for payload in PAYLOADS):
                print(f"{Fore.RED}[!] {url} is VULNERABLE to SSTI (CVE-2025-5309) using payload: {payload['message']}")
                return
        print(f"{Fore.GREEN}[+] {url} does not appear vulnerable.")
    except requests.RequestException as e:
        print(f"{Fore.YELLOW}[!] Connection error for {url}: {e}")

def eval_payload(payload):
    try:
        if "{{" in payload and "}}" in payload:
            code = payload.replace("{{", "").replace("}}", "").strip()
            return eval(code)
        elif "${" in payload and "}" in payload:
            code = payload.replace("${", "").replace("}", "").strip()
            return eval(code)
        elif "<%=" in payload and "%>" in payload:
            code = payload.replace("<%=", "").replace("%>", "").strip()
            return eval(code)
    except Exception:
        return "EVAL_ERROR"
    return "UNKNOWN"

def main():
    parser = argparse.ArgumentParser(description='CVE-2025-5309 Multi-Method SSTI Scanner')
    parser.add_argument('--url', type=str, help='Single URL to scan (e.g. https://target.com/chat)')
    parser.add_argument('--list', type=str, help='Path to file containing list of URLs to scan')
    args = parser.parse_args()

    print(BANNER)

    if args.url:
        check_vulnerable(args.url)
    elif args.list:
        try:
            with open(args.list, 'r') as f:
                for line in f:
                    url = line.strip()
                    if url:
                        check_vulnerable(url)
        except FileNotFoundError:
            print(f"{Fore.YELLOW}[!] File {args.list} not found.")
    else:
        print(f"{Fore.YELLOW}[!] You must provide --url or --list")

if __name__ == '__main__':
    main()
