#!/bin/bash

if ! command -v jq &> /dev/null; then
    echo "Error: jq is required but not installed. Install with: brew install jq"
    exit 1
fi

regions=$(aws ec2 describe-regions --region us-east-1 --query 'Regions[].RegionName' --output text 2>/dev/null)
if [ $? -ne 0 ]; then
    echo "Error: Failed to retrieve AWS regions"
    exit 1
fi

echo "ElastiCache Clusters Across All Regions"
echo "========================================"

for region in $regions; do
    echo -e "\nRegion: $region"
    echo "----------------------------------------"
    
    # Get replication groups first
    repgroups=$(aws elasticache describe-replication-groups --region $region --query 'ReplicationGroups[].{ID:ReplicationGroupId,Engine:Engine,Members:MemberClusters[]}' --output json 2>/dev/null)
    
    # Get all cache clusters
    clusters=$(aws elasticache describe-cache-clusters --region $region --query 'CacheClusters[].{ID:CacheClusterId,Engine:Engine,Version:EngineVersion,Status:CacheClusterStatus}' --output json 2>/dev/null)
    
    # Extract member cluster IDs to filter out
    member_ids=$(echo "$repgroups" | jq -r '.[].Members[]?' 2>/dev/null)
    
    # Filter and display standalone clusters only (Redis and Valkey)
    if [ "$clusters" != "[]" ] && [ -n "$clusters" ]; then
        echo "$clusters" | jq -r --arg members "$member_ids" '.[] | select([.ID] | inside($members | split("\n")) | not) | select(.Engine == "redis" or .Engine == "valkey") | "  \(.ID) | \(.Engine) \(.Version) | \(.Status)"' 2>/dev/null
    fi
    
    # Display replication groups with version from first member (Redis and Valkey)
    if [ "$repgroups" != "[]" ] && [ -n "$repgroups" ]; then
        for rg_id in $(echo "$repgroups" | jq -r '.[] | select(.Engine == "redis" or .Engine == "valkey") | .ID'); do
            engine=$(echo "$repgroups" | jq -r --arg id "$rg_id" '.[] | select(.ID == $id) | .Engine')
            member=$(echo "$repgroups" | jq -r --arg id "$rg_id" '.[] | select(.ID == $id) | .Members[0]')
            version=$(echo "$clusters" | jq -r --arg mid "$member" '.[] | select(.ID == $mid) | .Version' 2>/dev/null)
            status=$(aws elasticache describe-replication-groups --region $region --replication-group-id "$rg_id" --query 'ReplicationGroups[0].Status' --output text 2>/dev/null)
            echo "  $rg_id | $engine $version | $status"
        done
    fi
done
