from flask import Flask, Response
import os, subprocess

app = Flask(__name__)

# In-memory simulation flag
poc_created = False

@app.route("/")
def index():
    return Response("Cross Web Server - TVT DVR Simulation", mimetype="text/plain")

@app.route("/language/<path:lang>")
def language(lang):
    global poc_created
    # Simulate command injection: look for "echo poc-content > /tmp/poc.txt"
    if "echo+poc-content+>+/tmp/poc.txt" in lang or "echo poc-content > /tmp/poc.txt" in lang:
        poc_created = True
        return Response("Executed: poc-content created", mimetype="text/plain")

    # Generic simulation for other inputs
    cmd = f"echo vulnerable > /tmp/{lang}.txt"
    try:
        out = subprocess.check_output(cmd, shell=True, stderr=subprocess.STDOUT, text=True)
        return Response(out or f"Executed: {cmd}", mimetype="text/plain")
    except subprocess.CalledProcessError as e:
        return Response(e.output, status=500, mimetype="text/plain")

@app.route("/poc.txt")
def fetch_poc():
    # Only return poc-content if exploit step was triggered
    if poc_created:
        return Response("poc-content", mimetype="text/plain")
    return Response("Not Found", status=404)

@app.route("/<filename>.txt")
def fetch_file(filename):
    path = f"/tmp/{filename}.txt"
    if os.path.exists(path):
        with open(path) as f:
            return Response(f.read(), mimetype="text/plain")
    return Response("Not Found", status=404)

if __name__ == "__main__":
    os.makedirs("/tmp/Swedish", exist_ok=True)
    with open("/tmp/Swedish/index.html", "w") as f:
        f.write("ok")

    app.run(host="0.0.0.0", port=8080, debug=False)
