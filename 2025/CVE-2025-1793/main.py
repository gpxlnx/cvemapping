import os
from llama_index.core import SimpleDirectoryReader, StorageContext, VectorStoreIndex
from llama_index.vector_stores.chroma import ChromaVectorStore
from llama_index.core.query_engine import RetrieverQueryEngine
from chromadb.config import Settings
import chromadb

# Load document
documents = SimpleDirectoryReader("data").load_data()

# Start a local Chroma instance
chroma_client = chromadb.Client(Settings(
    persist_directory="chroma_db",
    anonymized_telemetry=False
))

# Simulate a vulnerable Chroma store
vector_store = ChromaVectorStore(chroma_client=chroma_client, collection_name="test_collection")

# Use storage context
storage_context = StorageContext.from_defaults(vector_store=vector_store)

# Index the document
index = VectorStoreIndex.from_documents(documents, storage_context=storage_context)

# Craft a malicious filter input (simulating SQL injection)
# Some vector backends allow filter queries like: {"field": {"$eq": "user_input"}}
# Let's pretend user_input is:
malicious_filter = {
    "dummy_field': {'$eq': 'dummy'}; DROP TABLE documents; --": "value"
}

# Query the vector store using the malicious filter
retriever = index.as_retriever(filters=malicious_filter)

query_engine = RetrieverQueryEngine(retriever=retriever)
response = query_engine.query("What is this document about?")
print(response)
