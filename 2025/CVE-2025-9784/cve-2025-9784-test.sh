#!/bin/bash

# CVE-2025-9784 MadeYouReset HTTP/2 Vulnerability Test
# Simple and direct test for the vulnerability

set -e

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

log() { echo -e "${1}[$(date '+%H:%M:%S')] $2${NC}"; }
info() { log "$GREEN" "INFO: $1"; }
warn() { log "$YELLOW" "WARN: $1"; }
error() { log "$RED" "ERROR: $1"; }

# Check if URL provided
if [ $# -eq 0 ]; then
    echo "Usage: $0 <URL>"
    echo "Example: $0 https://example.com"
    exit 1
fi

URL="$1"
HOST=$(echo "$URL" | sed -n 's,^https\?://\([^:/]*\).*,\1,p')

info "Testing $URL for CVE-2025-9784 (MadeYouReset)"

# Check if curl supports HTTP/2
if ! curl --version | grep -q "HTTP2"; then
    error "curl with HTTP/2 support required"
    exit 1
fi

# Test 1: Check HTTP/2 support
info "Checking HTTP/2 support..."
if ! curl -s -I --http2 --connect-timeout 10 "$URL" | grep -q "HTTP/2"; then
    warn "HTTP/2 not supported - vulnerability not applicable"
    exit 0
fi
info "HTTP/2 supported âœ“"

# Test 2: Baseline response time
info "Measuring baseline response time..."
baseline=$(curl -s --http2 --connect-timeout 10 -w "%{time_total}" -o /dev/null "$URL" 2>/dev/null || echo "0")
info "Baseline: ${baseline}s"

# Test 3: Rapid concurrent requests (simulates MadeYouReset attack)
info "Testing rapid concurrent requests..."
start_time=$(date +%s)

# Launch 20 concurrent requests that might trigger stream resets
for i in {1..20}; do
    {
        timeout 5 curl -s --http2 --connect-timeout 3 \
            -H "Connection: close" \
            -o /dev/null "$URL/test$i" 2>/dev/null
        echo $? > /tmp/result_$i
    } &
done

# Wait for all requests
wait
end_time=$(date +%s)
duration=$((end_time - start_time))

# Analyze results
success=0
timeout_count=0
failed=0

for i in {1..20}; do
    if [ -f "/tmp/result_$i" ]; then
        result=$(cat "/tmp/result_$i")
        case $result in
            0) ((success++)) ;;
            124) ((timeout_count++)) ;;
            *) ((failed++)) ;;
        esac
        rm -f "/tmp/result_$i"
    else
        ((failed++))
    fi
done

info "Results: $success success, $failed failed, $timeout_count timeouts in ${duration}s"

# Test 4: Response time under stress
info "Testing response time under stress..."
stress_time=$(curl -s --http2 --connect-timeout 10 -w "%{time_total}" -o /dev/null "$URL" 2>/dev/null || echo "0")
info "Under stress: ${stress_time}s"

# Analysis
echo
echo "===== VULNERABILITY ASSESSMENT ====="

vulnerable=false

# Check for high timeout/failure rate
if [ $timeout_count -gt 10 ] || [ $failed -gt 15 ]; then
    warn "High failure rate detected (timeouts: $timeout_count, failed: $failed)"
    vulnerable=true
fi

# Check for significant response time increase
if [ $(echo "$stress_time > ($baseline * 3)" | bc -l 2>/dev/null || echo "0") -eq 1 ]; then
    warn "Significant response time degradation detected"
    vulnerable=true
fi

# Final assessment
if [ "$vulnerable" = true ]; then
    error "POTENTIAL VULNERABILITY DETECTED"
    echo "- Server shows signs of being affected by CVE-2025-9784"
    echo "- High failure rates or response time degradation observed"
    echo "- Recommendation: Update server software and check vendor advisories"
else
    info "NO CLEAR VULNERABILITY INDICATORS"
    echo "- Server appears to handle concurrent HTTP/2 requests normally"
    echo "- However, manual testing and log analysis recommended"
fi

echo
echo "CVE-2025-9784 Information:"
echo "- CVSS Score: 7.5 (High)"
echo "- Affects: Undertow-based servers (Red Hat products)"
echo "- Advisory: https://access.redhat.com/security/cve/CVE-2025-9784"

# Cleanup
rm -f /tmp/result_*