#!/usr/bin/env python3
"""
CVE-2025-5054 Vulnerability Detection Tool
==========================================

This tool checks if your Ubuntu system is vulnerable to CVE-2025-5054,
a race condition in Apport that allows local information disclosure.

The vulnerability affects Apport versions up to and including 2.32.0.
"""

import os
import sys
import subprocess
import re
from pathlib import Path
from typing import List, Tuple, Optional, Union, Dict


# Constants
COLOR_RED = "\033[91m"
COLOR_GREEN = "\033[92m"
COLOR_YELLOW = "\033[93m"
COLOR_BLUE = "\033[94m"
COLOR_RESET = "\033[0m"

# Status constants
STATUS_VULNERABLE = "VULNERABLE"
STATUS_WARNING = "WARNING"
STATUS_PATCHED = "PATCHED"
STATUS_NOT_VULNERABLE = "NOT VULNERABLE"
STATUS_GOOD = "GOOD"
STATUS_INFO = "INFO"
STATUS_ERROR = "ERROR"
STATUS_UNKNOWN = "UNKNOWN"


class VulnerabilityDetector:
    def __init__(self):
        self.vulnerable = False
        self.results: List[Tuple[str, str, str]] = []
        
        # Status color mapping
        self.status_colors: Dict[str, str] = {
            STATUS_VULNERABLE: COLOR_RED,
            STATUS_WARNING: COLOR_YELLOW,
            STATUS_PATCHED: COLOR_GREEN,
            STATUS_NOT_VULNERABLE: COLOR_GREEN,
            STATUS_GOOD: COLOR_GREEN,
            STATUS_INFO: COLOR_BLUE,
            STATUS_ERROR: COLOR_RED,
            STATUS_UNKNOWN: COLOR_YELLOW
        }
        
    def print_banner(self):
        """Print tool banner"""
        print("=" * 60)
        print("CVE-2025-5054 Vulnerability Detection Tool")
        print("=" * 60)
        print()
        
    def check_os(self):
        """Check if running on Ubuntu"""
        print("[*] Checking operating system...")
        
        # Check if we're on Ubuntu
        if not Path("/etc/os-release").exists():
            self.results.append(("OS Check", "UNKNOWN", "Cannot determine OS"))
            return False
            
        with open("/etc/os-release", "r") as f:
            content = f.read()
            
        if "Ubuntu" not in content:
            self.results.append(("OS Check", "NOT VULNERABLE", "Not running Ubuntu"))
            return False
            
        # Extract version
        version_match = re.search(r'VERSION_ID="(\d+\.\d+)"', content)
        if version_match:
            version = version_match.group(1)
            self.results.append(("OS Check", "INFO", f"Ubuntu {version} detected"))
        else:
            self.results.append(("OS Check", "INFO", "Ubuntu detected (version unknown)"))
            
        return True
        
    def check_apport_installed(self) -> Union[bool, Tuple[bool, Optional[str]]]:
        """Check if Apport is installed
        
        Returns:
            Union[bool, Tuple[bool, Optional[str]]]: 
                If Apport is not installed, returns False.
                If Apport is installed, returns (True, version_string) or (True, None) if version unknown.
        """
        print("[*] Checking if Apport is installed...")
        
        try:
            result = subprocess.run(
                ["dpkg", "-l", "apport"],
                capture_output=True,
                text=True,
                check=False
            )
            
            if result.returncode != 0:
                self.results.append(("Apport Check", STATUS_NOT_VULNERABLE, "Apport not installed"))
                return False
                
            # Extract version from dpkg output
            for line in result.stdout.split('\n'):
                if line.startswith('ii') and 'apport' in line:
                    parts = line.split()
                    if len(parts) >= 3:
                        version = parts[2]
                        self.results.append(("Apport Check", STATUS_INFO, f"Apport version {version} installed"))
                        return (True, version)
                        
            self.results.append(("Apport Check", STATUS_INFO, "Apport installed (version unknown)"))
            return (True, None)
            
        except Exception as e:
            self.results.append(("Apport Check", STATUS_ERROR, f"Error checking Apport: {e}"))
            return False
            
    def check_apport_version(self, version_str: Optional[str]) -> None:
        """Check if Apport version is vulnerable
        
        Args:
            version_str: The version string to check, or None if unknown
        """
        print("[*] Checking Apport version...")
        
        if not version_str:
            self.results.append(("Version Check", "UNKNOWN", "Cannot determine Apport version"))
            self.vulnerable = True  # Assume vulnerable if we can't check
            return
            
        try:
            # Extract version numbers
            version_match = re.match(r'(\d+)\.(\d+)(?:\.(\d+))?', version_str)
            if not version_match:
                self.results.append(("Version Check", STATUS_UNKNOWN, f"Cannot parse version: {version_str}"))
                self.vulnerable = True
                return
                
            major = int(version_match.group(1))
            minor = int(version_match.group(2))
            patch = int(version_match.group(3) or 0)
            
            # CVE-2025-5054 affects versions up to and including 2.32.0
            is_vulnerable = (
                major < 2 or
                (major == 2 and minor < 32) or
                (major == 2 and minor == 32 and patch == 0)
            )
            
            if is_vulnerable:
                self.vulnerable = True
                self.results.append(("Version Check", STATUS_VULNERABLE, f"Version {version_str} is vulnerable"))
            else:
                self.results.append(("Version Check", STATUS_PATCHED, f"Version {version_str} is patched"))
                
        except Exception as e:
            self.results.append(("Version Check", "ERROR", f"Error parsing version: {e}"))
            self.vulnerable = True
            
    def check_core_pattern(self) -> bool:
        """Check if Apport is configured as core dump handler
        
        Returns:
            bool: True if Apport is the core dump handler, False otherwise
        """
        print("[*] Checking core dump configuration...")
        
        try:
            with open("/proc/sys/kernel/core_pattern", "r") as f:
                pattern = f.read().strip()
                
            if "apport" in pattern:
                self.results.append(("Core Pattern", STATUS_INFO, "Apport is configured as core dump handler"))
                return True
            else:
                self.results.append(("Core Pattern", STATUS_INFO, "Apport is NOT the core dump handler"))
                return False
                
        except Exception as e:
            self.results.append(("Core Pattern", STATUS_ERROR, f"Cannot read core pattern: {e}"))
            return False
            
    def check_suid_dumpable(self) -> None:
        """Check suid_dumpable setting (mitigation)"""
        print("[*] Checking suid_dumpable setting...")
        
        try:
            with open("/proc/sys/fs/suid_dumpable", "r") as f:
                value = f.read().strip()
                
            if value == "0":
                self.results.append(("Mitigation", STATUS_GOOD, "suid_dumpable=0 (mitigation enabled)"))
            elif value == "1":
                self.results.append(("Mitigation", STATUS_WARNING, "suid_dumpable=1 (default, vulnerable)"))
            elif value == "2":
                self.results.append(("Mitigation", STATUS_WARNING, "suid_dumpable=2 (debug mode, vulnerable)"))
            else:
                self.results.append(("Mitigation", STATUS_UNKNOWN, f"suid_dumpable={value} (unknown setting)"))
                
        except Exception as e:
            self.results.append(("Mitigation", STATUS_ERROR, f"Cannot read suid_dumpable: {e}"))
            
    def check_unix_chkpwd(self) -> None:
        """Check if unix_chkpwd is present (common attack vector)"""
        print("[*] Checking for unix_chkpwd...")
        
        paths = ["/usr/sbin/unix_chkpwd", "/sbin/unix_chkpwd"]
        found = False
        
        for path in paths:
            if Path(path).exists():
                # Check if it's SUID/SGID
                stat = os.stat(path)
                if stat.st_mode & 0o4000:  # SUID
                    self.results.append(("Attack Vector", STATUS_WARNING, f"SUID unix_chkpwd found at {path}"))
                    found = True
                elif stat.st_mode & 0o2000:  # SGID
                    self.results.append(("Attack Vector", STATUS_WARNING, f"SGID unix_chkpwd found at {path}"))
                    found = True
                else:
                    self.results.append(("Attack Vector", STATUS_INFO, f"unix_chkpwd found at {path} (not SUID/SGID)"))
                    found = True
                    
        if not found:
            self.results.append(("Attack Vector", STATUS_INFO, "unix_chkpwd not found"))
            
    def print_results(self) -> None:
        """Print detection results"""
        print("\n" + "=" * 60)
        print("DETECTION RESULTS")
        print("=" * 60)
        
        for category, status, message in self.results:
            status_color = self.status_colors.get(status, "")
            reset = COLOR_RESET if status_color else ""
            
            print(f"[{category}] {status_color}{status}{reset}: {message}")
            
        print("\n" + "=" * 60)
        print("SUMMARY")
        print("=" * 60)
        
        if self.vulnerable:
            print(f"{COLOR_RED}[!] YOUR SYSTEM APPEARS TO BE VULNERABLE TO CVE-2025-5054{COLOR_RESET}")
            print("\nRecommended actions:")
            print("1. Update Apport to the latest version:")
            print("   sudo apt update && sudo apt upgrade apport")
            print("\n2. As a temporary mitigation, disable SUID core dumps:")
            print("   sudo sysctl fs.suid_dumpable=0")
            print("   echo 'fs.suid_dumpable=0' | sudo tee -a /etc/sysctl.conf")
            print("\n3. Consider disabling Apport temporarily if updates are not available:")
            print("   sudo systemctl stop apport.service")
            print("   sudo systemctl disable apport.service")
        else:
            print(f"{COLOR_GREEN}[+] Your system does not appear to be vulnerable to CVE-2025-5054{COLOR_RESET}")
            
    def run(self) -> None:
        """Run all detection checks"""
        self.print_banner()
        
        # Check if running as root (recommended for accurate detection)
        if os.geteuid() != 0:
            print(f"{COLOR_YELLOW}[!] Warning: Running as non-root user. Some checks may be limited.{COLOR_RESET}")
            print("[!] For best results, run with: sudo python3 {}\n".format(sys.argv[0]))
            
        # Run checks
        if not self.check_os():
            self.print_results()
            return
            
        result = self.check_apport_installed()
        if not result:
            self.print_results()
            return
            
        if isinstance(result, tuple):
            _, version = result
            self.check_apport_version(version)
            
        # Additional checks
        apport_active = self.check_core_pattern()
        self.check_suid_dumpable()
        self.check_unix_chkpwd()
        
        # Only vulnerable if Apport is active and vulnerable version
        if not apport_active:
            self.vulnerable = False
            
        self.print_results()


if __name__ == "__main__":
    detector = VulnerabilityDetector()
    detector.run()
