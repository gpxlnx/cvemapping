#!/bin/bash

# colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
LIGHTBLUE='\033[1;34m'
NC='\033[0m'

# package versions that are known to be vulnerable
# Using regular arrays instead of associative arrays
VULNERABLE_PACKAGES=(
    "is:3.3.1 5.0.0"
    "eslint-config-prettier:8.10.1 9.1.1 10.1.6 10.1.7"
    "eslint-plugin-prettier:4.2.2 4.2.3"
    "synckit:0.11.9"
    "@pkgr/core:0.2.8"
    "napi-postinstall:0.3.1"
    "got-fetch:5.1.11 5.1.12"
)

# Function to get package name and versions
get_package_info() {
    local entry="$1"
    local package_name="${entry%%:*}"
    local versions="${entry#*:}"
    echo "$package_name|$versions"
}

# function to check for vulnerable packages in the project
check_dependencies() {
    echo -e "${LIGHTBLUE}=== Check the dependencies with npm list ===${NC}"
    local found_vulnerable=false
    local total_packages=${#VULNERABLE_PACKAGES[@]}
    local current=0

    for entry in "${VULNERABLE_PACKAGES[@]}"; do
        current=$((current + 1))
        local info=$(get_package_info "$entry")
        local package="${info%%|*}"
        local versions="${info#*|}"

        echo -e "\n[${current}/${total_packages}] Checking package: ${package}"
        # Use quotes around package name to handle @ symbol
        npm_list_output=$(npm list "${package}" 2>/dev/null)
        npm_exit_code=$?
        if [ $npm_exit_code -eq 0 ] && [ -n "$npm_list_output" ]; then
            # Package is installed
            local found_vulnerable_version=false
            local installed_versions=""

            # Extract all installed versions of this package
            installed_versions=$(echo "$npm_list_output" | grep -o "${package}@[0-9]\+\.[0-9]\+\.[0-9]\+" | cut -d'@' -f2)

            # Check each vulnerable version
            for version in $versions; do
                if echo "$npm_list_output" | grep -q "${package}@${version}"; then
                    echo -e "${RED}⚠️ Critical hit: ${package}@${version} is installed!${NC}"
                    found_vulnerable=true
                    found_vulnerable_version=true
                fi
            done

            # If package is installed but no vulnerable version found, show as warning
            if [ "$found_vulnerable_version" = false ] && [ -n "$installed_versions" ]; then
                echo -e "${YELLOW}⚠️ Warning: ${package} is installed but version differs from vulnerable versions.${NC}"
                echo -e "${YELLOW}   Installed version(s): ${installed_versions}${NC}"
                echo -e "${YELLOW}   Vulnerable versions: ${versions}${NC}"
            fi

            if [ "$found_vulnerable_version" = true ]; then
                echo -e "${RED}Package contains vulnerable version!${NC}"
            else
                echo -e "${GREEN}No vulnerable versions of ${package} found.${NC}"
            fi
        elif [ $npm_exit_code -eq 1 ]; then
            # Package not found - this is normal
            echo -e "${GREEN}${package} is not installed.${NC}"
        else
            # Other error
            echo -e "${YELLOW}Warning: Could not check ${package} (npm error)${NC}"
        fi
    done

    if [ "$found_vulnerable" = true ]; then
        return 1  # Found vulnerable packages
    else
        return 0  # No vulnerable packages found
    fi
}

# Function to check node_modules for suspicious files
check_node_modules() {
    echo -e "\n${LIGHTBLUE}=== Search for suspicious files (e.g. node-gyp.dll) in node_modules ===${NC}"
    local found_suspicious=false
    if find ./node_modules -name "node-gyp.dll" 2>/dev/null | grep -q .; then
        echo -e "${RED}⚠️ Suspicious file node-gyp.dll found! This indicates Scavenger malware.${NC}"
        found_suspicious=true
    else
        echo -e "${GREEN}No suspicious files (node-gyp.dll) found.${NC}"
    fi

    if [ "$found_suspicious" = true ]; then
        return 1
    else
        return 0
    fi
}

# Function to check package-lock.json
check_package_lock() {
    echo -e "\n${LIGHTBLUE}=== Checking package-lock.json ===${NC}"
    if [ ! -f package-lock.json ]; then
        echo -e "${YELLOW}No package-lock.json found. Check skipped.${NC}"
        return 0
    fi
    local found_vulnerable=false
    for entry in "${VULNERABLE_PACKAGES[@]}"; do
        local info=$(get_package_info "$entry")
        local package="${info%%|*}"
        local versions="${info#*|}"

        for version in $versions; do
            if grep -q "\"${package}\":.*\"${version}\"" package-lock.json 2>/dev/null; then
                echo -e "${RED}⚠️ Critical finding: ${package}@${version} found in package-lock.json!${NC}"
                found_vulnerable=true
            fi
        done
    done
    if [ "$found_vulnerable" = false ]; then
        echo -e "${GREEN}No compromised versions found in package-lock.json.${NC}"
    fi

    if [ "$found_vulnerable" = true ]; then
        return 1
    else
        return 0
    fi
}

# Function to check code usage
check_code_usage() {
    echo -e "\n${LIGHTBLUE}=== Search for import statements in code ===${NC}"
    local found_usage=false
    local detailed_output=""

    for entry in "${VULNERABLE_PACKAGES[@]}"; do
        local info=$(get_package_info "$entry")
        local package="${info%%|*}"

        # More precise regex that handles @-prefixed packages better
        local matches=$(grep -rE "(require\(['\"]${package}['\"])|((import|from)[[:space:]]+['\"]${package}['\"])" . --include=\*.{js,ts,jsx,tsx} 2>/dev/null)
        local usage_count=$(echo "$matches" | grep -c .)

        if [ "$usage_count" -gt 0 ]; then
            echo -e "${YELLOW}Warning: ${package} found in ${usage_count} file(s)${NC}"
            detailed_output="${detailed_output}\n--- ${package} ---\n${matches}\n"
            found_usage=true
        else
            echo -e "${GREEN}${package} is not used in code.${NC}"
        fi
    done

    # Only show details if VERBOSE environment variable is set
    if [ "$found_usage" = true ] && [ "$VERBOSE" = "1" ]; then
        echo -e "\n${YELLOW}Detailed usage (set VERBOSE=1 to see):${NC}"
        echo -e "$detailed_output"
    fi

    if [ "$found_usage" = true ]; then
        return 1
    else
        return 0
    fi
}

# Function to check circular dependencies
check_circular_dependencies() {
    echo -e "\n${LIGHTBLUE}=== Checking circular dependencies with madge ===${NC}"
    if ! command -v madge >/dev/null 2>&1; then
        echo -e "${YELLOW}madge is not installed. Install it with 'npm install -g madge' for complete analysis.${NC}"
        return 0
    fi
    if madge --circular . >/dev/null 2>&1; then
        echo -e "${GREEN}No circular dependencies found.${NC}"
    else
        echo -e "${YELLOW}Circular dependencies detected. Details:${NC}"
        madge --circular .
    fi
}

# Function to recommend actions
print_recommendations() {
    local found_vulnerable=$1
    echo -e "\n${LIGHTBLUE}=== Recommendations ===${NC}"
    if [ "$found_vulnerable" = true ]; then
        echo -e "${RED}⚠️ Compromised packages found! Execute the following steps:${NC}"
        echo "1. Update to secure versions (e.g. is@3.3.0, eslint-config-prettier@10.1.5)."
        echo "2. Delete node_modules and package-lock.json: rm -rf node_modules package-lock.json"
        echo "3. Reinstall dependencies: npm install"
        echo "4. Rotate all npm tokens and other sensitive credentials."
        echo "5. Check the system for malware (especially node-gyp.dll)."
        echo "6. Consider reinstalling the system if malware was executed."
        echo "7. More information: https://socket.dev/blog/npm-is-package-hijacked-in-expanding-supply-chain-attack"
    else
        echo -e "${GREEN}No compromised packages found. Still recommended:${NC}"
        echo "1. Enable 2FA for npm accounts."
        echo "2. Use fixed versions in package.json."
        echo "3. Check regularly with tools like socket.dev."
    fi
}

# Detect package manager
detect_package_manager() {
    if [ -f "yarn.lock" ]; then
        echo "yarn"
    elif [ -f "pnpm-lock.yaml" ]; then
        echo "pnpm"
    else
        echo "npm"
    fi
}

# main logic
main() {
    echo -e "${LIGHTBLUE}=== NPM Security Check for compromised packages ===${NC}"
    echo "Affected packages: checking $(echo "${VULNERABLE_PACKAGES[@]}" | wc -w) packages"
    echo -e "Check started at: $(date)\n"

    # Detect package manager
    PACKAGE_MANAGER=$(detect_package_manager)
    echo "Package manager detected: ${PACKAGE_MANAGER}"

    # Perform checks
    found_vulnerable=false
    check_dependencies || found_vulnerable=true
    check_node_modules || found_vulnerable=true
    check_package_lock || found_vulnerable=true
    check_code_usage
    check_circular_dependencies

    echo -e "\n${LIGHTBLUE}=== Summary ===${NC}"
    if [ "$found_vulnerable" = true ]; then
        echo -e "${RED}⚠️ SECURITY RISK: Vulnerable packages detected!${NC}"
    else
        echo -e "${GREEN}✓ No vulnerable packages found.${NC}"
    fi

    # Print recommendations
    print_recommendations $found_vulnerable

    # Exit with appropriate code
    if [ "$found_vulnerable" = true ]; then
        exit 1  # Vulnerable packages found
    else
        exit 0  # All clear
    fi
}

# Execute main function
if [ ! -f package.json ]; then
    echo -e "${RED}Error: No package.json found in the current directory. Please run this in the project directory.${NC}"
    exit 1
fi

main
